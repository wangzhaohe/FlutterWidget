<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20221017093031.1"><vh>widgets</vh>
<v t="swot.20221017093031.2"><vh>#file lib/main.dart</vh>
<v t="swot.20221017093031.3"><vh>import</vh></v>
<v t="swot.20221017093031.4"><vh>main()</vh></v>
<v t="swot.20221017093031.5"><vh>class MyApp -- MaterialApp</vh>
<v t="swot.20221022083314.1"><vh>&lt;&lt; showSemanticsDebugger &gt;&gt;</vh></v>
<v t="swot.20221021132401.1"><vh>&lt;&lt; routes &gt;&gt;</vh></v>
<v t="swot.20221118073920.1"><vh>&lt;&lt; ThemeData &gt;&gt;</vh>
<v t="swot.20221118074133.1"><vh>floatingActionButtonTheme</vh></v>
</v>
</v>
<v t="swot.20221021133107.2"><vh>class Home</vh>
<v t="swot.20221021133107.3"><vh>build()</vh>
<v t="swot.20221021135715.1"><vh>SafeArea</vh>
<v t="swot.20221021141328.1"><vh>Scaffold</vh>
<v t="swot.20221113194855.1"><vh>appBar: AppBar</vh></v>
<v t="swot.20221112195018.2"><vh>body: Column</vh>
<v t="swot.20221112195648.1"><vh>Center -- Alphabetical Example</vh></v>
<v t="swot.20221021133625.1"><vh>Wrap -- alphabet ElevatedButton</vh>
<v t="swot.20221021134037.2"><vh>ElevatedButton A</vh></v>
<v t="swot.20221021171707.1"><vh>ElevatedButton B</vh></v>
<v t="swot.20221022115433.1"><vh>ElevatedButton C</vh></v>
<v t="swot.20221024065732.1"><vh>ElevatedButton D</vh></v>
<v t="swot.20221026064030.1"><vh>ElevatedButton E</vh></v>
<v t="swot.20221026200727.1"><vh>ElevatedButton F</vh></v>
<v t="swot.20221028090127.1"><vh>ElevatedButton G</vh></v>
<v t="swot.20221023124300.1"><vh>ElevatedButton H</vh></v>
<v t="swot.20221029081545.1"><vh>ElevatedButton I</vh></v>
<v t="swot.20221023105031.1"><vh>ElevatedButton L</vh></v>
<v t="swot.20221023081344.1"><vh>ElevatedButton M</vh></v>
<v t="swot.20221029134319.1"><vh>ElevatedButton N</vh></v>
<v t="swot.20221023093000.1"><vh>ElevatedButton O</vh></v>
<v t="swot.20221030231220.1"><vh>ElevatedButton P</vh></v>
<v t="swot.20221023152035.1"><vh>ElevatedButton R</vh></v>
<v t="swot.20221024091106.1"><vh>ElevatedButton S</vh></v>
<v t="swot.20221023180102.1"><vh>ElevatedButton T</vh></v>
<v t="swot.20221030213345.1"><vh>ElevatedButton V</vh></v>
<v t="swot.20221030223324.1"><vh>ElevatedButton W</vh></v>
</v>
<v t="swot.20221112195040.1"><vh>Divider</vh></v>
<v t="swot.20221112195208.1"><vh>Center -- Composite Example</vh>
<v t="swot.20221112213542.1"><vh>&lt;&lt; ListTile -- User Login &gt;&gt;</vh></v>
</v>
<v t="swot.20221114070028.1"><vh>Center -- Functional Example</vh>
<v t="swot.20221114130724.1"><vh>&lt;&lt; ListTile -- Check Platform &gt;&gt;</vh>
<v t="swot.20221114153230.1"><vh>&lt;&lt; trailing &gt;&gt;</vh></v>
</v>
<v t="swot.20221116204444.1"><vh>&lt;&lt; ListTile -- IfElse Widget &gt;&gt;</vh></v>
<v t="swot.20221117183726.1"><vh>&lt;&lt; Easy Steps to Close Keyboard &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221112223923.1"><vh>AlphabeticalExample</vh>
<v t="swot.20221029130915.1"><vh>Example A-G</vh>
<v t="swot.20221021133027.1"><vh>A</vh>
<v t="swot.20221017093031.6"><vh>class A  -- Scaffold</vh>
<v t="swot.20221017093031.252"><vh>AppBar</vh></v>
</v>
<v t="swot.20221017093031.8"><vh>class DemoA</vh>
<v t="swot.20221017093031.21"><vh>build()</vh>
<v t="swot.20221017093031.22"><vh>SingleChildScrollView</vh>
<v t="swot.20221017093031.23"><vh>Column</vh>
<v t="swot.20221115115504.1"><vh>Axxx</vh>
<v t="swot.20221031135430.2"><vh>&lt;&lt; ListTile AdaptiveExample &gt;&gt;</vh></v>
</v>
<v t="swot.20221115195409.1"><vh>Animatedxxx</vh></v>
<v t="swot.20221115194933.1"><vh>SizedBox</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221021133039.1"><vh>B</vh>
<v t="swot.20221021171949.1"><vh>class B  -- Scaffold</vh>
<v t="swot.20221021173128.1"><vh>AppBar</vh></v>
</v>
<v t="swot.20221021172558.1"><vh>class DemoB</vh>
<v t="swot.20221021172558.14"><vh>build()</vh>
<v t="swot.20221021172558.15"><vh>SingleChildScrollView</vh>
<v t="swot.20221021172558.16"><vh>Column</vh>
<v t="swot.20221021173506.1"><vh>show BackdropFilterExample</vh></v>
<v t="swot.20221021181118.1"><vh>show BannerExample</vh></v>
<v t="swot.20221021181700.1"><vh>show BaselineExample</vh></v>
<v t="swot.20221022085519.1"><vh>show BlockSemanticsExample</vh></v>
<v t="swot.20221022101129.1"><vh>show BottomNavigationBarExample</vh></v>
<v t="swot.20221022094818.1"><vh>show BottomSheetExample</vh></v>
<v t="swot.20221022111104.1"><vh>show BuilderExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221022121254.1"><vh>C</vh>
<v t="swot.20221022121336.1"><vh>class C  -- Scaffold</vh>
<v t="swot.20221022121336.2"><vh>AppBar</vh></v>
</v>
<v t="swot.20221022121559.1"><vh>class DemoC</vh>
<v t="swot.20221022121559.2"><vh>build()</vh>
<v t="swot.20221022121559.3"><vh>SingleChildScrollView</vh>
<v t="swot.20221022121559.4"><vh>Column</vh>
<v t="swot.20221022121559.5"><vh>show CardExample</vh></v>
<v t="swot.20221022123052.1"><vh>show CenterExample</vh></v>
<v t="swot.20221022141621.1"><vh>show CheckboxExample</vh></v>
<v t="swot.20221022142602.1"><vh>show CheckboxListTileExample</vh></v>
<v t="swot.20221022143204.1"><vh>show ChipExample</vh></v>
<v t="swot.20221022144701.1"><vh>show ChoiceChipExample</vh></v>
<v t="swot.20221022145230.1"><vh>show CircleAvatarExample</vh></v>
<v t="swot.20221022153425.1"><vh>show CircularProgressIndicatorExample</vh></v>
<v t="swot.20221022154220.1"><vh>show ClipOvalExample</vh></v>
<v t="swot.20221022162124.1"><vh>show ClipPathExample</vh></v>
<v t="swot.20221022164554.1"><vh>show ClipRectExample</vh></v>
<v t="swot.20221022165721.1"><vh>show ClipRRectExample</vh></v>
<v t="swot.20221022170737.1"><vh>show CloseButtonExample</vh></v>
<v t="swot.20221022171708.1"><vh>show ColoredBoxExample</vh></v>
<v t="swot.20221022173017.1"><vh>show ColorFilteredExample</vh></v>
<v t="swot.20221022202111.1"><vh>show ConstrainedBoxExample</vh></v>
<v t="swot.20221022203303.1"><vh>show ContainerExample</vh></v>
<v t="swot.20221022203824.1"><vh>show ColumnExample</vh></v>
<v t="swot.20221022210532.1"><vh>show CupertinoActionSheetExample</vh></v>
<v t="swot.20221022214055.1"><vh>show CupertinoAppExample</vh></v>
<v t="swot.20221023164513.1"><vh>show CupertinoContextMenuExample</vh></v>
<v t="swot.20221031083344.1"><vh>show CupertinoSlidingSegmentedControlExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221024065815.1"><vh>D</vh>
<v t="swot.20221024065902.1"><vh>D  -- Scaffold</vh>
<v t="swot.20221024065902.2"><vh>AppBar</vh></v>
</v>
<v t="swot.20221024070012.1"><vh>DemoD</vh>
<v t="swot.20221024070127.1"><vh>build()</vh>
<v t="swot.20221024070127.2"><vh>SingleChildScrollView</vh>
<v t="swot.20221024070127.3"><vh>Column</vh>
<v t="swot.20221024112602.1"><vh>show DismissibleExample</vh></v>
<v t="swot.20221102102136.1"><vh>ElevatedButton -- show DividerExample</vh></v>
<v t="swot.20221025075357.1"><vh>show DraggableScrollableExample</vh></v>
<v t="swot.20221025091113.1"><vh>show DragTargetExample</vh></v>
<v t="swot.20221025095859.1"><vh>show DrawerExample</vh></v>
<v t="swot.20221110233828.1"><vh>show DropDownButtonExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025205925.1"><vh>E</vh>
<v t="swot.20221025205946.1"><vh>E  -- Scaffold</vh>
<v t="swot.20221025205946.2"><vh>AppBar</vh></v>
</v>
<v t="swot.20221025211051.1"><vh>DemoE</vh>
<v t="swot.20221025211051.2"><vh>build()</vh>
<v t="swot.20221025211051.3"><vh>SingleChildScrollView</vh>
<v t="swot.20221025211051.4"><vh>Column</vh>
<v t="swot.20221026194030.1"><vh>show ExpandedExample</vh></v>
<v t="swot.20221111204125.2"><vh>show ExpansionPanelListExample</vh></v>
<v t="swot.20221031073947.1"><vh>show ExpansionTileExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221026200827.1"><vh>F</vh>
<v t="swot.20221026200827.2"><vh>F  -- Scaffold</vh>
<v t="swot.20221027113937.1"><vh>SafeArea</vh>
<v t="swot.20221027114010.2"><vh>Scaffold</vh>
<v t="swot.20221026200827.3"><vh>appBar</vh></v>
<v t="swot.20221027114010.4"><vh>body</vh></v>
<v t="swot.20221027114010.6"><vh>floatingActionButton</vh>
<v t="swot.20221118072547.1"><vh>Change floating action button border color</vh></v>
<v t="swot.20221118072810.1"><vh>Change floating action button shadow color</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221026200827.4"><vh>DemoF</vh>
<v t="swot.20221026200827.5"><vh>build()</vh>
<v t="swot.20221026200827.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221026200827.7"><vh>Column</vh>
<v t="swot.20221031063757.2"><vh>ElevatedButton -- show FittedBoxExample</vh></v>
<v t="swot.20221027112321.2"><vh>show FlexbleExample</vh></v>
<v t="swot.20221027121244.1"><vh>show FormExample</vh></v>
<v t="swot.20221027203755.1"><vh>show FadeInImageExample</vh></v>
<v t="swot.20221027213559.2"><vh>show FractionallySizedBoxExample</vh></v>
<v t="swot.20221028065632.1"><vh>show FutureBuilderExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221028070508.1"><vh>G</vh>
<v t="swot.20221028070508.2"><vh>G  -- Scaffold</vh>
<v t="swot.20221028070508.3"><vh>SafeArea</vh>
<v t="swot.20221028070508.4"><vh>Scaffold</vh>
<v t="swot.20221028070508.5"><vh>appBar</vh></v>
<v t="swot.20221028070508.6"><vh>body</vh></v>
<v t="swot.20221028070508.7"><vh>floatingActionButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221028070508.8"><vh>DemoG</vh>
<v t="swot.20221028070508.9"><vh>build()</vh>
<v t="swot.20221028070508.10"><vh>SingleChildScrollView</vh>
<v t="swot.20221028070508.11"><vh>Column</vh>
<v t="swot.20221028090546.1"><vh>SizedBox</vh></v>
<v t="swot.20221028085926.1"><vh>show GestureDetectorExample</vh></v>
<v t="swot.20221028095636.2"><vh>show GridViewExample</vh></v>
<v t="swot.20221028131344.2"><vh>show GridTileExample</vh></v>
<v t="swot.20221031213940.2"><vh>ElevatedButton -- show GridPaperExample</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029131000.1"><vh>Example H-N</vh>
<v t="swot.20221023124355.1"><vh>H</vh>
<v t="swot.20221023124355.2"><vh>H  -- Scaffold</vh>
<v t="swot.20221023124355.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023124355.4"><vh>DemoH</vh>
<v t="swot.20221023124355.5"><vh>build()</vh>
<v t="swot.20221023124355.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221023124355.7"><vh>Column</vh>
<v t="swot.20221029090411.1"><vh>show HeroExample</vh></v>
<v t="swot.20221031151733.1"><vh>show HeroExample2</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029081714.1"><vh>I</vh>
<v t="swot.20221029081714.2"><vh>I  -- Scaffold</vh>
<v t="swot.20221029081714.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221029081714.4"><vh>DemoI</vh>
<v t="swot.20221029081714.5"><vh>build()</vh>
<v t="swot.20221029081714.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221029081714.7"><vh>Column</vh>
<v t="swot.20221029081714.8"><vh>ElevatedButton -- show InteractiveViewerExample</vh></v>
<v t="swot.20221101065031.2"><vh>ElevatedButton -- show InteractiveViewerExample2</vh></v>
<v t="swot.20221029121446.1"><vh>show IgnorePointerExample</vh></v>
<v t="swot.20221029125017.1"><vh>ElevatedButton -- show IndexedStackExample</vh></v>
<v t="swot.20221101063450.1"><vh>show InkwellExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023105117.1"><vh>L</vh>
<v t="swot.20221023105152.1"><vh>L  -- Scaffold</vh>
<v t="swot.20221023105152.2"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023105258.1"><vh>DemoL</vh>
<v t="swot.20221023105258.2"><vh>build()</vh>
<v t="swot.20221023105258.3"><vh>SingleChildScrollView</vh>
<v t="swot.20221023105258.4"><vh>Column</vh>
<v t="swot.20221030230436.2"><vh>ElevatedButton -- show LayoutBuilderExample</vh></v>
<v t="swot.20221023122724.2"><vh>ElevatedButton -- show LongPressDraggableExample</vh></v>
<v t="swot.20221029132948.2"><vh>ElevatedButton -- show ListViewExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023080501.1"><vh>M</vh>
<v t="swot.20221023080540.1"><vh>M  -- Scaffold</vh>
<v t="swot.20221023080540.2"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023081047.1"><vh>DemoM</vh>
<v t="swot.20221023081047.2"><vh>build()</vh>
<v t="swot.20221023081047.3"><vh>SingleChildScrollView</vh>
<v t="swot.20221023081047.4"><vh>Column</vh>
<v t="swot.20221023081047.5"><vh>show MaterialBannerExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029134405.1"><vh>N</vh>
<v t="swot.20221029134405.2"><vh>N  -- Scaffold</vh>
<v t="swot.20221029134405.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221029134405.4"><vh>DemoN</vh>
<v t="swot.20221029134405.5"><vh>build()</vh>
<v t="swot.20221029134405.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221029134405.7"><vh>Column</vh>
<v t="swot.20221029141845.2"><vh>ElevatedButton -- show NavigationBarExample</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029131010.1"><vh>Example O-T</vh>
<v t="swot.20221030231300.1"><vh>O</vh>
<v t="swot.20221030231300.2"><vh>O  -- Scaffold</vh>
<v t="swot.20221030231748.1"><vh>AppBar</vh></v>
</v>
<v t="swot.20221030231300.4"><vh>DemoO</vh>
<v t="swot.20221030231300.5"><vh>build()</vh>
<v t="swot.20221030231300.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221030231300.7"><vh>Column</vh>
<v t="swot.20221030232506.2"><vh>ElevatedButton -- show OrientationBuilderExample</vh></v>
<v t="swot.20221030233533.2"><vh>ElevatedButton -- show OverflowBarExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023093033.1"><vh>P</vh>
<v t="swot.20221023093033.2"><vh>P  -- Scaffold</vh>
<v t="swot.20221023093803.1"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023093033.4"><vh>DemoP</vh>
<v t="swot.20221023093033.5"><vh>build()</vh>
<v t="swot.20221023093033.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221023093033.7"><vh>Column</vh>
<v t="swot.20221029234843.2"><vh>ElevatedButton -- show PageViewExample</vh></v>
<v t="swot.20221025191831.1"><vh>show PopupMenuButtonExample</vh></v>
<v t="swot.20221030082123.2"><vh>ElevatedButton -- show PositionedExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023152107.1"><vh>R</vh>
<v t="swot.20221023152107.2"><vh>R  -- Scaffold</vh>
<v t="swot.20221023152533.1"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023152107.4"><vh>DemoR</vh>
<v t="swot.20221023152107.5"><vh>build()</vh>
<v t="swot.20221023152107.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221023152107.7"><vh>Column</vh>
<v t="swot.20221023154547.2"><vh>ElevatedButton -- show ReorderableListViewExample</vh></v>
<v t="swot.20221030084137.1"><vh>show RadioListTileExample</vh></v>
<v t="swot.20221030181409.2"><vh>ElevatedButton -- show RefreshIndicatorExample</vh></v>
<v t="swot.20221030205503.1"><vh>show RotatedBoxExample</vh></v>
<v t="swot.20221031182942.1"><vh>show RangeSliderExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221024070848.1"><vh>S</vh>
<v t="swot.20221024070848.2"><vh>S  -- Scaffold</vh>
<v t="swot.20221024070848.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221024070848.4"><vh>DemoS</vh>
<v t="swot.20221024070848.5"><vh>build()</vh>
<v t="swot.20221024070848.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221024070848.7"><vh>Column</vh>
<v t="swot.20221024100552.1"><vh>show DatePickerExample</vh></v>
<v t="swot.20221024103554.1"><vh>show TimePickerExample</vh></v>
<v t="swot.20221024110745.1"><vh>show DateRangePickerExample</vh></v>
<v t="swot.20221029143324.2"><vh>ElevatedButton -- show StackExample</vh></v>
<v t="swot.20221029190037.1"><vh>ElevatedButton -- show StepperExample</vh></v>
<v t="swot.20221029213808.1"><vh>ElevatedButton -- show StreamBuilderExample</vh></v>
<v t="swot.20221029215656.1"><vh>show SwitchExample</vh></v>
<v t="swot.20221030210255.1"><vh>show SelectableTextExample</vh></v>
<v t="swot.20221030211748.1"><vh>show SliderExample</vh></v>
<v t="swot.20221030212913.1"><vh>show SnackBarExample</vh></v>
<v t="swot.20221030225013.2"><vh>ElevatedButton -- show SafeAreaExample</vh></v>
<v t="swot.20221031122837.2"><vh>ElevatedButton -- show SearchDelegateExample</vh></v>
<v t="swot.20221031172540.2"><vh>ElevatedButton -- show SliveAppBarExample</vh></v>
<v t="swot.20221031225347.2"><vh>ElevatedButton -- show SpreadOperatorExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023175859.1"><vh>T</vh>
<v t="swot.20221023175859.2"><vh>T  -- Scaffold</vh>
<v t="swot.20221023175859.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221023175859.4"><vh>DemoT</vh>
<v t="swot.20221023175859.5"><vh>build()</vh>
<v t="swot.20221023175859.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221023175859.7"><vh>Column</vh>
<v t="swot.20221023195608.1"><vh>show TableExample</vh></v>
<v t="swot.20221114195006.2"><vh>ElevatedButton -- show TextExample</vh></v>
<v t="swot.20221113181739.2"><vh>ElevatedButton -- show TextFieldExample</vh></v>
<v t="swot.20221027182544.1"><vh>show TextFormFieldExample</vh></v>
<v t="swot.20221029222412.2"><vh>ElevatedButton -- show TabPageSelectorExample</vh></v>
<v t="swot.20221029232032.2"><vh>ElevatedButton -- show TabBarExample</vh></v>
<v t="swot.20221031220908.1"><vh>show TooltipExample</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221030213442.1"><vh>Example U-Z</vh>
<v t="swot.20221030213518.1"><vh>V</vh>
<v t="swot.20221030213518.2"><vh>V  -- Scaffold</vh>
<v t="swot.20221030213518.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221030213518.4"><vh>DemoV</vh>
<v t="swot.20221030213518.5"><vh>build()</vh>
<v t="swot.20221030213518.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221030213518.7"><vh>Column</vh>
<v t="swot.20221030222854.1"><vh>show VisibilityExample</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221030223524.1"><vh>W</vh>
<v t="swot.20221030223524.2"><vh>W  -- Scaffold</vh>
<v t="swot.20221030223524.3"><vh>AppBar</vh></v>
</v>
<v t="swot.20221030223524.4"><vh>DemoW</vh>
<v t="swot.20221030223524.5"><vh>build()</vh>
<v t="swot.20221030223524.6"><vh>SingleChildScrollView</vh>
<v t="swot.20221030223524.7"><vh>Column</vh>
<v t="swot.20221031202945.2"><vh>ElevatedButton -- show WillPopScopeExample</vh></v>
<v t="swot.20221030224243.2"><vh>ElevatedButton -- show WrapExample</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114225716.1"><vh>#file lib/alphabet.dart</vh>
<v t="swot.20221114231710.1"><vh>import</vh></v>
<v t="swot.20221115093740.1"><vh>A</vh>
<v t="swot.20221115092046.1"><vh>Widget ppAboutDialog()</vh>
<v t="swot.20221115092033.1"><vh>showDialog</vh>
<v t="swot.20221115092033.2"><vh>AboutDialog</vh></v>
</v>
</v>
<v t="swot.20221115093118.1"><vh>Widget ppAboutListTile()</vh>
<v t="swot.20221115093353.1"><vh>SizedBox -- show AboutListTile</vh>
<v t="swot.20221017093031.153"><vh>AboutListTile</vh></v>
</v>
</v>
<v t="swot.20221115114822.1"><vh>Widget ppAbsorbPointer()</vh>
<v t="swot.20221115120941.1"><vh>Container</vh>
<v t="swot.20221017093031.32"><vh>Stack           -- show AbsorbPointer包含按钮不可点击</vh>
<v t="swot.20221017093031.33"><vh>SizedBox</vh></v>
<v t="swot.20221017093031.34"><vh>SizedBox</vh>
<v t="swot.20221017093031.154"><vh>AbsorbPointer -- include button can not be clicked</vh>
<v t="swot.20221017093031.155"><vh>ElevatedButton 不可点击</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221115115948.1"><vh>Widget ppAlertDialog()</vh>
<v t="swot.20221115120424.1"><vh>showDialog</vh>
<v t="swot.20221115120424.2"><vh>AlertDialog</vh></v>
</v>
</v>
<v t="swot.20221115123329.1"><vh>Widget ppAlign()</vh>
<v t="swot.20221115125023.1"><vh>Row</vh>
<v t="swot.20221115123410.1"><vh>Container</vh>
<v t="swot.20221115123410.2"><vh>Align</vh></v>
</v>
<v t="swot.20221115125209.1"><vh>Padding</vh></v>
</v>
</v>
<v t="swot.20221115215710.1"><vh>Widget ppAspectRatio()</vh></v>
<v t="swot.20221031134256.2"><vh>AdaptiveExample</vh>
<v t="swot.20221031134256.6"><vh>build()</vh>
<v t="swot.20221031134345.2"><vh>Scaffold</vh>
<v t="swot.20221031134345.3"><vh>appBar</vh></v>
<v t="swot.20221031134345.4"><vh>body</vh>
<v t="swot.20221031134422.2"><vh>Center</vh>
<v t="swot.20221031134446.2"><vh>Column</vh>
<v t="swot.20221031134619.1"><vh>Slider.adaptive</vh></v>
<v t="swot.20221031140355.1"><vh>SwitchListTile.adaptive</vh></v>
<v t="swot.20221031140635.1"><vh>Switch.adaptive</vh></v>
<v t="swot.20221031140816.1"><vh>Icons.adaptive</vh></v>
<v t="swot.20221031140929.1"><vh>CircularProgressIndicator.adaptive</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221115131154.2"><vh>AnimatedAlignExample</vh>
<v t="swot.20221115131154.3"><vh>varible</vh></v>
<v t="swot.20221115131154.6"><vh>build()</vh>
<v t="swot.20221115132124.1"><vh>Row</vh>
<v t="swot.20221115131443.1"><vh>GestureDetector -- show AnimatedAlign</vh>
<v t="swot.20221115131443.2"><vh>AnimatedAlign</vh></v>
</v>
<v t="swot.20221115132041.1"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221115145639.1"><vh>AnimatedBuilderExample -- step 1</vh>
<v t="swot.20221115145639.2"><vh>varible             -- step 2</vh></v>
<v t="swot.20221115145639.3"><vh>initState()         -- step 3</vh></v>
<v t="swot.20221115145639.4"><vh>dispose()           -- step 4</vh></v>
<v t="swot.20221115145639.5"><vh>build()</vh>
<v t="swot.20221115145926.1"><vh>Row</vh>
<v t="swot.20221115150133.1"><vh>Container</vh>
<v t="swot.20221115152731.1"><vh>AnimatedBuilder  -- step 5</vh></v>
</v>
<v t="swot.20221115150013.1"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221101163948.2"><vh>AnimatedContainerExample</vh>
<v t="swot.20221101163948.3"><vh>varible</vh></v>
<v t="swot.20221101163948.6"><vh>build()</vh>
<v t="swot.20221115160357.1"><vh>Row</vh>
<v t="swot.20221101165100.1"><vh>GestureDetector</vh>
<v t="swot.20221101165100.2"><vh>AnimatedContainer</vh></v>
</v>
<v t="swot.20221115160421.1"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221031193012.2"><vh>AnimatedCrossFadeExample</vh>
<v t="swot.20221031193012.3"><vh>varible</vh></v>
<v t="swot.20221031193012.6"><vh>build()</vh>
<v t="swot.20221031193341.2"><vh>Row</vh>
<v t="swot.20221115161549.1"><vh>Container</vh>
<v t="swot.20221017093031.165"><vh>AnimatedCrossFade</vh></v>
</v>
<v t="swot.20221031193450.1"><vh>TextButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221101175102.2"><vh>AnimatedDefaultTextStyleExample</vh>
<v t="swot.20221101175102.3"><vh>varible</vh></v>
<v t="swot.20221101175102.6"><vh>build()</vh>
<v t="swot.20221101175533.1"><vh>Row</vh>
<v t="swot.20221101175533.3"><vh>SizedBox</vh>
<v t="swot.20221101175533.4"><vh>AnimatedDefaultTextStyle</vh></v>
</v>
<v t="swot.20221101175533.2"><vh>TextButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221027192851.2"><vh>AnimatedIconExample -- TickerProviderStateMixin</vh>
<v t="swot.20221027192851.3"><vh>varible</vh></v>
<v t="swot.20221027192851.4"><vh>initState()</vh></v>
<v t="swot.20221027192851.5"><vh>dispose()</vh></v>
<v t="swot.20221027192851.6"><vh>build()</vh>
<v t="swot.20221115171940.1"><vh>Row</vh>
<v t="swot.20221027194101.1"><vh>GestureDetector</vh>
<v t="swot.20221027194101.2"><vh>AnimatedIcon</vh></v>
</v>
<v t="swot.20221115171856.1"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221101181708.2"><vh>AnimatedListExample</vh>
<v t="swot.20221101181708.3"><vh>varible</vh></v>
<v t="swot.20221101181708.4"><vh>initState()</vh></v>
<v t="swot.20221101181708.5"><vh>dispose()</vh></v>
<v t="swot.20221101181708.6"><vh>build()</vh>
<v t="swot.20221101182425.2"><vh>Column</vh>
<v t="swot.20221115200646.1"><vh>ListTile</vh></v>
<v t="swot.20221101182340.2"><vh>AnimatedList</vh>
<v t="swot.20221101182340.3"><vh>SizeTransition</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.180"><vh>AnimatedModalBarrierExample</vh>
<v t="swot.20221017093031.181"><vh>varible</vh></v>
<v t="swot.20221017093031.182"><vh>initState()</vh></v>
<v t="swot.20221017093031.183"><vh>dispose()</vh></v>
<v t="swot.20221017093031.184"><vh>build()</vh>
<v t="swot.20221115190544.2"><vh>SizedBox</vh>
<v t="swot.20221101193037.1"><vh>Stack</vh>
<v t="swot.20221017093031.185"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.186"><vh>_animatedModalBarrier</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.188"><vh>AnimatedOpacityExample</vh>
<v t="swot.20221017093031.189"><vh>varible</vh></v>
<v t="swot.20221017093031.191"><vh>build()</vh>
<v t="swot.20221017093031.192"><vh>AnimatedOpacity</vh></v>
<v t="swot.20221115202940.1"><vh>SizeBox</vh>
<v t="swot.20221017093031.193"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.197"><vh>AnimatedPaddingExample</vh>
<v t="swot.20221017093031.198"><vh>varible</vh></v>
<v t="swot.20221017093031.200"><vh>build()</vh>
<v t="swot.20221017093031.202"><vh>Row</vh>
<v t="swot.20221017093031.205"><vh>AnimatedPadding</vh></v>
<v t="swot.20221115204946.1"><vh>Padding</vh>
<v t="swot.20221017093031.203"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.208"><vh>AnimatedPhysicalModelExample</vh>
<v t="swot.20221017093031.209"><vh>varible</vh></v>
<v t="swot.20221017093031.212"><vh>build()</vh>
<v t="swot.20221115205826.2"><vh>Row</vh>
<v t="swot.20221017093031.214"><vh>AnimatedPhysicalModel</vh></v>
<v t="swot.20221115205935.2"><vh>Padding</vh>
<v t="swot.20221017093031.213"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.217"><vh>AnimatedPositionedExample</vh>
<v t="swot.20221017093031.218"><vh>varible</vh></v>
<v t="swot.20221017093031.221"><vh>build()</vh>
<v t="swot.20221017093031.222"><vh>SizedBox</vh>
<v t="swot.20221017093031.223"><vh>Stack</vh>
<v t="swot.20221017093031.224"><vh>AnimatedPositioned -- in stack widget</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.227"><vh>AnimatedRotationExample</vh>
<v t="swot.20221017093031.228"><vh>varible</vh></v>
<v t="swot.20221017093031.231"><vh>build()</vh>
<v t="swot.20221017093031.233"><vh>Padding</vh>
<v t="swot.20221101201546.1"><vh>AnimatedRotation</vh></v>
</v>
<v t="swot.20221115213128.2"><vh>Padding</vh>
<v t="swot.20221017093031.232"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.236"><vh>AnimatedSizeExample</vh>
<v t="swot.20221017093031.237"><vh>varible</vh></v>
<v t="swot.20221017093031.238"><vh>initState()</vh></v>
<v t="swot.20221017093031.239"><vh>dispose()</vh></v>
<v t="swot.20221017093031.240"><vh>build()</vh>
<v t="swot.20221017093031.242"><vh>GestureDetector</vh>
<v t="swot.20221115213902.1"><vh>AnimatedSize</vh></v>
</v>
<v t="swot.20221115213615.2"><vh>Padding</vh>
<v t="swot.20221017093031.241"><vh>Text</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.244"><vh>AnimatedSwitcherExample</vh>
<v t="swot.20221017093031.245"><vh>varible</vh></v>
<v t="swot.20221017093031.248"><vh>build()</vh>
<v t="swot.20221017093031.250"><vh>AnimatedSwitcher</vh></v>
<v t="swot.20221115214248.2"><vh>Padding</vh>
<v t="swot.20221017093031.249"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.256"><vh>AutoCompleteExample -- should not locate at bottom (will be shield by keyboard)</vh>
<v t="swot.20221017093031.257"><vh>varible</vh></v>
<v t="swot.20221017093031.258"><vh>build()</vh>
<v t="swot.20221115221134.2"><vh>Container</vh>
<v t="swot.20221115221203.1"><vh>Autocomplete</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221022121355.1"><vh>B</vh>
<v t="swot.20221019111317.2"><vh>BackdropFilterExample</vh>
<v t="swot.20221019111317.3"><vh>build()</vh></v>
</v>
<v t="swot.20221021175217.2"><vh>BannerExample</vh>
<v t="swot.20221021175217.3"><vh>build()</vh>
<v t="swot.20221021175330.1"><vh>Center</vh>
<v t="swot.20221021175401.1"><vh>Container</vh>
<v t="swot.20221021180745.1"><vh>ClipRect</vh>
<v t="swot.20221021180828.1"><vh>Banner</vh>
<v t="swot.20221021175506.1"><vh>Container</vh>
<v t="swot.20221021175604.1"><vh>Padding</vh>
<v t="swot.20221021175702.1"><vh>Column</vh>
<v t="swot.20221021175915.1"><vh>Image</vh></v>
<v t="swot.20221021180035.1"><vh>SizedBox</vh></v>
<v t="swot.20221021180106.1"><vh>Row</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221021181642.2"><vh>BaselineExample</vh>
<v t="swot.20221021181642.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022080218.2"><vh>BlockSemanticsExample</vh>
<v t="swot.20221022083723.1"><vh>varible</vh></v>
<v t="swot.20221022080218.3"><vh>initState()</vh></v>
<v t="swot.20221022080218.4"><vh>dispose()</vh></v>
<v t="swot.20221022080218.5"><vh>build()</vh>
<v t="swot.20221022080422.1"><vh>SizedBox</vh>
<v t="swot.20221022083203.1"><vh>SizedBox</vh>
<v t="swot.20221022083954.1"><vh>Column</vh>
<v t="swot.20221022084045.1"><vh>OutlinedButton</vh></v>
<v t="swot.20221022084513.1"><vh>if (isShow)</vh>
<v t="swot.20221022091825.1"><vh>BlockSemantics</vh>
<v t="swot.20221022090937.1"><vh>Card</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221022094100.2"><vh>BottomNavigationBarExample</vh>
<v t="swot.20221022094133.1"><vh>varible</vh></v>
<v t="swot.20221022094100.5"><vh>build()</vh>
<v t="swot.20221022095720.2"><vh>Scaffold</vh>
<v t="swot.20221022101748.1"><vh>appBar</vh></v>
<v t="swot.20221022095720.4"><vh>body</vh></v>
<v t="swot.20221022095720.5"><vh>bottomNavigationBar</vh></v>
</v>
</v>
</v>
<v t="swot.20221022104843.2"><vh>BottomSheetExample</vh>
<v t="swot.20221022104843.5"><vh>build()</vh>
<v t="swot.20221110210618.1"><vh>showModalBottomSheet !!!</vh></v>
</v>
</v>
<v t="swot.20221022110627.2"><vh>BuilderExample</vh>
<v t="swot.20221022110627.3"><vh>build()</vh></v>
<v t="swot.20221022110900.1"><vh>myBuilderWidget()</vh></v>
</v>
</v>
<v t="swot.20221022121728.1"><vh>C</vh>
<v t="swot.20221022121755.2"><vh>CardExample</vh>
<v t="swot.20221022121755.3"><vh>build()</vh>
<v t="swot.20221022122022.1"><vh>Card</vh></v>
</v>
</v>
<v t="swot.20221022122655.2"><vh>CenterExample</vh>
<v t="swot.20221022122655.3"><vh>build()</vh>
<v t="swot.20221022122945.1"><vh>Center</vh></v>
</v>
</v>
<v t="swot.20221022141252.2"><vh>CheckboxExample</vh>
<v t="swot.20221022141315.1"><vh>varible</vh></v>
<v t="swot.20221022141252.3"><vh>initState()</vh></v>
<v t="swot.20221022141252.4"><vh>dispose()</vh></v>
<v t="swot.20221022141252.5"><vh>build()</vh>
<v t="swot.20221110225519.1"><vh>Theme</vh>
<v t="swot.20221110225224.1"><vh>Checkbox !!!</vh></v>
</v>
</v>
</v>
<v t="swot.20221022141946.2"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022142005.1"><vh>varible</vh></v>
<v t="swot.20221022141946.5"><vh>build()</vh>
<v t="swot.20221022142124.1"><vh>CheckboxListTile</vh></v>
</v>
</v>
<v t="swot.20221022142919.2"><vh>ChipExample</vh>
<v t="swot.20221022142919.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022144339.2"><vh>ChoiceChipExample</vh>
<v t="swot.20221022144356.1"><vh>varible</vh></v>
<v t="swot.20221022144339.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022145018.2"><vh>CircleAvatarExample</vh>
<v t="swot.20221022145018.3"><vh>build()</vh>
<v t="swot.20221117124850.2"><vh>Scaffold</vh>
<v t="swot.20221117124850.3"><vh>appBar</vh></v>
<v t="swot.20221117124850.4"><vh>body</vh>
<v t="swot.20221117130100.1"><vh>Container</vh>
<v t="swot.20221117125122.2"><vh>Column</vh>
<v t="swot.20221117154500.1"><vh>CircleAvatar -- three layers</vh>
<v t="swot.20221117164057.1"><vh>CircleAvatar</vh>
<v t="swot.20221117124927.1"><vh>CircleAvatar</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221022153237.2"><vh>CircularProgressIndicatorExample</vh>
<v t="swot.20221022153237.3"><vh>initState()</vh></v>
<v t="swot.20221022153237.4"><vh>dispose()</vh></v>
<v t="swot.20221022153237.5"><vh>build()</vh></v>
</v>
<v t="swot.20221116182028.1"><vh>ClipOvalExample</vh>
<v t="swot.20221116182028.2"><vh>ClipOvalExample</vh>
<v t="swot.20221116182028.3"><vh>build()</vh></v>
</v>
<v t="swot.20221116182028.4"><vh>CustomClip</vh></v>
</v>
<v t="swot.20221116181957.1"><vh>ClipPathExample</vh>
<v t="swot.20221116181957.2"><vh>ClipPathExample</vh>
<v t="swot.20221116181957.3"><vh>build()</vh></v>
</v>
<v t="swot.20221116181957.4"><vh>MyClipper1</vh></v>
</v>
<v t="swot.20221116181924.1"><vh>ClipRectExample</vh>
<v t="swot.20221116181924.2"><vh>ClipRectExample</vh>
<v t="swot.20221116181924.3"><vh>build()</vh></v>
</v>
<v t="swot.20221116181924.4"><vh>MyClipper2</vh></v>
</v>
<v t="swot.20221022165324.2"><vh>ClipRRectExample</vh>
<v t="swot.20221022165324.5"><vh>build()</vh>
<v t="swot.20221117182334.2"><vh>Scaffold</vh>
<v t="swot.20221117182334.3"><vh>appBar</vh></v>
<v t="swot.20221117182334.4"><vh>body</vh>
<v t="swot.20221117182433.1"><vh>Center</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221022170557.2"><vh>CloseButtonExample</vh>
<v t="swot.20221022170557.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022171523.2"><vh>ColoredBoxExample</vh>
<v t="swot.20221022171523.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022172641.2"><vh>ColorFilteredExample</vh>
<v t="swot.20221022172641.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022201619.2"><vh>ConstrainedBoxExample</vh>
<v t="swot.20221022201619.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022202825.2"><vh>ContainerExample</vh>
<v t="swot.20221022202825.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022203601.2"><vh>ColumnExample</vh>
<v t="swot.20221022203601.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022210338.2"><vh>CupertinoActionSheetExample</vh>
<v t="swot.20221022210338.3"><vh>initState()</vh></v>
<v t="swot.20221022210338.4"><vh>dispose()</vh></v>
<v t="swot.20221022210338.5"><vh>build()</vh></v>
</v>
<v t="swot.20221116181828.1"><vh>CupertinoAppExample</vh>
<v t="swot.20221116181828.2"><vh>CupertinoAppExample</vh>
<v t="swot.20221116181828.3"><vh>build()</vh></v>
</v>
<v t="swot.20221116181828.4"><vh>MyCupertinoApp</vh>
<v t="swot.20221116181828.5"><vh>build()</vh></v>
</v>
</v>
<v t="swot.20221023163418.2"><vh>CupertinoContextMenuExample</vh>
<v t="swot.20221023163418.3"><vh>build()</vh>
<v t="swot.20221023163626.1"><vh>CupertinoContextMenu</vh></v>
</v>
</v>
<v t="swot.20221031082929.2"><vh>CupertinoSlidingSegmentedControlExample</vh>
<v t="swot.20221031083017.1"><vh>value</vh></v>
<v t="swot.20221031082929.3"><vh>build()</vh>
<v t="swot.20221031083051.1"><vh>CupertinoSlidingSegmentedControl</vh></v>
</v>
</v>
</v>
<v t="swot.20221024070225.1"><vh>D</vh>
<v t="swot.20221024112614.2"><vh>DismissibleExample</vh>
<v t="swot.20221024112703.1"><vh>varible</vh></v>
<v t="swot.20221024112614.3"><vh>initState()</vh></v>
<v t="swot.20221024112614.4"><vh>dispose()</vh></v>
<v t="swot.20221024112614.5"><vh>build()</vh>
<v t="swot.20221024113603.2"><vh>Scaffold</vh>
<v t="swot.20221024113603.3"><vh>appBar</vh></v>
<v t="swot.20221024113603.4"><vh>body</vh>
<v t="swot.20221024113627.1"><vh>ListView</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221102101634.2"><vh>DividerExample</vh>
<v t="swot.20221102101634.3"><vh>build()</vh>
<v t="swot.20221102103902.2"><vh>Scaffold</vh>
<v t="swot.20221102103902.3"><vh>appBar</vh></v>
<v t="swot.20221102103902.4"><vh>body</vh>
<v t="swot.20221102103050.2"><vh>Column</vh>
<v t="swot.20221102102110.1"><vh>Container</vh></v>
<v t="swot.20221102101649.1"><vh>Divider</vh></v>
<v t="swot.20221102101920.2"><vh>Container</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025074739.2"><vh>DraggableScrollableExample</vh>
<v t="swot.20221025074739.3"><vh>build()</vh>
<v t="swot.20221025081258.2"><vh>Scaffold</vh>
<v t="swot.20221025081258.3"><vh>appBar</vh></v>
<v t="swot.20221025081258.4"><vh>body</vh>
<v t="swot.20221025081316.1"><vh>DraggableScrollableSheet</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221025081939.2"><vh>DragTargetExample</vh>
<v t="swot.20221025081939.3"><vh>varible</vh></v>
<v t="swot.20221025081939.4"><vh>initState()</vh></v>
<v t="swot.20221025081939.5"><vh>dispose()</vh></v>
<v t="swot.20221025081939.6"><vh>build()</vh>
<v t="swot.20221025091431.2"><vh>Scaffold</vh>
<v t="swot.20221025091431.3"><vh>appBar</vh></v>
<v t="swot.20221025091431.4"><vh>body</vh>
<v t="swot.20221025083125.1"><vh>SizedBox</vh>
<v t="swot.20221025083519.1"><vh>Column</vh>
<v t="swot.20221025083732.1"><vh>Draggable</vh></v>
<v t="swot.20221025084843.1"><vh>DragTarget</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025095334.2"><vh>DrawerExample</vh>
<v t="swot.20221025095334.3"><vh>build()</vh>
<v t="swot.20221025095436.2"><vh>Scaffold</vh>
<v t="swot.20221025095436.3"><vh>appBar</vh></v>
<v t="swot.20221025095436.4"><vh>body</vh></v>
<v t="swot.20221025095602.1"><vh>endDrawer</vh></v>
</v>
</v>
</v>
<v t="swot.20221110233138.2"><vh>DropDownButtonExample</vh>
<v t="swot.20221110233138.3"><vh>varible</vh></v>
<v t="swot.20221110233138.4"><vh>initState()</vh></v>
<v t="swot.20221110233138.5"><vh>dispose()</vh></v>
<v t="swot.20221110233138.6"><vh>build()</vh>
<v t="swot.20221111000936.2"><vh>Column</vh>
<v t="swot.20221111000057.1"><vh>SizedBox</vh>
<v t="swot.20221110233541.2"><vh>DropdownButton !!!</vh></v>
</v>
<v t="swot.20221111001008.1"><vh>SizedBox</vh>
<v t="swot.20221111001008.2"><vh>DropdownButtonFormField !!!</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025211157.1"><vh>E</vh>
<v t="swot.20221026073602.2"><vh>ExpandedExample -- height in Expanded takes no effect</vh>
<v t="swot.20221026073602.3"><vh>build()</vh>
<v t="swot.20221026193458.1"><vh>Expanded</vh></v>
<v t="swot.20221026193703.1"><vh>Expanded</vh></v>
<v t="swot.20221026193706.1"><vh>Expanded</vh></v>
</v>
</v>
<v t="swot.20221116182847.1"><vh>ExpansionPanelListExample</vh>
<v t="swot.20221111204854.1"><vh>class Item</vh></v>
<v t="swot.20221111201811.2"><vh>ExpansionPanelListExample</vh>
<v t="swot.20221111201811.3"><vh>varible</vh></v>
<v t="swot.20221111201811.4"><vh>initState()</vh></v>
<v t="swot.20221111201811.5"><vh>dispose()</vh></v>
<v t="swot.20221111201811.6"><vh>build()</vh>
<v t="swot.20221111202207.2"><vh>Scaffold</vh>
<v t="swot.20221111202207.3"><vh>appBar</vh></v>
<v t="swot.20221111202207.4"><vh>body</vh>
<v t="swot.20221111202707.2"><vh>SingleChildScrollView</vh>
<v t="swot.20221111213642.2"><vh>Column</vh>
<v t="swot.20221111213817.1"><vh>Text('Radio')</vh></v>
<v t="swot.20221111202728.1"><vh>ExpansionPanelList.radio !!!</vh></v>
<v t="swot.20221111214514.1"><vh>SizedBox</vh></v>
<v t="swot.20221111214154.1"><vh>Text('Multiple')</vh></v>
<v t="swot.20221111212929.1"><vh>ExpansionPanelList !!!</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221031070602.2"><vh>ExpansionTileExample</vh>
<v t="swot.20221031070602.3"><vh>varible</vh></v>
<v t="swot.20221031070602.6"><vh>build()</vh>
<v t="swot.20221031074359.2"><vh>Column</vh>
<v t="swot.20221031074310.1"><vh>ExpansionTile -- basic icon</vh></v>
<v t="swot.20221031073139.1"><vh>ExpansionTile -- _customIcon</vh></v>
<v t="swot.20221031074605.1"><vh>ExpansionTile -- change icon location</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221026200827.9"><vh>F</vh>
<v t="swot.20221030234221.2"><vh>FittedBoxExample</vh>
<v t="swot.20221030234221.3"><vh>build()</vh>
<v t="swot.20221031064454.2"><vh>Scaffold</vh>
<v t="swot.20221031064454.3"><vh>appBar</vh></v>
<v t="swot.20221031064454.4"><vh>body</vh>
<v t="swot.20221030234303.2"><vh>Center</vh>
<v t="swot.20221031063239.2"><vh>Container</vh>
<v t="swot.20221031070048.1"><vh>FittedBox</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027111458.2"><vh>FlexibleExample</vh>
<v t="swot.20221027111458.3"><vh>build()</vh>
<v t="swot.20221027112522.2"><vh>Scaffold</vh>
<v t="swot.20221027112522.3"><vh>appBar</vh></v>
<v t="swot.20221027112522.4"><vh>body</vh>
<v t="swot.20221027111807.1"><vh>Column</vh>
<v t="swot.20221027111848.1"><vh>Flexible -- FlexFit.loose is default</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027115627.2"><vh>FormExample</vh>
<v t="swot.20221027120023.1"><vh>value</vh></v>
<v t="swot.20221027115627.3"><vh>build()</vh>
<v t="swot.20221027115750.2"><vh>Scaffold</vh>
<v t="swot.20221027115750.3"><vh>appBar</vh></v>
<v t="swot.20221027115750.4"><vh>body</vh>
<v t="swot.20221027115911.1"><vh>Padding</vh>
<v t="swot.20221027115952.1"><vh>Form !!! -- _formKey</vh>
<v t="swot.20221112175512.1"><vh>TextFormField</vh>
<v t="swot.20221112181907.1"><vh>2) validator !!!</vh></v>
</v>
<v t="swot.20221112175530.1"><vh>ElevatedButton</vh>
<v t="swot.20221112182043.1"><vh>1) onPressed !!! _formKey.currentState!.validate()</vh>
<v t="swot.20221112182228.1"><vh>3) showSnackBar</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027203431.2"><vh>FadeInImageExample</vh>
<v t="swot.20221027203431.3"><vh>build()</vh></v>
</v>
<v t="swot.20221027212222.2"><vh>FractionallySizedBoxExample</vh>
<v t="swot.20221027212222.3"><vh>build()</vh>
<v t="swot.20221027212407.2"><vh>Scaffold</vh>
<v t="swot.20221027212407.3"><vh>appBar</vh></v>
<v t="swot.20221027212407.4"><vh>body</vh>
<v t="swot.20221027212916.2"><vh>Center</vh>
<v t="swot.20221027212959.1"><vh>FractionallySizedBox</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221028064229.2"><vh>FutureBuilderExample</vh>
<v t="swot.20221028064229.3"><vh>varible</vh></v>
<v t="swot.20221028064229.6"><vh>build()</vh>
<v t="swot.20221028064815.1"><vh>FutureBuilder</vh></v>
</v>
</v>
<v t="swot.20221027114210.1"><vh>FloatingActionButtonExample</vh>
<v t="swot.20221118073702.1"><vh>change-floating-action-button-color at the page level</vh>
<v t="swot.20221027114010.6"></v>
</v>
<v t="swot.20221118073739.1"><vh>change-floating-action-button-color at the app level</vh>
<v t="swot.20221118074133.1"></v>
</v>
</v>
</v>
<v t="swot.20221028070508.17"><vh>G</vh>
<v t="swot.20221028084729.2"><vh>GestureDetectorExample</vh>
<v t="swot.20221028084729.3"><vh>varible</vh></v>
<v t="swot.20221028084729.6"><vh>build()</vh></v>
</v>
<v t="swot.20221031213433.2"><vh>GridPaperExample</vh>
<v t="swot.20221031213433.3"><vh>build()</vh>
<v t="swot.20221031213506.2"><vh>Scaffold</vh>
<v t="swot.20221031213506.3"><vh>appBar</vh></v>
<v t="swot.20221031213506.4"><vh>body</vh>
<v t="swot.20221031213547.1"><vh>SizedBox</vh>
<v t="swot.20221031213653.1"><vh>GridPaper</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221028093414.2"><vh>GridViewExample</vh>
<v t="swot.20221028093414.3"><vh>build()</vh>
<v t="swot.20221028122703.2"><vh>Scaffold</vh>
<v t="swot.20221028122703.3"><vh>appBar</vh></v>
<v t="swot.20221028122703.4"><vh>body</vh>
<v t="swot.20221028093753.1"><vh>GridView</vh>
<v t="swot.20221029070417.1"><vh>GridTile -- use GridTileBar</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221028130417.2"><vh>GridTileExample</vh>
<v t="swot.20221028130417.3"><vh>build()</vh>
<v t="swot.20221028131715.2"><vh>Scaffold</vh>
<v t="swot.20221028131715.3"><vh>appBar</vh></v>
<v t="swot.20221028131715.4"><vh>body</vh>
<v t="swot.20221028130528.1"><vh>Center</vh>
<v t="swot.20221029070735.1"><vh>SizedBox</vh>
<v t="swot.20221029070636.1"><vh>GridTile  -- use Container</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023124644.1"><vh>H</vh>
<v t="swot.20221029092751.2"><vh>HeroExample</vh>
<v t="swot.20221029092751.3"><vh>build()</vh>
<v t="swot.20221029094712.2"><vh>Scaffold</vh>
<v t="swot.20221029094712.3"><vh>appBar</vh></v>
<v t="swot.20221029094712.4"><vh>body</vh>
<v t="swot.20221029092810.1"><vh>Center</vh>
<v t="swot.20221029092914.1"><vh>Hero</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221031143139.2"><vh>HeroExample2</vh>
<v t="swot.20221031143139.3"><vh>build()</vh>
<v t="swot.20221031143419.2"><vh>Scaffold</vh>
<v t="swot.20221031143419.3"><vh>appBar</vh></v>
<v t="swot.20221031143419.4"><vh>body</vh>
<v t="swot.20221031143456.1"><vh>Hero</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029081714.13"><vh>I</vh>
<v t="swot.20221029081714.14"><vh>InteractiveViewerExample</vh>
<v t="swot.20221029081714.17"><vh>build()</vh></v>
</v>
<v t="swot.20221101064424.1"><vh>InteractiveViewerExample2 -- scale the image</vh>
<v t="swot.20221101064424.2"><vh>build()</vh></v>
</v>
<v t="swot.20221029115307.2"><vh>IgnorePointerExample</vh>
<v t="swot.20221029115307.3"><vh>varible</vh></v>
<v t="swot.20221029115307.4"><vh>initState()</vh></v>
<v t="swot.20221029115307.5"><vh>dispose()</vh></v>
<v t="swot.20221029115307.6"><vh>build()</vh>
<v t="swot.20221029115522.1"><vh>Row</vh>
<v t="swot.20221029115652.2"><vh>ElevatedButton</vh></v>
<v t="swot.20221029120401.1"><vh>IgnorePointer</vh></v>
</v>
</v>
</v>
<v t="swot.20221029122755.2"><vh>IndexedStackExample</vh>
<v t="swot.20221029122755.3"><vh>varible</vh></v>
<v t="swot.20221029122755.4"><vh>initState()</vh></v>
<v t="swot.20221029122755.5"><vh>dispose()</vh></v>
<v t="swot.20221029122755.6"><vh>build()</vh>
<v t="swot.20221029125202.2"><vh>Scaffold</vh>
<v t="swot.20221029125202.3"><vh>appBar</vh></v>
<v t="swot.20221029125202.4"><vh>body</vh>
<v t="swot.20221029123730.2"><vh>Padding</vh>
<v t="swot.20221029123925.2"><vh>Column</vh>
<v t="swot.20221029124213.2"><vh>Row</vh>
<v t="swot.20221029124242.2"><vh>ElevatedButton 0</vh></v>
<v t="swot.20221029124327.1"><vh>ElevatedButton 1</vh></v>
<v t="swot.20221029124328.1"><vh>ElevatedButton 2</vh></v>
</v>
<v t="swot.20221029124503.1"><vh>IndexedStack</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221031231919.2"><vh>InkwellExample -- press ALT to scale</vh>
<v t="swot.20221031231919.3"><vh>varible</vh></v>
<v t="swot.20221031231919.6"><vh>build()</vh>
<v t="swot.20221101062927.1"><vh>InkWell</vh></v>
</v>
</v>
</v>
<v t="swot.20221023105408.1"><vh>L</vh>
<v t="swot.20221030225430.2"><vh>LayoutBuilderExample</vh>
<v t="swot.20221030225430.3"><vh>build()</vh>
<v t="swot.20221030230818.2"><vh>Scaffold</vh>
<v t="swot.20221030230818.3"><vh>appBar</vh></v>
<v t="swot.20221030230818.4"><vh>body</vh>
<v t="swot.20221030225455.1"><vh>LayoutBuilder</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221023105920.2"><vh>LongPressDraggableExample</vh>
<v t="swot.20221023105947.1"><vh>varible</vh></v>
<v t="swot.20221023105920.3"><vh>initState()</vh></v>
<v t="swot.20221023105920.4"><vh>dispose()</vh></v>
<v t="swot.20221023105920.5"><vh>build()</vh>
<v t="swot.20221023123049.2"><vh>Scaffold</vh>
<v t="swot.20221023123049.3"><vh>appBar</vh></v>
<v t="swot.20221023123049.4"><vh>body</vh>
<v t="swot.20221023110506.1"><vh>Positioned</vh>
<v t="swot.20221023110634.1"><vh>LongPressDraggable</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029130827.2"><vh>ListViewExample</vh>
<v t="swot.20221029130827.3"><vh>build()</vh>
<v t="swot.20221029133516.2"><vh>Scaffold</vh>
<v t="swot.20221029133516.3"><vh>appBar</vh></v>
<v t="swot.20221029133516.4"><vh>body</vh>
<v t="swot.20221029132335.1"><vh>ListView</vh>
<v t="swot.20221029133717.1"><vh>ListTile</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023081258.1"><vh>M</vh>
<v t="swot.20221023081535.2"><vh>MaterialBannerExample</vh>
<v t="swot.20221023081535.3"><vh>build()</vh></v>
</v>
</v>
<v t="swot.20221029134405.14"><vh>N</vh>
<v t="swot.20221029140231.2"><vh>NavigationBarExample</vh>
<v t="swot.20221029140231.3"><vh>varible</vh></v>
<v t="swot.20221029140231.4"><vh>initState()</vh></v>
<v t="swot.20221029140231.5"><vh>dispose()</vh></v>
<v t="swot.20221029140231.6"><vh>build()</vh>
<v t="swot.20221029141046.2"><vh>Scaffold</vh>
<v t="swot.20221029141046.3"><vh>appBar</vh></v>
<v t="swot.20221029141046.4"><vh>body</vh></v>
<v t="swot.20221029141046.5"><vh>bottomNavigationBar</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030231300.11"><vh>O</vh>
<v t="swot.20221030231950.2"><vh>OrientationBuilderExample</vh>
<v t="swot.20221030231950.3"><vh>build()</vh>
<v t="swot.20221030232043.2"><vh>Scaffold</vh>
<v t="swot.20221030232043.3"><vh>appBar</vh></v>
<v t="swot.20221030232043.4"><vh>body</vh>
<v t="swot.20221030232118.1"><vh>OrientationBuilder</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030232847.2"><vh>OverflowBarExample -- auto adjust row or column</vh>
<v t="swot.20221030232847.3"><vh>build()</vh>
<v t="swot.20221030233721.2"><vh>Scaffold</vh>
<v t="swot.20221030233721.3"><vh>appBar</vh></v>
<v t="swot.20221030233721.4"><vh>body</vh>
<v t="swot.20221030233137.2"><vh>Padding</vh>
<v t="swot.20221030233211.1"><vh>OverflowBar</vh>
<v t="swot.20221030233258.2"><vh>ElevatedButton</vh></v>
<v t="swot.20221030233342.2"><vh>ElevatedButton</vh></v>
<v t="swot.20221030233342.1"><vh>ElevatedButton</vh></v>
<v t="swot.20221030233809.1"><vh>ElevatedButton</vh></v>
<v t="swot.20221030233843.1"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023093033.14"><vh>P</vh>
<v t="swot.20221029234453.2"><vh>PageViewExample</vh>
<v t="swot.20221111064532.1"><vh>varible</vh></v>
<v t="swot.20221111064612.1"><vh>dispose()</vh></v>
<v t="swot.20221029234453.6"><vh>build()</vh>
<v t="swot.20221029235310.2"><vh>Scaffold</vh>
<v t="swot.20221029235310.3"><vh>appBar</vh>
<v t="swot.20221111065157.2"><vh>IconButton left !!!</vh></v>
<v t="swot.20221111065339.1"><vh>IconButton right !!!</vh></v>
</v>
<v t="swot.20221029235310.4"><vh>body</vh>
<v t="swot.20221029234534.1"><vh>PageView !!!</vh>
<v t="swot.20221029234605.1"><vh>Container</vh></v>
<v t="swot.20221029234724.1"><vh>Container</vh></v>
<v t="swot.20221029234725.1"><vh>Container</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025114730.2"><vh>PopupMenuButtonExample</vh>
<v t="swot.20221025114730.3"><vh>varible</vh></v>
<v t="swot.20221025114730.6"><vh>build()</vh></v>
</v>
<v t="swot.20221029235922.2"><vh>PositionedExample</vh>
<v t="swot.20221029235922.3"><vh>build()</vh>
<v t="swot.20221030082723.2"><vh>Scaffold</vh>
<v t="swot.20221030082723.3"><vh>appBar</vh></v>
<v t="swot.20221030082723.4"><vh>body</vh>
<v t="swot.20221030081223.2"><vh>Center</vh>
<v t="swot.20221030081235.1"><vh>Stack</vh>
<v t="swot.20221030081313.1"><vh>Positioned</vh></v>
<v t="swot.20221030081540.1"><vh>Positioned</vh></v>
<v t="swot.20221030081542.1"><vh>Positioned</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023093415.1"><vh>PreferredSizeExample</vh>
<v t="swot.20221023093803.1"></v>
</v>
</v>
<v t="swot.20221023152107.13"><vh>R</vh>
<v t="swot.20221116192205.1"><vh>RadioListTileExample</vh>
<v t="swot.20221030084432.1"><vh>radioListTileOptions</vh></v>
<v t="swot.20221030083241.2"><vh>RadioListTileExample</vh>
<v t="swot.20221030083241.3"><vh>varible</vh></v>
<v t="swot.20221030083241.4"><vh>initState()</vh></v>
<v t="swot.20221030083241.5"><vh>dispose()</vh></v>
<v t="swot.20221030083241.6"><vh>build()</vh>
<v t="swot.20221030083721.2"><vh>Column</vh>
<v t="swot.20221030083736.1"><vh>RadioListTile</vh></v>
<v t="swot.20221030084017.1"><vh>RadioListTile</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221031182202.2"><vh>RangeSliderExample</vh>
<v t="swot.20221031182202.3"><vh>varible</vh></v>
<v t="swot.20221031182202.4"><vh>initState()</vh></v>
<v t="swot.20221031182202.5"><vh>dispose()</vh></v>
<v t="swot.20221031182202.6"><vh>build()</vh>
<v t="swot.20221031182439.1"><vh>varible</vh></v>
<v t="swot.20221031182617.2"><vh>Center</vh>
<v t="swot.20221031182643.1"><vh>RangeSlider</vh></v>
</v>
</v>
</v>
<v t="swot.20221030172700.2"><vh>RefreshIndicatorExample</vh>
<v t="swot.20221030172700.3"><vh>varible</vh></v>
<v t="swot.20221030172700.4"><vh>initState()</vh></v>
<v t="swot.20221030172700.5"><vh>dispose()</vh></v>
<v t="swot.20221030172700.6"><vh>build()</vh>
<v t="swot.20221030182420.2"><vh>Scaffold</vh>
<v t="swot.20221030182420.3"><vh>appBar</vh></v>
<v t="swot.20221030182420.4"><vh>body</vh>
<v t="swot.20221030173047.1"><vh>RefreshIndicator</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221023152801.2"><vh>ReorderableListViewExample</vh>
<v t="swot.20221023152933.1"><vh>varible</vh></v>
<v t="swot.20221023152801.3"><vh>initState()</vh></v>
<v t="swot.20221023152801.4"><vh>dispose()</vh></v>
<v t="swot.20221023152801.5"><vh>build()</vh>
<v t="swot.20221023154334.2"><vh>Scaffold</vh>
<v t="swot.20221023154334.3"><vh>appBar</vh></v>
<v t="swot.20221023154334.4"><vh>body</vh>
<v t="swot.20221023153058.1"><vh>ReorderableListView</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030205049.2"><vh>RotatedBoxExample</vh>
<v t="swot.20221030205049.3"><vh>build()</vh>
<v t="swot.20221030205124.1"><vh>RotatedBox</vh></v>
</v>
</v>
</v>
<v t="swot.20221024070848.8"><vh>S</vh>
<v t="swot.20221030224821.2"><vh>SafeAreaExample</vh>
<v t="swot.20221030224821.3"><vh>build()</vh>
<v t="swot.20221030225147.1"><vh>SafeArea</vh>
<v t="swot.20221030224837.1"><vh>Text</vh></v>
</v>
</v>
</v>
<v t="swot.20221116192440.1"><vh>SearchDelegateExample</vh>
<v t="swot.20221031115636.1"><vh>CustomSearchDelegate</vh></v>
<v t="swot.20221031114947.2"><vh>SearchDelegateExample</vh>
<v t="swot.20221031114947.3"><vh>varible</vh></v>
<v t="swot.20221031114947.6"><vh>build()</vh>
<v t="swot.20221031115107.2"><vh>Scaffold</vh>
<v t="swot.20221031115107.3"><vh>appBar</vh>
<v t="swot.20221031115310.2"><vh>IconButton !!!</vh></v>
</v>
<v t="swot.20221031115107.4"><vh>body</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030210033.2"><vh>SelectableTextExample</vh>
<v t="swot.20221101072329.1"><vh>varible</vh></v>
<v t="swot.20221030210033.6"><vh>build()</vh>
<v t="swot.20221101072843.2"><vh>Column</vh>
<v t="swot.20221030210100.1"><vh>SelectableText</vh></v>
</v>
</v>
</v>
<v t="swot.20221024095344.2"><vh>DatePickerExample</vh>
<v t="swot.20221024095406.1"><vh>varible</vh></v>
<v t="swot.20221024095344.3"><vh>initState()</vh></v>
<v t="swot.20221024095344.4"><vh>dispose()</vh></v>
<v t="swot.20221024095344.5"><vh>build()</vh></v>
</v>
<v t="swot.20221024103523.2"><vh>TimePickerExample</vh>
<v t="swot.20221024103850.1"><vh>varible</vh></v>
<v t="swot.20221024103523.3"><vh>initState()</vh></v>
<v t="swot.20221024103523.4"><vh>dispose()</vh></v>
<v t="swot.20221024103957.1"><vh>build()</vh></v>
</v>
<v t="swot.20221024110030.2"><vh>DateRangePickerExample</vh>
<v t="swot.20221024110048.1"><vh>varible</vh></v>
<v t="swot.20221024110030.3"><vh>initState()</vh></v>
<v t="swot.20221024110030.4"><vh>dispose()</vh></v>
<v t="swot.20221024110030.5"><vh>build()</vh></v>
</v>
<v t="swot.20221030210547.2"><vh>SliderExample</vh>
<v t="swot.20221030210547.3"><vh>varible</vh></v>
<v t="swot.20221030210547.6"><vh>build()</vh>
<v t="swot.20221030211118.1"><vh>Slider</vh></v>
</v>
</v>
<v t="swot.20221031171010.2"><vh>SliveAppBarExample</vh>
<v t="swot.20221031171010.6"><vh>build()</vh>
<v t="swot.20221031171922.2"><vh>Scaffold</vh>
<v t="swot.20221031171922.4"><vh>body</vh>
<v t="swot.20221031172002.1"><vh>CustomScrollView</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030212509.2"><vh>SnackBarExample</vh>
<v t="swot.20221030212509.3"><vh>build()</vh>
<v t="swot.20221030212550.2"><vh>ElevatedButton</vh></v>
</v>
</v>
<v t="swot.20221031222131.2"><vh>SpreadOperatorExample</vh>
<v t="swot.20221031222131.3"><vh>build()</vh>
<v t="swot.20221031222154.1"><vh>varible</vh></v>
<v t="swot.20221031225000.2"><vh>Scaffold</vh>
<v t="swot.20221031225000.3"><vh>appBar</vh></v>
<v t="swot.20221031225000.4"><vh>body</vh>
<v t="swot.20221031225029.2"><vh>Column</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221029142534.2"><vh>StackExample</vh>
<v t="swot.20221029142534.3"><vh>build()</vh>
<v t="swot.20221029142715.2"><vh>Scaffold</vh>
<v t="swot.20221029142715.3"><vh>appBar</vh></v>
<v t="swot.20221029142715.4"><vh>body</vh>
<v t="swot.20221029142815.2"><vh>Center</vh>
<v t="swot.20221029142627.1"><vh>Stack</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029144530.2"><vh>StepperExample</vh>
<v t="swot.20221029144530.3"><vh>varible</vh></v>
<v t="swot.20221029144530.4"><vh>initState()</vh></v>
<v t="swot.20221029144530.5"><vh>dispose()</vh></v>
<v t="swot.20221029144530.6"><vh>build()</vh>
<v t="swot.20221029144924.2"><vh>Scaffold</vh>
<v t="swot.20221029144924.3"><vh>appBar</vh></v>
<v t="swot.20221029144924.4"><vh>body</vh>
<v t="swot.20221029144954.2"><vh>Center</vh>
<v t="swot.20221029145033.1"><vh>Stepper</vh>
<v t="swot.20221029191553.1"><vh>steps</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221116192626.1"><vh>StreamBuilderExample</vh>
<v t="swot.20221029211743.1"><vh>generateStream -- FAKE FIREBASE STREAM</vh></v>
<v t="swot.20221029211533.2"><vh>StreamBuilderExample</vh>
<v t="swot.20221029211533.6"><vh>build()</vh>
<v t="swot.20221029213944.2"><vh>Scaffold</vh>
<v t="swot.20221029213944.3"><vh>appBar</vh></v>
<v t="swot.20221029213944.4"><vh>body</vh>
<v t="swot.20221029212803.2"><vh>Center</vh>
<v t="swot.20221029212812.1"><vh>StreamBuilder</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029215403.2"><vh>SwitchExample</vh>
<v t="swot.20221029215403.3"><vh>varible</vh></v>
<v t="swot.20221029215403.4"><vh>initState()</vh></v>
<v t="swot.20221029215403.5"><vh>dispose()</vh></v>
<v t="swot.20221029215403.6"><vh>build()</vh>
<v t="swot.20221029215500.2"><vh>Center</vh>
<v t="swot.20221029215505.1"><vh>Switch</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221023175859.14"><vh>T</vh>
<v t="swot.20221023193833.2"><vh>TableExample</vh>
<v t="swot.20221023193833.3"><vh>build()</vh>
<v t="swot.20221023193950.2"><vh>Scaffold</vh>
<v t="swot.20221023193950.3"><vh>appBar</vh></v>
<v t="swot.20221023193950.4"><vh>body</vh>
<v t="swot.20221023194122.1"><vh>Center</vh>
<v t="swot.20221023200224.1"><vh>SingleChildScrollView</vh>
<v t="swot.20221023194310.1"><vh>Table</vh>
<v t="swot.20221023194533.1"><vh>TableRow</vh>
<v t="swot.20221023194941.1"><vh>TableCell</vh></v>
<v t="swot.20221023194949.1"><vh>TableCell</vh></v>
<v t="swot.20221023194950.1"><vh>TableCell</vh></v>
</v>
<v t="swot.20221023195102.1"><vh>List.generate</vh>
<v t="swot.20221023195414.1"><vh>TableCell</vh></v>
<v t="swot.20221023195426.1"><vh>TableCell</vh></v>
<v t="swot.20221023195426.2"><vh>TableCell</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114192153.2"><vh>TextExample</vh>
<v t="swot.20221114192153.3"><vh>build()</vh>
<v t="swot.20221114192542.1"><vh>GestureDetector</vh>
<v t="swot.20221114193002.1"><vh>Scaffold</vh>
<v t="swot.20221114193106.1"><vh>appBar</vh></v>
<v t="swot.20221114193135.1"><vh>body</vh>
<v t="swot.20221114202206.1"><vh>Column: MUST use Row -&gt; Expanded</vh>
<v t="swot.20221114195436.1"><vh>Row -&gt; Expanded -&gt; ellipsis</vh></v>
<v t="swot.20221114202534.2"><vh>Divider</vh></v>
<v t="swot.20221114195444.1"><vh>Row -&gt; Expanded -&gt; fade from right</vh></v>
<v t="swot.20221114202534.2"></v>
<v t="swot.20221114204245.1"><vh>Row -&gt; Expanded -&gt; fade from bottom</vh></v>
<v t="swot.20221114202534.2"></v>
<v t="swot.20221114195452.1"><vh>Row -&gt; Expanded -&gt; FittedBox</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029230649.2"><vh>TabBarExample</vh>
<v t="swot.20221029230649.3"><vh>build()</vh>
<v t="swot.20221029230800.1"><vh>DefaultTabController !!!</vh>
<v t="swot.20221029230841.2"><vh>Scaffold</vh>
<v t="swot.20221029230841.3"><vh>appBar</vh>
<v t="swot.20221111222446.1"><vh>TabBar !!!</vh></v>
</v>
<v t="swot.20221029230841.4"><vh>body</vh>
<v t="swot.20221029231559.1"><vh>TabBarView !!!</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221116193019.1"><vh>TabPageSelectorExample</vh>
<v t="swot.20221029220342.1"><vh>tabPageSelectorWidgets</vh></v>
<v t="swot.20221029220227.2"><vh>TabPageSelectorExample</vh>
<v t="swot.20221029220227.3"><vh>varible</vh></v>
<v t="swot.20221029220227.4"><vh>initState()</vh></v>
<v t="swot.20221029220227.5"><vh>dispose()</vh></v>
<v t="swot.20221029220227.6"><vh>build()</vh>
<v t="swot.20221029221243.2"><vh>Scaffold</vh>
<v t="swot.20221029221243.3"><vh>appBar</vh></v>
<v t="swot.20221029221243.4"><vh>body</vh>
<v t="swot.20221029221337.1"><vh>Stack</vh></v>
</v>
<v t="swot.20221029221243.6"><vh>floatingActionButton</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221113174434.2"><vh>TextFieldExample</vh>
<v t="swot.20221113174434.3"><vh>build()</vh>
<v t="swot.20221113180505.1"><vh>GestureDetector -- unfocus()</vh>
<v t="swot.20221113180641.1"><vh>Scaffold</vh>
<v t="swot.20221113180931.1"><vh>appBar</vh></v>
<v t="swot.20221113181008.1"><vh>body</vh>
<v t="swot.20221113181132.1"><vh>TextField -- number</vh></v>
<v t="swot.20221113181152.1"><vh>TextField -- decimal</vh></v>
<v t="swot.20221113181202.1"><vh>TextField -- phone</vh></v>
<v t="swot.20221113181209.1"><vh>TextField -- done</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027175533.2"><vh>TextFormFieldExample</vh>
<v t="swot.20221027175533.3"><vh>varible</vh></v>
<v t="swot.20221027175533.6"><vh>build()</vh>
<v t="swot.20221027183133.2"><vh>Scaffold</vh>
<v t="swot.20221027183133.3"><vh>appBar</vh></v>
<v t="swot.20221027183133.4"><vh>body</vh>
<v t="swot.20221027180846.1"><vh>SingleChildScrollView</vh>
<v t="swot.20221027180945.1"><vh>Form</vh>
<v t="swot.20221112184234.1"><vh>2) onChanged !!! Form.of(primaryFocus!.context!).save -&gt; setState(() {})</vh></v>
<v t="swot.20221112184709.1"><vh>child</vh>
<v t="swot.20221027182206.1"><vh>Column</vh>
<v t="swot.20221112180710.1"><vh>List.generate</vh>
<v t="swot.20221112180550.1"><vh>1) TextFormField input string</vh>
<v t="swot.20221112182519.1"><vh>3) onSaved !!! titles[index] = value</vh></v>
</v>
<v t="swot.20221112180604.1"><vh>SizedBox</vh></v>
<v t="swot.20221112180616.1"><vh>4) Card !!! titles[index]</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221031220414.2"><vh>TooltipExample -- long press</vh>
<v t="swot.20221031220414.3"><vh>build()</vh>
<v t="swot.20221031220639.2"><vh>Center</vh>
<v t="swot.20221031220649.1"><vh>Tooltip</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030213518.12"><vh>V</vh>
<v t="swot.20221030222244.2"><vh>VisibilityExample</vh>
<v t="swot.20221030222244.3"><vh>varible</vh></v>
<v t="swot.20221030222244.4"><vh>initState()</vh></v>
<v t="swot.20221030222244.5"><vh>dispose()</vh></v>
<v t="swot.20221030222244.6"><vh>build()</vh>
<v t="swot.20221030222322.2"><vh>Row</vh>
<v t="swot.20221030222414.2"><vh>ElevatedButton</vh></v>
<v t="swot.20221030222619.1"><vh>Visibility</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030223524.9"><vh>W</vh>
<v t="swot.20221031202343.2"><vh>WillPopScopeExample</vh>
<v t="swot.20221031202343.3"><vh>build()</vh>
<v t="swot.20221031202510.1"><vh>WillPopScope -- disable or enable back button</vh>
<v t="swot.20221031202632.2"><vh>Scaffold</vh>
<v t="swot.20221031202632.3"><vh>appBar</vh></v>
<v t="swot.20221031202632.4"><vh>body</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221030223719.2"><vh>WrapExample</vh>
<v t="swot.20221030223719.3"><vh>build()</vh>
<v t="swot.20221030224541.2"><vh>Scaffold</vh>
<v t="swot.20221030224541.3"><vh>appBar</vh></v>
<v t="swot.20221030224541.4"><vh>body</vh>
<v t="swot.20221030223755.2"><vh>Center</vh>
<v t="swot.20221030223816.1"><vh>Wrap</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114222958.1"><vh>#file lib/composite.dart</vh>
<v t="swot.20221114223555.1"><vh>import</vh></v>
<v t="swot.20221114223110.1"><vh>User Login Example: Form + onWillPop + showDialog + RegExp</vh>
<v t="swot.20221112213542.1"></v>
<v t="swot.20221114223110.3"><vh>UserLoginExample</vh>
<v t="swot.20221114223110.4"><vh>varible</vh></v>
<v t="swot.20221114223110.5"><vh>_login()</vh></v>
<v t="swot.20221114223110.6"><vh>build()</vh>
<v t="swot.20221114223110.7"><vh>Scaffold</vh>
<v t="swot.20221114223110.8"><vh>appBar</vh></v>
<v t="swot.20221114223110.9"><vh>body</vh>
<v t="swot.20221114223110.10"><vh>Form</vh>
<v t="swot.20221114223110.11"><vh>onWillPop</vh></v>
<v t="swot.20221114223110.12"><vh>Column</vh>
<v t="swot.20221114223110.13"><vh>TextFormField _account</vh></v>
<v t="swot.20221114223110.14"><vh>TextFormField _pwd</vh></v>
<v t="swot.20221114223110.15"><vh>ElevatedButton login</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114214205.1"><vh>#file lib/functionality.dart</vh>
<v t="swot.20221114214940.1"><vh>import</vh></v>
<v t="swot.20221114214307.1"><vh>CheckPlatformExample</vh>
<v t="swot.20221114130724.1"></v>
<v t="swot.20221114214307.4"><vh>class CheckPlatformExample</vh>
<v t="swot.20221114214307.5"><vh>build()</vh>
<v t="swot.20221114214307.6"><vh>Scaffold</vh>
<v t="swot.20221114214307.7"><vh>appBar</vh></v>
<v t="swot.20221114214307.8"><vh>body</vh>
<v t="swot.20221114214307.9"><vh>Column</vh>
<v t="swot.20221114214307.10"><vh>android</vh></v>
<v t="swot.20221114214307.11"><vh>iOS</vh></v>
<v t="swot.20221114214307.12"><vh>other</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114214307.13"><vh>class CheckTopLevelPlatformExample</vh>
<v t="swot.20221114214307.14"><vh>build()</vh>
<v t="swot.20221114214307.15"><vh>Scaffold</vh>
<v t="swot.20221114214307.16"><vh>appBar</vh></v>
<v t="swot.20221114214307.17"><vh>body</vh>
<v t="swot.20221114214307.18"><vh>Column</vh>
<v t="swot.20221114214307.19"><vh>isMobile &amp; isDesktop</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221114214307.20"><vh>class PlatformDetails</vh></v>
</v>
<v t="swot.20221116195736.1"><vh>IfElseExample -- use PageView to show</vh>
<v t="swot.20221116202858.1"><vh>IfElseExample</vh>
<v t="swot.20221116202858.2"><vh>varible</vh></v>
<v t="swot.20221116202858.3"><vh>dispose()</vh></v>
<v t="swot.20221116215552.1"><vh>Widget getLockStatus() !!!</vh></v>
<v t="swot.20221116202858.4"><vh>build()</vh>
<v t="swot.20221116202858.5"><vh>Scaffold</vh>
<v t="swot.20221116202858.6"><vh>appBar</vh>
<v t="swot.20221116202858.7"><vh>IconButton left</vh></v>
<v t="swot.20221116202858.8"><vh>IconButton right</vh></v>
</v>
<v t="swot.20221116202858.9"><vh>body</vh>
<v t="swot.20221116202858.10"><vh>PageView</vh>
<v t="swot.20221116195958.1"><vh>(1) Using the Ternary Operator ?:</vh>
<v t="swot.20221117065613.2"><vh>Column</vh>
<v t="swot.20221117065952.1"><vh>SwitchListTile.adaptive</vh></v>
<v t="swot.20221117065939.1"><vh>Center ?:</vh></v>
</v>
</v>
<v t="swot.20221116202858.12"><vh>(2) Using the Spread Operator ...[] 2.1</vh>
<v t="swot.20221117075830.1"><vh>Column</vh>
<v t="swot.20221117075103.1"><vh>SwitchListTile.adaptive</vh></v>
<v t="swot.20221117075628.1"><vh>if else</vh></v>
</v>
</v>
<v t="swot.20221116214910.1"><vh>(2) Using the Spread Operator ...[] 2.2</vh>
<v t="swot.20221117081630.1"><vh>Column</vh>
<v t="swot.20221117080420.1"><vh>SwitchListTile.adaptive</vh></v>
<v t="swot.20221117080502.1"><vh>if</vh></v>
</v>
</v>
<v t="swot.20221116200016.1"><vh>(3) Using the Method -- getLockStatus()</vh>
<v t="swot.20221117081341.2"><vh>Column</vh>
<v t="swot.20221117081152.1"><vh>SwitchListTile.adaptive</vh></v>
<v t="swot.20221117081206.1"><vh>Center</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221117184025.1"><vh>CloseKeyboardExample</vh>
<v t="swot.20221117184127.2"><vh>CloseKeyboardExample</vh>
<v t="swot.20221117184127.3"><vh>build()</vh>
<v t="swot.20221117192548.2"><vh>GestureDetector</vh>
<v t="swot.20221117192608.2"><vh>Scaffold</vh>
<v t="swot.20221117192608.3"><vh>appBar</vh></v>
<v t="swot.20221117192608.4"><vh>body</vh>
<v t="swot.20221117193206.2"><vh>Container</vh>
<v t="swot.20221117193340.1"><vh>TextField</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027203033.1"><vh>#file pubspec.yaml</vh>
<v t="swot.20221027203224.1"><vh>&lt;&lt; assets &gt;&gt;</vh></v>
</v>
<v t="swot.20221017093031.150"><vh>#auto-md README.md</vh>
<v t="swot.20221117074820.2"><vh>Flutter built in Widgets</vh>
<v t="swot.20221117074820.3"><vh>A...</vh></v>
<v t="swot.20221117074820.4"><vh>B...</vh></v>
<v t="swot.20221117074820.5"><vh>C...</vh></v>
<v t="swot.20221117074820.6"><vh>D...</vh></v>
<v t="swot.20221117074820.7"><vh>E...</vh></v>
<v t="swot.20221117074820.8"><vh>F...</vh></v>
<v t="swot.20221117074820.9"><vh>G...</vh></v>
<v t="swot.20221117074820.10"><vh>H...</vh></v>
<v t="swot.20221117074820.11"><vh>I...</vh></v>
<v t="swot.20221117074820.12"><vh>L...</vh></v>
<v t="swot.20221117074820.13"><vh>M...</vh></v>
<v t="swot.20221117074820.14"><vh>N...</vh></v>
<v t="swot.20221117074820.15"><vh>O...</vh></v>
<v t="swot.20221117074820.16"><vh>P...</vh></v>
<v t="swot.20221117074820.17"><vh>R...</vh></v>
<v t="swot.20221117074820.18"><vh>S...</vh></v>
<v t="swot.20221117074820.19"><vh>T...</vh></v>
<v t="swot.20221117074820.20"><vh>V...</vh></v>
<v t="swot.20221117074820.21"><vh>W...</vh></v>
</v>
</v>
</v>
<v t="swot.20221031125101.1"><vh>Similar Example</vh>
<v t="swot.20221111002547.1"><vh>Button -- popup &amp; dropdown</vh>
<v t="swot.20221025114730.2"></v>
<v t="swot.20221110233138.2"></v>
</v>
<v t="swot.20221112114354.1"><vh>Form</vh>
<v t="swot.20221027115609.1"><vh>FormExample</vh>
<v t="swot.20221027121244.1"></v>
<v t="swot.20221027115627.2"></v>
</v>
<v t="swot.20221027182452.1"><vh>TextFormFieldExample</vh>
<v t="swot.20221027182544.1"></v>
<v t="swot.20221027175533.2"></v>
</v>
<v t="swot.20221113174340.1"><vh>TextFieldExample</vh>
<v t="swot.20221113181739.2"></v>
<v t="swot.20221113174434.2"></v>
</v>
</v>
<v t="swot.20221031125115.1"><vh>Search</vh>
<v t="swot.20221017093031.256"></v>
<v t="swot.20221031114906.1"><vh>SearchDelegateExample</vh>
<v t="swot.20221031122837.2"></v>
<v t="swot.20221031115636.1"></v>
<v t="swot.20221031114947.2"></v>
</v>
<v t="swot.20221031125205.1"><vh>Waiting learing</vh></v>
</v>
<v t="swot.20221112203550.1"><vh>XListTile</vh>
<v t="swot.20221017093031.153"></v>
<v t="swot.20221031140355.1"></v>
<v t="swot.20221029133717.1"></v>
<v t="swot.20221022141927.1"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022142602.1"></v>
<v t="swot.20221022141946.2"></v>
</v>
<v t="swot.20221030083029.1"><vh>RadioListTileExample</vh>
<v t="swot.20221030084137.1"></v>
<v t="swot.20221030084432.1"></v>
<v t="swot.20221030083241.2"></v>
</v>
</v>
</v>
<v t="swot.20221027213439.1"><vh>@spot</vh></v>
</vnodes>
<tnodes>
<t tx="swot.20221017093031.1">Every Flutter Widgets - Part One - 50 Widgets
https://www.youtube.com/watch?v=P3LzkpHBcnI&amp;list=PL82uaKJraAILRBFE1XhCyfvu-Fclc6vv1&amp;index=1&amp;ab_channel=FlutterMapp

TOP 70 Flutter Widgets EVER (Only For Pro)
https://www.youtube.com/watch?v=G1LGOH424lo

Top 35 Flutter Widgets
https://www.youtube.com/watch?v=M9J-JJOuyE0

</t>
<t tx="swot.20221017093031.150">@language md
@tabwidth -2
</t>
<t tx="swot.20221017093031.153">@doc
@language asciidoc
:nofooter:
image::image/FlutterWidget/AboutListTile.png[AboutListTile,240]
@c
@language dart
AboutListTile(
  icon: Icon(Icons.info_outline),
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'ListTile',
  applicationVersion: 'version 1.0.0',
  aboutBoxChildren: [
    Text('This is a text created by Flutter'),
  ],
),
</t>
<t tx="swot.20221017093031.154">@doc
@language asciidoc
:nofooter:
image::../image/AbsorbPointer.png[AbsorbPointer,240]

@c
@language dart
AbsorbPointer(
  child:
  @others
),
</t>
<t tx="swot.20221017093031.155">@language dart
ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue.shade200,
  ),
  onPressed: () {},
  child: const Text("AbsorbPointer Can not click"),
),
</t>
<t tx="swot.20221017093031.165">AnimatedCrossFade(
  firstChild: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    width: 55.0,
    height: 55.0,
  ),
  secondChild: Image.network(
    'https://img2.baidu.com/it/u=2642639611,1941240358&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=200&amp;h=200',
    width: 55.0,
    height: 55.0,
  ),
  crossFadeState:
      selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
  duration: const Duration(seconds: 1),
),
</t>
<t tx="swot.20221017093031.180">@language dart
@tabwidth -2
class AnimatedModalBarrierExample extends StatefulWidget {
  const AnimatedModalBarrierExample({super.key});

  @override
  State&lt;AnimatedModalBarrierExample&gt; createState() =&gt;
      _AnimatedModalBarrierExampleState();
}

class _AnimatedModalBarrierExampleState
    extends State&lt;AnimatedModalBarrierExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221017093031.181">bool _isPressed = false;
late Widget _animatedModalBarrier;
late AnimationController _animationController;
late Animation&lt;Color?&gt; _colorAnimation;

</t>
<t tx="swot.20221017093031.182">@override
void initState() {
  super.initState();

  ColorTween colorTween = ColorTween(
    begin: Colors.orangeAccent.withOpacity(0.5),
    end: Colors.blueGrey.withOpacity(0.5),
  );

  _animationController = AnimationController(
    vsync: this,
    duration: const Duration(seconds: 3),
  );

  _colorAnimation = colorTween.animate(_animationController);
  _animatedModalBarrier = AnimatedModalBarrier(
    color: _colorAnimation,
    dismissible: false,
  );
}
</t>
<t tx="swot.20221017093031.183">@override
void dispose() {
  _animationController.dispose();
  super.dispose();
}

</t>
<t tx="swot.20221017093031.184">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221017093031.185">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    setState(() { _isPressed = true; });
    _animationController.reset();
    _animationController.forward();
    Future.delayed(const Duration(seconds: 3), () {
      setState(() { _isPressed = false; });
    });
  },
  child: const Text('Press show AnimatedModalBarrier'),
),
</t>
<t tx="swot.20221017093031.186">if (_isPressed) _animatedModalBarrier,
</t>
<t tx="swot.20221017093031.188">@language dart
@tabwidth -2
class AnimatedOpacityExample extends StatefulWidget {
  const AnimatedOpacityExample({super.key});

  @override
  State&lt;AnimatedOpacityExample&gt; createState() =&gt; _AnimatedOpacityExampleState();
}

class _AnimatedOpacityExampleState extends State&lt;AnimatedOpacityExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.189">double opacityLevel = 1.0;
</t>
<t tx="swot.20221017093031.191">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.192">AnimatedOpacity(
  opacity: opacityLevel,
  duration: const Duration(seconds: 1),
  child: const FlutterLogo(size: 30),
),

</t>
<t tx="swot.20221017093031.193">ElevatedButton(
  child: const Text('AnimatedOpacity Fade Logo'),
  onPressed: () {
    setState(
      () =&gt; opacityLevel = opacityLevel == 0 ? 1.0 : 0.0,
    );
  },
),
</t>
<t tx="swot.20221017093031.197">@language dart
@tabwidth -2
class AnimatedPaddingExample extends StatefulWidget {
  const AnimatedPaddingExample({super.key});

  @override
  State&lt;AnimatedPaddingExample&gt; createState() =&gt; _AnimatedPaddingExampleState();
}

class _AnimatedPaddingExampleState extends State&lt;AnimatedPaddingExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.198">double padValue = 0.0;
</t>
<t tx="swot.20221017093031.2">@language dart
@tabwidth -2
@others
</t>
<t tx="swot.20221017093031.200">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221017093031.202">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221017093031.203">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: Text('AnimatedPadding $padValue'),
  onPressed: () {
    setState(() {
      padValue = padValue == 0.0 ? 15.0 : 0.0;
    });
  },
),

</t>
<t tx="swot.20221017093031.205">AnimatedPadding(
  // padValue will be changed
  padding: EdgeInsets.all(padValue),
  duration: const Duration(seconds: 2),
  curve: Curves.easeInOut,
  child: Container(
    // width: MediaQuery.of(context).size.width,
    width: 44.0,
    height: 30.0,
    color: Colors.blue.shade100,
  ),
),
</t>
<t tx="swot.20221017093031.208">@language dart
@tabwidth -2
class AnimatedPhysicalModelExample extends StatefulWidget {
  const AnimatedPhysicalModelExample({super.key});

  @override
  State&lt;AnimatedPhysicalModelExample&gt; createState() =&gt;
      _AnimatedPhysicalModelExampleState();
}

class _AnimatedPhysicalModelExampleState
    extends State&lt;AnimatedPhysicalModelExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.209">bool isFlat = true;
</t>
<t tx="swot.20221017093031.21">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221017093031.212">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.213">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('AnimatedPhysicalModel'),
  onPressed: () {
    setState(() {
      isFlat = !isFlat;
    });
  },
),

</t>
<t tx="swot.20221017093031.214">AnimatedPhysicalModel(
  duration: const Duration(milliseconds: 500),
  curve: Curves.fastOutSlowIn,
  elevation: isFlat ? 0 : 6.0,
  shape: BoxShape.rectangle,
  shadowColor: Colors.black,
  color: Colors.white,
  child: const SizedBox(
    height: 45.0,
    width: 45.0,
    child: Icon(Icons.android_outlined),
  ),
),

</t>
<t tx="swot.20221017093031.217">@language dart
@tabwidth -2
class AnimatedPositionedExample extends StatefulWidget {
  const AnimatedPositionedExample({super.key});

  @override
  State&lt;AnimatedPositionedExample&gt; createState() =&gt;
      _AnimatedPositionedExampleState();
}

class _AnimatedPositionedExampleState extends State&lt;AnimatedPositionedExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.218">bool selected = false;
</t>
<t tx="swot.20221017093031.22">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221017093031.221">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221017093031.222">SizedBox(
  width: double.infinity,
  height: 55,
  child:
  @others
);
</t>
<t tx="swot.20221017093031.223">Stack(children: [
  @others
]),
</t>
<t tx="swot.20221017093031.224">AnimatedPositioned(
  top: selected ? 15.0 : 5.0,
  width: selected ? 100.0 : 320.0,
  height: 50.0,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: GestureDetector(
    onTap: () {
      setState(() {
        selected = !selected;
      });
    },
    child: Container(
      alignment: Alignment.center,
      decoration: BoxDecoration(
        color: Colors.blue.shade100,
        borderRadius: BorderRadius.circular(15),
      ),
      child: const Text('AnimatedPositioned click to change position'),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.227">@language dart
@tabwidth -2
class AnimatedRotationExample extends StatefulWidget {
  const AnimatedRotationExample({super.key});

  @override
  State&lt;AnimatedRotationExample&gt; createState() =&gt;
      _AnimatedRotationExampleState();
}

class _AnimatedRotationExampleState extends State&lt;AnimatedRotationExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.228">double turns = 0.0;
</t>
<t tx="swot.20221017093031.23">Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
  @others
]),
</t>
<t tx="swot.20221017093031.231">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.232">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    setState(() {
      turns += 1 / 4;
    });
  },
  child: const Text('AnimatedRotation Rotate Logo'),
),

</t>
<t tx="swot.20221017093031.233">Padding(
  padding: const EdgeInsets.all(5),
  child:
  @others
),
</t>
<t tx="swot.20221017093031.236">@language dart
@tabwidth -2
class AnimatedSizeExample extends StatefulWidget {
  const AnimatedSizeExample({super.key});

  @override
  State&lt;AnimatedSizeExample&gt; createState() =&gt; _AnimatedSizeExampleState();
}

class _AnimatedSizeExampleState extends State&lt;AnimatedSizeExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.237">double _size = 30;
</t>
<t tx="swot.20221017093031.238">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221017093031.239">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221017093031.240">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.241">Text("AnimatedSize"),
</t>
<t tx="swot.20221017093031.242">GestureDetector(
  onTap: () {
    setState(() {
      _size = _size == 30 ? 60 : 30;
    });
  },
  child: Container(
    color: Colors.white,
    child:
    @others
  ),
),
</t>
<t tx="swot.20221017093031.244">@language dart
@tabwidth -2
class AnimatedSwitcherExample extends StatefulWidget {
  const AnimatedSwitcherExample({super.key});

  @override
  State&lt;AnimatedSwitcherExample&gt; createState() =&gt;
      _AnimatedSwitcherExampleState();
}

class _AnimatedSwitcherExampleState extends State&lt;AnimatedSwitcherExample&gt; {
  @others
}

</t>
<t tx="swot.20221017093031.245">int _count = 10;
</t>
<t tx="swot.20221017093031.248">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.start,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.249">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('AnimatedSwitcher'),
  onPressed: () {
    setState(() {
      _count += 1;
    });
  },
),

</t>
<t tx="swot.20221017093031.250">AnimatedSwitcher(
  duration: const Duration(milliseconds: 500),

  // // Custom default animation
  // transitionBuilder: (Widget child, Animation&lt;double&gt; animation) {
  // return ScaleTransition(scale: animation, child: child);
  // },

  child: Text(
    '$_count',
    style: const TextStyle(fontSize: 30),
    key: ValueKey(_count), // IMPORTANT no key no animation
  ),
),
</t>
<t tx="swot.20221017093031.252">appBar: AppBar(
  title: const Text('Demo A'),
  centerTitle: true,

  // leading: IconButton(
    // icon: const Icon(Icons.menu),
    // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.search),
      onPressed: () {},
    ),
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // // AppBar 的下边变成了圆角
  // shape: const RoundedRectangleBorder(
    // borderRadius: BorderRadius.only(
      // bottomLeft: Radius.circular(25),
      // bottomRight: Radius.circular(25),
    // ),
  // ),

  backgroundColor: Colors.blue,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影

  bottom: PreferredSize(
    preferredSize: const Size.fromHeight(80),
    child: Container(
      height: 80,
      color: Colors.blue[600],
      child: const Center(
        child: Text(
          'Appbar Bottom',
          style: TextStyle(
            color: Colors.white,
            fontSize: 18,
          ),
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.256">@language dart
@tabwidth -2
class AutoCompleteExample extends StatelessWidget {
  const AutoCompleteExample({Key? key}) : super(key: key);
  @others
}
</t>
<t tx="swot.20221017093031.257">static const List&lt;String&gt; listItems = &lt;String&gt;[
  'apple',
  'banana',
  'melon',
];
</t>
<t tx="swot.20221017093031.258">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221017093031.3">import 'dart:async';

import 'package:flutter/material.dart';

import 'alphabet.dart';
import 'composite.dart';
import 'functionality.dart';

</t>
<t tx="swot.20221017093031.32">Stack(
  alignment: AlignmentDirectional.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.33">SizedBox(
  width: double.infinity,
  height: 40.0,
  child: ElevatedButton(
    onPressed: () {},
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: const [
        Text('Click'),
        Text('Click'),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221017093031.34">SizedBox(
  width: 240.0,
  height: 50.0,
  child:
      @others
),
</t>
<t tx="swot.20221017093031.4">void main() {
  runApp(const MyApp());
}

</t>
<t tx="swot.20221017093031.5">class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'demo',
      home: const Home(),
      debugShowCheckedModeBanner: false,
      &lt;&lt; ThemeData &gt;&gt;
      &lt;&lt; showSemanticsDebugger &gt;&gt;
      &lt;&lt; routes &gt;&gt;
    );
  }
}

</t>
<t tx="swot.20221017093031.6">class A extends StatelessWidget {
  const A({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: DemoA(),
    );
  }
}

</t>
<t tx="swot.20221017093031.8">@language dart
@tabwidth -2
class DemoA extends StatefulWidget {
  const DemoA({super.key});

  @override
  State&lt;DemoA&gt; createState() =&gt; _DemoAState();
}

class _DemoAState extends State&lt;DemoA&gt; with TickerProviderStateMixin {
  // AnimationController use TickerProviderStateMixin
  @others
}

</t>
<t tx="swot.20221019111317.2">@language dart
@tabwidth -2
class BackdropFilterExample extends StatelessWidget {
  const BackdropFilterExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221019111317.3">@override
Widget build(BuildContext context) {
  return Stack(
    children: &lt;Widget&gt;[
      Text(
        '0' * 300,
        style: const TextStyle(
          color: Colors.green,
        ),
      ),
      Center(
        child: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(
              sigmaX: 4.0,
              sigmaY: 4.0,
            ),
            child: Container(
              alignment: Alignment.center,
              width: 100,
              height: 100,
              child: const Text('Blur'),
            ),
          ),
        ),
      ),
    ],
  );
}
</t>
<t tx="swot.20221021132401.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32337103752e">@language dart
routes: {
  'home': (context) =&gt; const Home(),
  'a': (context) =&gt; const A(),
  'b': (context) =&gt; const B(),
  'c': (context) =&gt; const C(),
  'd': (context) =&gt; const D(),
  'e': (context) =&gt; const E(),
  'f': (context) =&gt; const F(),
  'g': (context) =&gt; const G(),
  'h': (context) =&gt; const H(),
  'i': (context) =&gt; const I(),
  'l': (context) =&gt; const L(),
  'm': (context) =&gt; const M(),
  'n': (context) =&gt; const N(),
  'o': (context) =&gt; const O(),
  'p': (context) =&gt; const P(),
  'r': (context) =&gt; const R(),
  's': (context) =&gt; const S(),
  't': (context) =&gt; const T(),
  'v': (context) =&gt; const V(),
  'w': (context) =&gt; const W(),
},

initialRoute: 'home',

// onUnknownRoute: (RouteSettings setting) =&gt; MaterialPageRoute(
// builder: (context) =&gt; UnknowPage(),
// ),
</t>
<t tx="swot.20221021133027.1"></t>
<t tx="swot.20221021133039.1"></t>
<t tx="swot.20221021133107.2">@language dart
@tabwidth -2
class Home extends StatelessWidget {
  const Home({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221021133107.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221021133625.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32367103752e">Wrap(spacing: 8.0, children: [
  @others
]),
</t>
<t tx="swot.20221021134037.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'a');
  },
  child: const Text('A'),
),

</t>
<t tx="swot.20221021135715.1">SafeArea(
  child:
  @others
)
</t>
<t tx="swot.20221021141328.1">Scaffold(
  @others
),
</t>
<t tx="swot.20221021171707.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'b');
  },
  child: const Text('B'),
),

</t>
<t tx="swot.20221021171949.1">class B extends StatelessWidget {
  const B({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoB(),
      ),
    );
  }
}

</t>
<t tx="swot.20221021172558.1">@language dart
@tabwidth -2
class DemoB extends StatefulWidget {
  const DemoB({super.key});

  @override
  State&lt;DemoB&gt; createState() =&gt; _DemoBState();
}

class _DemoBState extends State&lt;DemoB&gt; {
  @others
}

</t>
<t tx="swot.20221021172558.14">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221021172558.15">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221021172558.16">Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
  @others
  ]
),
</t>
<t tx="swot.20221021173128.1">appBar: AppBar(
  title: const Text('Demo B'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221021173506.1">BackdropFilterExample(),
Divider(),
</t>
<t tx="swot.20221021175217.2">@language dart
@tabwidth -2
class BannerExample extends StatelessWidget {
  const BannerExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221021175217.3">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221021175330.1">Center(
  child:
  @others
);
</t>
<t tx="swot.20221021175401.1">Container(
  margin: const EdgeInsets.all(10.0),
  child:
  @others
),
</t>
<t tx="swot.20221021175506.1">Container(
  color: Colors.blueGrey,
  child:
  @others
),
</t>
<t tx="swot.20221021175604.1">Padding(
  padding: const EdgeInsets.fromLTRB(10, 20, 10, 20),
  child:
  @others
),
</t>
<t tx="swot.20221021175702.1">Column(
  mainAxisSize: MainAxisSize.min,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221021175915.1">Image.network(
  'https://img1.baidu.com/it/u=1855083458,281793390&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=989&amp;h=500',
),
</t>
<t tx="swot.20221021180035.1">const SizedBox(height: 10),
</t>
<t tx="swot.20221021180106.1">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  children: [
    const Text(
      'Flutter Course',
      style: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    ),
    ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.orangeAccent,
      ),
      child: const Text('Get now'),
      onPressed: () {},
    ),
  ],
),
</t>
<t tx="swot.20221021180745.1">ClipRect(
  child:
  @others
),
</t>
<t tx="swot.20221021180828.1">Banner(
  message: "25% off",
  location: BannerLocation.topEnd,
  color: Colors.red,
  child:
  @others
),
</t>
<t tx="swot.20221021181118.1">BannerExample(),
Divider(),
</t>
<t tx="swot.20221021181642.2">@language dart
@tabwidth -2
class BaselineExample extends StatelessWidget {
  const BaselineExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221021181642.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Container(
      width: 100,
      height: 100,
      color: Colors.orange,
      child: const Baseline(
        baseline: 0,
        // baseline: 30,
        baselineType: TextBaseline.alphabetic,
        child: FlutterLogo(
          size: 30,
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221021181700.1">BaselineExample(),
Divider(),
</t>
<t tx="swot.20221022080218.2">@language dart
@tabwidth -2
class BlockSemanticsExample extends StatefulWidget {
  const BlockSemanticsExample({super.key});

  @override
  State&lt;BlockSemanticsExample&gt; createState() =&gt; _BlockSemanticsExampleState();
}

class _BlockSemanticsExampleState extends State&lt;BlockSemanticsExample&gt; {
  @others
}

</t>
<t tx="swot.20221022080218.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221022080218.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221022080218.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221022080422.1">SizedBox(
  width: double.infinity,
  child:
  @others
);
</t>
<t tx="swot.20221022083203.1">SizedBox(
  width: 500,
  height: 135,
  child:
  @others
),
</t>
<t tx="swot.20221022083314.1">// showSemanticsDebugger: true,
</t>
<t tx="swot.20221022083723.1">bool isShow = false;
</t>
<t tx="swot.20221022083954.1">Column(children: [
  @others
]),
</t>
<t tx="swot.20221022084045.1">OutlinedButton(
  onPressed: () {
    setState(() {
      isShow = true;
    });
  },
  child: const Text('Click'),
),
</t>
<t tx="swot.20221022084513.1">if (isShow)
  @others
</t>
<t tx="swot.20221022085519.1">BlockSemanticsExample(),
Divider(),
</t>
<t tx="swot.20221022090937.1">Card(
  color: Colors.orangeAccent,
  child: SizedBox(
    width: 200,
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text('This is a card'),
        TextButton(
          child: const Text('Close'),
          onPressed: () =&gt; setState(() {
            isShow = false;
          }),
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022091825.1">BlockSemantics(
  blocking: isShow, // hidden OutlinedButton?
  child:
      @others
),
</t>
<t tx="swot.20221022094100.2">@language dart
@tabwidth -2
class BottomNavigationBarExample extends StatefulWidget {
  const BottomNavigationBarExample({super.key});

  @override
  State&lt;BottomNavigationBarExample&gt; createState() =&gt;
      _BottomNavigationBarExampleState();
}

class _BottomNavigationBarExampleState
    extends State&lt;BottomNavigationBarExample&gt; {
  @others
}

</t>
<t tx="swot.20221022094100.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221022094133.1">int _currentIndex = 0;

List&lt;Widget&gt; body = const [
  Icon(Icons.home),
  Icon(Icons.menu),
  Icon(Icons.person),
];

</t>
<t tx="swot.20221022094818.1">BottomSheetExample(),
Divider(),
</t>
<t tx="swot.20221022095720.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221022095720.4">body: Center(
  child: body[_currentIndex],
),
</t>
<t tx="swot.20221022095720.5">bottomNavigationBar: BottomNavigationBar(
    currentIndex: _currentIndex,
    fixedColor: Colors.white,
    backgroundColor: Colors.blue,
    items: const [
      BottomNavigationBarItem(
        label: 'Home',
        icon: Icon(Icons.home),
      ),
      BottomNavigationBarItem(
        label: 'Menu',
        icon: Icon(Icons.menu),
      ),
      BottomNavigationBarItem(
        label: 'Profile',
        icon: Icon(Icons.person),
      ),
    ],
    type: BottomNavigationBarType.fixed,
    // type: BottomNavigationBarType.shifting,
    onTap: (int index) {
      setState(() {
        _currentIndex = index;
      });
    },
),
</t>
<t tx="swot.20221022101129.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('show BottomNavigationBarExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; BottomNavigationBarExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221022101748.1">appBar: AppBar(
  title: Text('BottomNavigationBar'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221022104843.2">@language dart
@tabwidth -2
class BottomSheetExample extends StatefulWidget {
  const BottomSheetExample({super.key});

  @override
  State&lt;BottomSheetExample&gt; createState() =&gt; _BottomSheetExampleState();
}

class _BottomSheetExampleState extends State&lt;BottomSheetExample&gt; {
  @others
}

</t>
<t tx="swot.20221022104843.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ElevatedButton(
      child: const Text('Modal Bottom Sheet'),
      onPressed: () {
        @others
      },
    ),
  );
}
</t>
<t tx="swot.20221022110627.2">@language dart
@tabwidth -2
class BuilderExample extends StatelessWidget {
  const BuilderExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022110627.3">@override
Widget build(BuildContext context) {
  return myBuilderWidget();
}

</t>
<t tx="swot.20221022110900.1">// 不加 Builder,则无法找到上面 build's context,
myBuilderWidget() =&gt; Builder(builder: (context) {
  return Text(
    'Text with Theme',
    // context 需要使用上面的 Builder 来获取
    style: Theme.of(context).textTheme.displayLarge,
  );
});
</t>
<t tx="swot.20221022111104.1">BuilderExample(),
Divider(),
</t>
<t tx="swot.20221022115433.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'c');
  },
  child: const Text('C'),
),

</t>
<t tx="swot.20221022121254.1"></t>
<t tx="swot.20221022121336.1">class C extends StatelessWidget {
  const C({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoC(),
      ),
    );
  }
}

</t>
<t tx="swot.20221022121336.2">appBar: AppBar(
  title: const Text('Demo C'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221022121355.1"></t>
<t tx="swot.20221022121559.1">@language dart
@tabwidth -2
class DemoC extends StatefulWidget {
  const DemoC({super.key});

  @override
  State&lt;DemoC&gt; createState() =&gt; _DemoCState();
}

class _DemoCState extends State&lt;DemoC&gt; {
  @others
}

</t>
<t tx="swot.20221022121559.2">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221022121559.3">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221022121559.4">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),

</t>
<t tx="swot.20221022121559.5">CardExample(),
Divider(),
</t>
<t tx="swot.20221022121728.1"></t>
<t tx="swot.20221022121755.2">@language dart
@tabwidth -2
class CardExample extends StatelessWidget {
  const CardExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022121755.3">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022122022.1">Card(
  elevation: 20,
  color: Colors.orangeAccent,
  child: Padding(
    padding: const EdgeInsets.all(10.0),
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const SizedBox(height: 8),
        const Text('This is a Flutter card'),
        TextButton(
          child: const Text('Press'),
          onPressed: () {},
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022122655.2">@language dart
@tabwidth -2
class CenterExample extends StatelessWidget {
  const CenterExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022122655.3">@override
Widget build(BuildContext context) {
  return Column(mainAxisAlignment: MainAxisAlignment.center, children: [
    Container(
      color: Colors.orangeAccent,
      child:
      @others
    ),
  ]);
}
</t>
<t tx="swot.20221022122945.1">const Center(
  heightFactor: 5, // Text 组件高度倍数（Container有高度则无效）
  child: Text('Flutter learning'),
),
</t>
<t tx="swot.20221022123052.1">CenterExample(),
Divider(),
</t>
<t tx="swot.20221022141252.2">@language dart
@tabwidth -2
class CheckboxExample extends StatefulWidget {
  const CheckboxExample({super.key});

  @override
  State&lt;CheckboxExample&gt; createState() =&gt; _CheckboxExampleState();
}

class _CheckboxExampleState extends State&lt;CheckboxExample&gt; {
  @others
}

</t>
<t tx="swot.20221022141252.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221022141252.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221022141252.5">@override
Widget build(BuildContext context) {
  return Center(
    child:
        @others
  );
}
</t>
<t tx="swot.20221022141315.1">bool? isChecked = false;
</t>
<t tx="swot.20221022141621.1">CheckboxExample(),
Divider(),
</t>
<t tx="swot.20221022141927.1"></t>
<t tx="swot.20221022141946.2">@language dart
@tabwidth -2
class CheckboxListTileExample extends StatefulWidget {
  const CheckboxListTileExample({super.key});

  @override
  State&lt;CheckboxListTileExample&gt; createState() =&gt;
      _CheckboxListTileExampleState();
}

class _CheckboxListTileExampleState extends State&lt;CheckboxListTileExample&gt; {
  @others
}

</t>
<t tx="swot.20221022141946.5">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022142005.1">bool? _isChecked = false;
</t>
<t tx="swot.20221022142124.1">CheckboxListTile(
  title: const Text('Checkbox List Tile'),
  value: _isChecked,
  activeColor: Colors.orangeAccent,
  checkColor: Colors.white,
  tileColor: Colors.black12,
  subtitle: const Text('This is a subtitle'),
  controlAffinity: ListTileControlAffinity.leading,
  tristate: true,
  onChanged: (bool? newValue) {
    setState(() {
      _isChecked = newValue;
    });
  },
),
</t>
<t tx="swot.20221022142602.1">CheckboxListTileExample(),
Divider(),
</t>
<t tx="swot.20221022142919.2">@language dart
@tabwidth -2
class ChipExample extends StatelessWidget {
  const ChipExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022142919.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Chip(
      label: const Text("This is a Flutter chip"),
      onDeleted: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022143204.1">ChipExample(),
Divider(),
</t>
<t tx="swot.20221022144339.2">@language dart
@tabwidth -2
class ChoiceChipExample extends StatefulWidget {
  const ChoiceChipExample({super.key});

  @override
  State&lt;ChoiceChipExample&gt; createState() =&gt; _ChoiceChipExampleState();
}

class _ChoiceChipExampleState extends State&lt;ChoiceChipExample&gt; {
  @others
}

</t>
<t tx="swot.20221022144339.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ChoiceChip(
      avatar: Image.asset('assets/avatar.webp'),
      label: const Text("Choice Chip"),
      selected: isSelected,
      selectedColor: Colors.orangeAccent,
      onSelected: (bool newState) {
        setState(() {
          isSelected = newState;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221022144356.1">bool isSelected = false;
</t>
<t tx="swot.20221022144701.1">ChoiceChipExample(),
Divider(),
</t>
<t tx="swot.20221022145018.2">@language dart
@tabwidth -2
class CircleAvatarExample extends StatelessWidget {
  const CircleAvatarExample({Key? key}) : super(key: key);
  @others
}


@doc
Creating Circular Image/CircleAvatar in Flutter The Best Way in 2022 (Code)

https://www.flutterbeads.com/circular-image-in-flutter/
</t>
<t tx="swot.20221022145018.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221022145230.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.circle_outlined),
  title: const Text('CircleAvatar'),
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; CircleAvatarExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221022153237.2">@language dart
@tabwidth -2
class CircularProgressIndicatorExample extends StatefulWidget {
  const CircularProgressIndicatorExample({super.key});

  @override
  State&lt;CircularProgressIndicatorExample&gt; createState() =&gt;
      _CircularProgressIndicatorExampleState();
}

class _CircularProgressIndicatorExampleState
    extends State&lt;CircularProgressIndicatorExample&gt; {
  @others
}

</t>
<t tx="swot.20221022153237.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221022153237.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221022153237.5">@override
Widget build(BuildContext context) {
  return Center(
    child: CircularProgressIndicator(
      color: Colors.orangeAccent,
      backgroundColor: Colors.blueGrey,
      value: 0.40,
    ),
  );
}
</t>
<t tx="swot.20221022153425.1">CircularProgressIndicatorExample(),
Divider(),
</t>
<t tx="swot.20221022154220.1">ClipOvalExample(),
Divider(),
</t>
<t tx="swot.20221022162124.1">ClipPathExample(),
Divider(),
</t>
<t tx="swot.20221022164554.1">ClipRectExample(),
Divider(),
</t>
<t tx="swot.20221022165324.2">@language dart
@tabwidth -2
class ClipRRectExample extends StatefulWidget {
  const ClipRRectExample({super.key});

  @override
  State&lt;ClipRRectExample&gt; createState() =&gt; _ClipRRectExampleState();
}

class _ClipRRectExampleState extends State&lt;ClipRRectExample&gt; {
  @others
}

</t>
<t tx="swot.20221022165324.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221022165721.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.circle_outlined),
  title: const Text('ClipRRect'),
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; ClipRRectExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221022170557.2">@language dart
@tabwidth -2
class CloseButtonExample extends StatelessWidget {
  const CloseButtonExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022170557.3">@override
Widget build(BuildContext context) {
  return Center(
    child: CloseButton(
      color: Colors.red,
      onPressed: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022170737.1">CloseButtonExample(),
Divider(),
</t>
<t tx="swot.20221022171523.2">@language dart
@tabwidth -2
class ColoredBoxExample extends StatelessWidget {
  const ColoredBoxExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022171523.3">@override
Widget build(BuildContext context) {
  return const Center(
    child: ColoredBox(
      color: Colors.orangeAccent,
      child: SizedBox(
        width: 100,
        height: 100,
        child: Center(
          child: Text('ColoredBox'),
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022171708.1">ColoredBoxExample(),
Divider(),
</t>
<t tx="swot.20221022172641.2">@language dart
@tabwidth -2
class ColorFilteredExample extends StatelessWidget {
  const ColorFilteredExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022172641.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ColorFiltered(
      colorFilter: const ColorFilter.mode(
        Colors.pink,
        BlendMode.color,
      ),
      child: Image.network(
        'https://img1.baidu.com/it/u=457294142,2860827883&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=658&amp;h=439',
        height: 150,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022173017.1">ColorFilteredExample(),
Divider(),
</t>
<t tx="swot.20221022201619.2">@language dart
@tabwidth -2
class ConstrainedBoxExample extends StatelessWidget {
  const ConstrainedBoxExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022201619.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ConstrainedBox(
      constraints: const BoxConstraints(
        maxWidth: 200,
        maxHeight: 100,
      ),
      child: Container(
        color: Colors.orangeAccent,
        width: double.infinity,
        height: 50,
        child: const Text('ConstrainedBox'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022202111.1">ConstrainedBoxExample(),
Divider(),
</t>
<t tx="swot.20221022202825.2">@language dart
@tabwidth -2
class ContainerExample extends StatelessWidget {
  const ContainerExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022202825.3">@override
Widget build(BuildContext context) {
  return Container(
    padding: const EdgeInsets.all(8.0),
    color: Colors.orangeAccent,
    alignment: Alignment.center,
    constraints: const BoxConstraints.expand(height: 100),
    transform: Matrix4.rotationZ(0.2),
    child: const Text('Flutter App'),
  );
}
</t>
<t tx="swot.20221022203303.1">ContainerExample(),
Divider(),
</t>
<t tx="swot.20221022203601.2">@language dart
@tabwidth -2
class ColumnExample extends StatelessWidget {
  const ColumnExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221022203601.3">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 120,
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      mainAxisAlignment: MainAxisAlignment.end,
      // mainAxisSize: MainAxisSize.min, // Column紧紧包围内容
      children: const [
        Text("data 1"),
        Text("data 2"),
        Text("data 3"),
        Text('data so long long'),
      ],
    ),
  );
}
</t>
<t tx="swot.20221022203824.1">ColumnExample(),
Divider(),
</t>
<t tx="swot.20221022210338.2">@language dart
@tabwidth -2
class CupertinoActionSheetExample extends StatefulWidget {
  const CupertinoActionSheetExample({super.key});

  @override
  State&lt;CupertinoActionSheetExample&gt; createState() =&gt;
      _CupertinoActionSheetExampleState();
}

class _CupertinoActionSheetExampleState
    extends State&lt;CupertinoActionSheetExample&gt; {
  @others
}

</t>
<t tx="swot.20221022210338.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221022210338.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221022210338.5">@override
Widget build(BuildContext context) {
  return CupertinoPageScaffold(
    // Not important here
    child: Center(
      child: CupertinoButton(
        child: const Text('CupertinoActionSheet'),
        onPressed: () {
          showCupertinoModalPopup(
            context: context,
            builder: (BuildContext context) =&gt; CupertinoActionSheet(
              title: const Text('Flutter App'),
              message: const Text('Your Message'),
              actions: &lt;CupertinoActionSheetAction&gt;[
                CupertinoActionSheetAction(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Do something'),
                ),
                CupertinoActionSheetAction(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Do something else'),
                )
              ],
            ),
          );
        },
      ),
    ),
  );
}
</t>
<t tx="swot.20221022210532.1">CupertinoActionSheetExample(),
Divider(),
</t>
<t tx="swot.20221022214055.1">CupertinoAppExample(),
Divider(),
</t>
<t tx="swot.20221023080501.1"></t>
<t tx="swot.20221023080540.1">class M extends StatelessWidget {
  const M({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoM(),
      ),
    );
  }
}

</t>
<t tx="swot.20221023080540.2">appBar: AppBar(
  title: const Text('Demo M'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221023081047.1">@language dart
@tabwidth -2
class DemoM extends StatefulWidget {
  const DemoM({super.key});

  @override
  State&lt;DemoM&gt; createState() =&gt; _DemoMState();
}

class _DemoMState extends State&lt;DemoM&gt; {
  @others
}

</t>
<t tx="swot.20221023081047.2">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221023081047.3">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221023081047.4">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221023081047.5">MaterialBannerExample(),
</t>
<t tx="swot.20221023081258.1"></t>
<t tx="swot.20221023081344.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'm');
  },
  child: const Text('M'),
),

</t>
<t tx="swot.20221023081535.2">@language dart
@tabwidth -2
class MaterialBannerExample extends StatelessWidget {
  const MaterialBannerExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221023081535.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ElevatedButton(
      child: const Text('Open MaterialBanner'),
      onPressed: () {
        ScaffoldMessenger.of(context).showMaterialBanner(MaterialBanner(
          padding: const EdgeInsets.all(20),
          content: const Text('Subscribe!'),
          leading: const Icon(Icons.notifications_active_outlined),
          elevation: 5,
          backgroundColor: Colors.white12,
          actions: [
            Builder(
              builder: (context) =&gt; TextButton(
                onPressed: () {
                  ScaffoldMessenger.of(context).hideCurrentMaterialBanner();
                },
                child: const Text('Dismiss'),
              ),
            ),
          ],
        ));
      },
    ),
  );
}

@doc
Looking up a deactivated widget's ancestor is unsafe.

At this point the state of the widget's element tree is no longer stable.

To safely refer to a widget's ancestor in its dispose() method, save a reference to the ancestor by calling dependOnInheritedWidgetOfExactType() in the widget's didChangeDependencies() method.

Solved:
https://stackoverflow.com/questions/69141074/showmaterialbanner-doesnt-hide-on-change-route-looking-up-a-deactivated-widgets

@language dart
Builder(  // Can solve above problem
  builder: (context) =&gt; TextButton(
    onPressed: () {
      ScaffoldMessenger.of(context).hideCurrentMaterialBanner();
    },
    child: const Text('Dismiss'),
  ),
)
</t>
<t tx="swot.20221023093000.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'o');
  },
  child: const Text('O'),
),

</t>
<t tx="swot.20221023093033.1"></t>
<t tx="swot.20221023093033.14"></t>
<t tx="swot.20221023093033.2">class P extends StatelessWidget {
  const P({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: DemoP(),
    );
  }
}

</t>
<t tx="swot.20221023093033.4">@language dart
@tabwidth -2
class DemoP extends StatefulWidget {
  const DemoP({super.key});

  @override
  State&lt;DemoP&gt; createState() =&gt; _DemoPState();
}

class _DemoPState extends State&lt;DemoP&gt; {
  @others
}

</t>
<t tx="swot.20221023093033.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221023093033.6">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221023093033.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221023093415.1">/*
@others
*/
</t>
<t tx="swot.20221023093803.1">appBar: PreferredSize(
  preferredSize: const Size.fromHeight(80.0),
  child: Container(
    height: 120,
    decoration: const BoxDecoration(
      gradient: LinearGradient(
        colors: &lt;Color&gt;[
          Colors.redAccent,
          Colors.orangeAccent,
        ],
      ),
    ),
    child: SafeArea(
      child: Center(
        child: ListTile(
          title: const Text('PreferredSize'),
          trailing: IconButton(
            icon: const Icon(Icons.arrow_back, size: 20),
            color: Colors.white,
            onPressed: () {
              Navigator.pop(context);
            },
          ),
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221023105031.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'l');
  },
  child: const Text('L'),
),

</t>
<t tx="swot.20221023105117.1"></t>
<t tx="swot.20221023105152.1">class L extends StatelessWidget {
  const L({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoL(),
      ),
    );
  }
}

</t>
<t tx="swot.20221023105152.2">appBar: AppBar(
  title: const Text('Demo L'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221023105258.1">@language dart
@tabwidth -2
class DemoL extends StatefulWidget {
  const DemoL({super.key});

  @override
  State&lt;DemoL&gt; createState() =&gt; _DemoLState();
}

class _DemoLState extends State&lt;DemoL&gt; {
  @others
}

</t>
<t tx="swot.20221023105258.2">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221023105258.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32337103752e">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221023105258.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32337103752e">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221023105408.1"></t>
<t tx="swot.20221023105920.2">@language dart
@tabwidth -2
class LongPressDraggableExample extends StatefulWidget {
  const LongPressDraggableExample({super.key});

  @override
  State&lt;LongPressDraggableExample&gt; createState() =&gt;
      _LongPressDraggableExampleState();
}

class _LongPressDraggableExampleState extends State&lt;LongPressDraggableExample&gt; {
  @others
}

</t>
<t tx="swot.20221023105920.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221023105920.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221023105920.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221023105947.1">Offset _offset = const Offset(200, 250);
</t>
<t tx="swot.20221023110506.1">Positioned(
  left: _offset.dx,
  top: _offset.dy,
  child:
  @others
),
</t>
<t tx="swot.20221023110634.1">LongPressDraggable(
  feedback: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    height: 100,
    color: Colors.orangeAccent,
    colorBlendMode: BlendMode.colorBurn,
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    height: 100,
  ),
  onDragEnd: (details) {
    setState(() {
      double adjustment = MediaQuery.of(context).size.height -
          constrains.maxHeight;
      _offset = Offset(
        details.offset.dx,
        details.offset.dy - adjustment,
      );
    });
  },
),
</t>
<t tx="swot.20221023122724.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('LongPressDraggableExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; LongPressDraggableExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221023123049.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221023123049.3">appBar: AppBar(
  title: Text('LongPressDraggable'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023123049.4">body: Center(
  child: LayoutBuilder(
    builder: (context, constrains) {
      return Stack(children: [
        @others
      ]);
    },
  ),
),
</t>
<t tx="swot.20221023124300.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'h');
  },
  child: const Text('H'),
),

</t>
<t tx="swot.20221023124355.1"></t>
<t tx="swot.20221023124355.2">class H extends StatelessWidget {
  const H({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoH(),
      ),
    );
  }
}

</t>
<t tx="swot.20221023124355.3">appBar: AppBar(
  title: const Text('Demo H'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221023124355.4">@language dart
@tabwidth -2
class DemoH extends StatefulWidget {
  const DemoH({super.key});

  @override
  State&lt;DemoH&gt; createState() =&gt; _DemoHState();
}

class _DemoHState extends State&lt;DemoH&gt; {
  @others
}

</t>
<t tx="swot.20221023124355.5">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221023124355.6">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221023124355.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221023124644.1"></t>
<t tx="swot.20221023152035.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'r');
  },
  child: const Text('R'),
),

</t>
<t tx="swot.20221023152107.1"></t>
<t tx="swot.20221023152107.13"></t>
<t tx="swot.20221023152107.2">class R extends StatelessWidget {
  const R({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: DemoR(),
    );
  }
}

</t>
<t tx="swot.20221023152107.4">@language dart
@tabwidth -2
class DemoR extends StatefulWidget {
  const DemoR({super.key});

  @override
  State&lt;DemoR&gt; createState() =&gt; _DemoRState();
}

class _DemoRState extends State&lt;DemoR&gt; {
  @others
}

</t>
<t tx="swot.20221023152107.5">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221023152107.6">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221023152107.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221023152533.1">appBar: AppBar(
  title: const Text('Demo R'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221023152801.2">@language dart
@tabwidth -2
class ReorderableListViewExample extends StatefulWidget {
  const ReorderableListViewExample({super.key});

  @override
  State&lt;ReorderableListViewExample&gt; createState() =&gt;
      _ReorderableListViewExampleState();
}

class _ReorderableListViewExampleState
    extends State&lt;ReorderableListViewExample&gt; {
  @others
}

</t>
<t tx="swot.20221023152801.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221023152801.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221023152801.5">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221023152933.1">final List&lt;int&gt; items = List&lt;int&gt;.generate(30, (int index) =&gt; index);
</t>
<t tx="swot.20221023153058.1">ReorderableListView(
  children: List.generate(
    items.length,
    (index) =&gt; ListTile(
      key: Key('$index'),
      // tileColor: items[index].isOdd ? Colors.white12 : Colors.white30,
      tileColor: items[index].isOdd ? Colors.grey : Colors.white30,
      title: Text('Item ${items[index]}'),
      trailing: const Icon(Icons.drag_handle_sharp),
    ),
  ),
  onReorder: (int oldIndex, int newIndex) {
    setState(() {
      if (oldIndex &lt; newIndex) {
        newIndex -= 1;
      }
      final int item = items.removeAt(oldIndex);
      items.insert(newIndex, item);
    });
  },
),
</t>
<t tx="swot.20221023154334.2">Scaffold(
  @others
);

</t>
<t tx="swot.20221023154334.3">appBar: AppBar(
  title: Text('ReorderableListView'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023154334.4">body:
    @others
</t>
<t tx="swot.20221023154547.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('ReorderableListView'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; ReorderableListViewExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221023163418.2">@language dart
@tabwidth -2
class CupertinoContextMenuExample extends StatelessWidget {
  const CupertinoContextMenuExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221023163418.3">@override
Widget build(BuildContext context) {
  return Center(
    child: SizedBox(
      width: 100,
      height: 100,
      child:
      @others
    ),
  );
}
</t>
<t tx="swot.20221023163626.1">CupertinoContextMenu(
  child: Image.network(
    'https://img0.baidu.com/it/u=574351580,3649561547&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=640&amp;h=320',
  ),
  actions: &lt;Widget&gt;[
    CupertinoContextMenuAction(
      child: const Text('Action one'),
      onPressed: () { Navigator.pop(context); },
    ),
    CupertinoContextMenuAction(
      child: const Text('Action two'),
      onPressed: () { Navigator.pop(context); },
    ),
  ],
),
</t>
<t tx="swot.20221023164513.1">CupertinoContextMenuExample(),
Divider(),
</t>
<t tx="swot.20221023175859.1"></t>
<t tx="swot.20221023175859.14"></t>
<t tx="swot.20221023175859.2">class T extends StatelessWidget {
  const T({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: const DemoT(),
    );
  }
}

</t>
<t tx="swot.20221023175859.3">appBar: AppBar(
  title: const Text('Demo T'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221023175859.4">@language dart
@tabwidth -2
class DemoT extends StatefulWidget {
  const DemoT({super.key});

  @override
  State&lt;DemoT&gt; createState() =&gt; _DemoTState();
}

class _DemoTState extends State&lt;DemoT&gt; {
  @others
}

</t>
<t tx="swot.20221023175859.5">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221023175859.6">SingleChildScrollView(
  child:
      @others
);
</t>
<t tx="swot.20221023175859.7">Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221023180102.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 't');
  },
  child: const Text('T'),
),

</t>
<t tx="swot.20221023193833.2">@language dart
@tabwidth -2
class TableExample extends StatelessWidget {
  const TableExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221023193833.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221023193950.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221023193950.3">appBar: AppBar(
  title: const Text('Table'),
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023193950.4">body:
    @others
</t>
<t tx="swot.20221023194122.1">Center(
  child: Padding(
  padding: const EdgeInsets.all(15.0),
  child:
      @others
  ),
),
</t>
<t tx="swot.20221023194310.1">Table(
    border: TableBorder.all(color: Colors.white30),
    defaultVerticalAlignment: TableCellVerticalAlignment.middle,
    children: [
      @others
    ],
),
</t>
<t tx="swot.20221023194533.1">const TableRow(
  decoration: BoxDecoration(
    color: Colors.redAccent,
  ),
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221023194941.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 1'),
  ),
),
</t>
<t tx="swot.20221023194949.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 2'),
  ),
),
</t>
<t tx="swot.20221023194950.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 3'),
  ),
),
</t>
<t tx="swot.20221023195102.1">...List.generate(
  30,
  (index) =&gt; const TableRow(
    children: [
      @others
    ],
  ),
),
</t>
<t tx="swot.20221023195414.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 1'),
  ),
),
</t>
<t tx="swot.20221023195426.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 2'),
  ),
),
</t>
<t tx="swot.20221023195426.2">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 3'),
  ),
),
</t>
<t tx="swot.20221023195608.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('Table'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const TableExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221023200224.1">SingleChildScrollView(
  child:
      @others
),
</t>
<t tx="swot.20221024065732.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'd');
  },
  child: const Text('D'),
),

</t>
<t tx="swot.20221024065815.1"></t>
<t tx="swot.20221024065902.1">class D extends StatelessWidget {
  const D({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoD(),
      ),
    );
  }
}

</t>
<t tx="swot.20221024065902.2">appBar: AppBar(
  title: const Text('Demo D'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221024070012.1">@language dart
@tabwidth -2
class DemoD extends StatefulWidget {
  const DemoD({super.key});

  @override
  State&lt;DemoD&gt; createState() =&gt; _DemoDState();
}

class _DemoDState extends State&lt;DemoD&gt; {
  @others
}

</t>
<t tx="swot.20221024070127.1">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221024070127.2">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221024070127.3">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),

</t>
<t tx="swot.20221024070225.1"></t>
<t tx="swot.20221024070848.1"></t>
<t tx="swot.20221024070848.2">class S extends StatelessWidget {
  const S({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoS(),
      ),
    );
  }
}

</t>
<t tx="swot.20221024070848.3">appBar: AppBar(
  title: const Text('Demo S'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221024070848.4">@language dart
@tabwidth -2
class DemoS extends StatefulWidget {
  const DemoS({super.key});

  @override
  State&lt;DemoS&gt; createState() =&gt; _DemoSState();
}

class _DemoSState extends State&lt;DemoS&gt; {
  @others
}

</t>
<t tx="swot.20221024070848.5">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221024070848.6">SingleChildScrollView(
  child:
      @others
)
</t>
<t tx="swot.20221024070848.7">Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    @others
  ],
),

</t>
<t tx="swot.20221024070848.8"></t>
<t tx="swot.20221024091106.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 's');
  },
  child: const Text('S'),
),

</t>
<t tx="swot.20221024095344.2">@language dart
@tabwidth -2
class DatePickerExample extends StatefulWidget {
  const DatePickerExample({super.key});

  @override
  State&lt;DatePickerExample&gt; createState() =&gt; _DatePickerExampleState();
}

class _DatePickerExampleState extends State&lt;DatePickerExample&gt; {
  @others
}

</t>
<t tx="swot.20221024095344.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221024095344.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221024095344.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        ElevatedButton(
          child: const Text('Choose Date'),
          onPressed: () async {
            final DateTime? dateTime = await showDatePicker(
              context: context,
              initialDate: selectedDate,
              firstDate: DateTime(2000),
              lastDate: DateTime(3000),
            );
            if (dateTime != null) {
              setState(() {
                selectedDate = dateTime;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text(
            "${selectedDate.year}-${selectedDate.month}-${selectedDate.day}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024095406.1">DateTime selectedDate = DateTime.now();
// DateTime selectedDate = DateTime(2100);
</t>
<t tx="swot.20221024100552.1">DatePickerExample(),
Divider(),
</t>
<t tx="swot.20221024103523.2">@language dart
@tabwidth -2
class TimePickerExample extends StatefulWidget {
  const TimePickerExample({super.key});

  @override
  State&lt;TimePickerExample&gt; createState() =&gt; _TimePickerExampleState();
}

class _TimePickerExampleState extends State&lt;TimePickerExample&gt; {
  @others
}

</t>
<t tx="swot.20221024103523.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221024103523.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221024103554.1">TimePickerExample(),
Divider(),
</t>
<t tx="swot.20221024103850.1">TimeOfDay selectedTime = TimeOfDay.now();
// TimeOfDay? time = const TimeOfDay(hour: 12, minute: 12);
</t>
<t tx="swot.20221024103957.1">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        ElevatedButton(
          child: const Text('Choose Time'),
          onPressed: () async {
            final TimeOfDay? timeOfDay = await showTimePicker(
              context: context,
              initialTime: selectedTime,
              initialEntryMode: TimePickerEntryMode.dial,
            );
            if (timeOfDay != null) {
              setState(() {
                selectedTime = timeOfDay;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text("${selectedTime.hour}:${selectedTime.minute}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024110030.2">@language dart
@tabwidth -2
class DateRangePickerExample extends StatefulWidget {
  const DateRangePickerExample({super.key});

  @override
  State&lt;DateRangePickerExample&gt; createState() =&gt; _DateRangePickerExampleState();
}

class _DateRangePickerExampleState extends State&lt;DateRangePickerExample&gt; {
  @others
}

</t>
<t tx="swot.20221024110030.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221024110030.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221024110030.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        ElevatedButton(
          child: const Text('Choose Dates'),
          onPressed: () async {
            final DateTimeRange? dateTimeRange = await showDateRangePicker(
              context: context,
              firstDate: DateTime(2000),
              lastDate: DateTime(3000),
            );
            if (dateTimeRange != null) {
              setState(() {
                selectedDates = dateTimeRange;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text("${selectedDates.duration.inDays}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024110048.1">DateTimeRange selectedDates = DateTimeRange(
  start: DateTime.now(),
  end: DateTime.now(),
);
</t>
<t tx="swot.20221024110745.1">DateRangePickerExample(),
Divider(),
</t>
<t tx="swot.20221024112602.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32357103752e">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DismissibleExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DismissibleExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221024112614.2">@language dart
@tabwidth -2
class DismissibleExample extends StatefulWidget {
  const DismissibleExample({super.key});

  @override
  State&lt;DismissibleExample&gt; createState() =&gt; _DismissibleExampleState();
}

class _DismissibleExampleState extends State&lt;DismissibleExample&gt; {
  @others
}

</t>
<t tx="swot.20221024112614.3">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221024112614.4">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221024112614.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221024112703.1">List&lt;int&gt; items = List&lt;int&gt;.generate(50, (int index) =&gt; index);
</t>
<t tx="swot.20221024113603.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221024113603.3">appBar: AppBar(
  title: Text('DismissibleExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221024113603.4">body:
@others
</t>
<t tx="swot.20221024113627.1">ListView.builder(
  itemCount: items.length,
  padding: const EdgeInsets.symmetric(vertical: 16),
  itemBuilder: (BuildContext contex, int index) {
    return Dismissible(
      background: Container(
        color: Colors.red,
        child: const Icon(Icons.delete),
      ),
      key: ValueKey&lt;int&gt;(items[index]),
      onDismissed: (DismissDirection direction) {
        setState(() {
          items.removeAt(index);
        });
      },
      child: ListTile(
        title: Text('Item ${items[index]}'),
      ),
    );
  },
),
</t>
<t tx="swot.20221025074739.2">@language dart
@tabwidth -2
class DraggableScrollableExample extends StatelessWidget {
  const DraggableScrollableExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221025074739.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221025075357.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DraggableScrollableExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DraggableScrollableExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221025081258.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221025081258.3">appBar: AppBar(
  title: Text('DraggableScrollableSheet'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221025081258.4">body:
@others
</t>
<t tx="swot.20221025081316.1">DraggableScrollableSheet(
  builder: (BuildContext context, ScrollController scrollController) {
    return Container(
      color: Colors.orangeAccent,
      child: ListView.builder(
        controller: scrollController,
        itemCount: 25,
        itemBuilder: (BuildContext context, int index) {
          return ListTile(
            title: Text('Item $index'),
          );
        },
      ),
    );
  },
),
</t>
<t tx="swot.20221025081939.2">@language dart
@tabwidth -2
class DragTargetExample extends StatefulWidget {
  const DragTargetExample({super.key});

  @override
  State&lt;DragTargetExample&gt; createState() =&gt; _DragTargetExampleState();
}

class _DragTargetExampleState extends State&lt;DragTargetExample&gt; {
  @others
}

</t>
<t tx="swot.20221025081939.3">Color caughtColor = Colors.red;
</t>
<t tx="swot.20221025081939.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221025081939.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221025081939.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221025083125.1">SizedBox(
  width: double.infinity,
  child:
  @others
)
</t>
<t tx="swot.20221025083519.1">Column(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221025083732.1">Draggable(
  data: Colors.orangeAccent,
  child: Container(
    width: 100.0,
    height: 100.0,
    color: Colors.orangeAccent,
    child: const Center(
      child: Text('Box'),
    ),
  ),
  onDraggableCanceled: (velocity, offset) {},
  feedback: Container(
    width: 150.0,
    height: 150.0,
    color: Colors.orangeAccent.withOpacity(0.5),
    child: const Center(
      child: Text(
        'Box...',
        style: TextStyle(
          color: Colors.white,
          decoration: TextDecoration.none,
          fontSize: 18.0,
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221025084843.1">DragTarget(
  onAccept: (Color color) {
    caughtColor = color; // color is Draggable data
  },
  builder: (BuildContext context, List&lt;dynamic&gt; accepted, List&lt;dynamic&gt; rejected) {
    return Container(
      width: 200.0,
      height: 200.0,
      color: accepted.isEmpty
          ? caughtColor
          : Colors.grey.shade200,
      child: const Center(
        child: Text("Drag here"),
      ),
    );
  },
),
</t>
<t tx="swot.20221025091113.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DragTargetExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DragTargetExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221025091431.2">Scaffold(
  @others
)

</t>
<t tx="swot.20221025091431.3">appBar: AppBar(
  title: Text('DragTargetExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221025091431.4">body:
@others
</t>
<t tx="swot.20221025095334.2">@language dart
@tabwidth -2
class DrawerExample extends StatelessWidget {
  const DrawerExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221025095334.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221025095436.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221025095436.3">appBar: AppBar(
  title: Text('NewPage'),
),
</t>
<t tx="swot.20221025095436.4">body: Center(
  child: Builder(
    builder: (context) =&gt; ElevatedButton(
      onPressed: () {
        // Scaffold.of(context).openDrawer();
        Scaffold.of(context).openEndDrawer();
      },
      child: const Text('Open EndDrawer'),
    ),
  ),
),

</t>
<t tx="swot.20221025095602.1">endDrawer: Drawer(
  child: ListView(
    children: [
      const DrawerHeader(
        decoration: BoxDecoration(
          color: Colors.blue,
        ),
        child: Text('Drawer Header'),
      ),
      ListTile(title: const Text('Item 1'), onTap: () {}),
      ListTile(title: const Text('Item 2'), onTap: () {}),
    ],
  ),
),
</t>
<t tx="swot.20221025095859.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('DrawerExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const DrawerExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221025114730.2">@language dart
@tabwidth -2
class PopupMenuButtonExample extends StatefulWidget {
  const PopupMenuButtonExample({super.key});

  @override
  State&lt;PopupMenuButtonExample&gt; createState() =&gt; _PopupMenuButtonExampleState();
}

class _PopupMenuButtonExampleState extends State&lt;PopupMenuButtonExample&gt; {
  @others
}

</t>
<t tx="swot.20221025114730.3">String title = 'PopupMenuButton';
String item1 = 'First item';
String item2 = 'Second item';
</t>
<t tx="swot.20221025114730.6">@override
Widget build(BuildContext context) {
  return ListTile(
    title: Text(title),
    trailing: PopupMenuButton(
      itemBuilder: (context) =&gt; [
        PopupMenuItem(
          value: item1,
          child: Text(item1),
        ),
        PopupMenuItem(
          value: item2,
          child: Text(item2),
        ),
      ],
      onSelected: (String newValue) {
        setState(() {
          title = newValue;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221025191831.1">PopupMenuButtonExample(),
Divider(),
</t>
<t tx="swot.20221025205925.1"></t>
<t tx="swot.20221025205946.1">class E extends StatelessWidget {
  const E({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoE(),
      ),
    );
  }
}

</t>
<t tx="swot.20221025205946.2">appBar: AppBar(
  title: const Text('Demo E'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221025211051.1">@language dart
@tabwidth -2
class DemoE extends StatefulWidget {
  const DemoE({super.key});

  @override
  State&lt;DemoE&gt; createState() =&gt; _DemoEState();
}

class _DemoEState extends State&lt;DemoE&gt; {
  @others
}

</t>
<t tx="swot.20221025211051.2">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221025211051.3">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221025211051.4">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),

</t>
<t tx="swot.20221025211157.1"></t>
<t tx="swot.20221026064030.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'e');
  },
  child: const Text('E'),
),

</t>
<t tx="swot.20221026073602.2">@language dart
@tabwidth -2
class ExpandedExample extends StatelessWidget {
  const ExpandedExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221026073602.3">@override
Widget build(BuildContext context) {
  return SizedBox(
    // width: double.infinity,
    height: 100.0,
    child: Column(
      children: [
        @others
      ],
    ),
  );
}
</t>
<t tx="swot.20221026193458.1">Expanded(
  flex: 2,
  child: Container(
    color: Colors.blue,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 1')),
  ),
),
</t>
<t tx="swot.20221026193703.1">Expanded(
  flex: 1,
  child: Container(
    color: Colors.orange,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 2')),
  ),
),
</t>
<t tx="swot.20221026193706.1">Expanded(
  flex: 3,
  child: Container(
    color: Colors.red,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 3')),
  ),
),
</t>
<t tx="swot.20221026194030.1">ExpandedExample(),
Divider(),
</t>
<t tx="swot.20221026200727.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'f');
  },
  child: const Text('F'),
),

</t>
<t tx="swot.20221026200827.1"></t>
<t tx="swot.20221026200827.2">class F extends StatelessWidget {
  const F({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return
    @others
    ;
  }
}
</t>
<t tx="swot.20221026200827.3">appBar: AppBar(
  title: const Text('Demo F'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221026200827.4">@language dart
@tabwidth -2
class DemoF extends StatefulWidget {
  const DemoF({super.key});

  @override
  State&lt;DemoF&gt; createState() =&gt; _DemoFState();
}

class _DemoFState extends State&lt;DemoF&gt; {
  @others
}

</t>
<t tx="swot.20221026200827.5">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221026200827.6">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221026200827.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),

</t>
<t tx="swot.20221026200827.9"></t>
<t tx="swot.20221027111458.2">@language dart
@tabwidth -2
class FlexibleExample extends StatelessWidget {
  const FlexibleExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221027111458.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027111807.1">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221027111848.1">Flexible(
  flex: 6,
  child: Container(
    height: 50, // flex takes no effect
    color: Colors.yellow,
  ),
),
Flexible(
  flex: 4,
  child: Container(
    height: 100, // flex takes no effect
    color: Colors.orange,
  ),
),
Flexible(
  flex: 2,
  child: Container(
    height: 200, // flex takes no effect
    color: Colors.red,
  ),
),
</t>
<t tx="swot.20221027112321.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('FlexibleExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FlexibleExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221027112522.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221027112522.3">appBar: AppBar(
  title: Text('FlexibleExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027112522.4">body:
@others
</t>
<t tx="swot.20221027113937.1">SafeArea(
  child:
  @others
)
</t>
<t tx="swot.20221027114010.2">Scaffold(
  @others
),

</t>
<t tx="swot.20221027114010.4">body: DemoF(),
</t>
<t tx="swot.20221027114010.6">@language dart
floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,

@language dart
floatingActionButton: FloatingActionButton(
  foregroundColor: Colors.tealAccent,
  backgroundColor: Colors.deepPurple.shade400,
  hoverColor: Colors.redAccent,
  splashColor: Colors.amberAccent,
  onPressed: () {},
  child: Icon(Icons.add),
),
</t>
<t tx="swot.20221027114210.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31367103752e">/*
@others
*/
@doc
https://www.flutterbeads.com/change-floating-action-button-color-in-flutter/
</t>
<t tx="swot.20221027115609.1">@language asciidoc
:nofooter:
.FormExample
image:image/FlutterWidget/FormExample1.png[,200]
image:image/FlutterWidget/FormExample2.png[,200]
</t>
<t tx="swot.20221027115627.2">@language dart
@tabwidth -2
class FormExample extends StatelessWidget {
  FormExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221027115627.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027115750.2">Scaffold(
  @others
)

</t>
<t tx="swot.20221027115750.3">appBar: AppBar(
  title: Text('FormExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027115750.4">body:
@others
</t>
<t tx="swot.20221027115911.1">Padding(
  padding: const EdgeInsets.all(8.0),
  child:
  @others
),
</t>
<t tx="swot.20221027115952.1">Form(
  key: _formKey,
  child: Column(
    children: [
      @others
    ],
  ),
),
</t>
<t tx="swot.20221027120023.1">final _formKey = GlobalKey&lt;FormState&gt;();
</t>
<t tx="swot.20221027121244.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('FormExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FormExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221027175533.2">@language dart
@tabwidth -2
class TextFormFieldExample extends StatefulWidget {
  const TextFormFieldExample({super.key});

  @override
  State&lt;TextFormFieldExample&gt; createState() =&gt; _TextFormFieldExampleState();
}

class _TextFormFieldExampleState extends State&lt;TextFormFieldExample&gt; {
  @others
}

</t>
<t tx="swot.20221027175533.3">List&lt;String&gt; titles = [
  '',
  '',
  '',
];
</t>
<t tx="swot.20221027175533.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221027180846.1">SingleChildScrollView(
  child:
      @others
),
</t>
<t tx="swot.20221027180945.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">Form(
  autovalidateMode: AutovalidateMode.always,
  @others
),
</t>
<t tx="swot.20221027182206.1">Column(
  mainAxisSize: MainAxisSize.min,
  children:
  @others
),
</t>
<t tx="swot.20221027182452.1">@language asciidoc
:nofooter:
.TextFormField
image::image/FlutterWidget/TextFormField.png[,300]
</t>
<t tx="swot.20221027182544.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('TextFormFieldExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const TextFormFieldExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221027183133.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221027183133.3">appBar: AppBar(
  title: Text('TextFormField'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027183133.4">body:
    @others
</t>
<t tx="swot.20221027192851.2">@language dart
@tabwidth -2
class AnimatedIconExample extends StatefulWidget {
  const AnimatedIconExample({super.key});

  @override
  State&lt;AnimatedIconExample&gt; createState() =&gt; _AnimatedIconExampleState();
}

class _AnimatedIconExampleState extends State&lt;AnimatedIconExample&gt;
    with TickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221027192851.3">bool _isPlay = false;
late AnimationController _controllerIcon;
</t>
<t tx="swot.20221027192851.4">@override
void initState() {
  _controllerIcon = AnimationController(
    duration: Duration(seconds: 1),
    vsync: this // use TickerProviderStateMixin
  );
  super.initState();
}

</t>
<t tx="swot.20221027192851.5">@override
void dispose() {
  _controllerIcon.dispose();
  super.dispose();
}

</t>
<t tx="swot.20221027192851.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027194101.1">GestureDetector(
  onTap: () {
    if (_isPlay == false) {
      _controllerIcon.forward(); // next icon
      _isPlay = true;
    } else {
      _controllerIcon.reverse(); // previous icon
      _isPlay = false;
    }
  },
  child:
  @others
),
</t>
<t tx="swot.20221027194101.2">@language dart
@tabwidth -2
AnimatedIcon(
  // play is the first icon
  // pause is the second icon
  icon: AnimatedIcons.play_pause,
  progress: _controllerIcon,
  size: 55,
),
</t>
<t tx="swot.20221027203033.1">@language yaml
name: all_in_one
description: A new Flutter project.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '&gt;=2.18.2 &lt;3.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  &lt;&lt; assets &gt;&gt;

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
</t>
<t tx="swot.20221027203224.1"># To add assets to your application, add an assets section, like this:
# assets:
#   - images/a_dot_burr.jpeg
#   - images/a_dot_ham.jpeg
assets:
  - assets/
</t>
<t tx="swot.20221027203431.2">@language dart
@tabwidth -2
class FadeInImageExample extends StatelessWidget {
  const FadeInImageExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221027203431.3">@override
Widget build(BuildContext context) {
  return Center(
    child: FadeInImage.assetNetwork(
      width: 100,
      height: 100,
      placeholder: 'assets/loading.gif',
      image:
          'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    ),
  );
}
</t>
<t tx="swot.20221027203755.1">FadeInImageExample(),
</t>
<t tx="swot.20221027212222.2">@language dart
@tabwidth -2
class FractionallySizedBoxExample extends StatelessWidget {
  const FractionallySizedBoxExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221027212222.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027212407.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221027212407.3">appBar: AppBar(
  title: Text('FractionallySizedBox'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027212407.4">body:
@others
</t>
<t tx="swot.20221027212916.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221027212959.1">FractionallySizedBox(
  widthFactor: 0.5,
  heightFactor: 0.5,
  child: Container(
  color: Colors.amberAccent,
  ),
),
</t>
<t tx="swot.20221027213439.1">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221027213559.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('FractionallySizedBox'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FractionallySizedBoxExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221028064229.2">@language dart
@tabwidth -2
class FutureBuilderExample extends StatefulWidget {
  const FutureBuilderExample({super.key});

  @override
  State&lt;FutureBuilderExample&gt; createState() =&gt; _FutureBuilderExampleState();
}

class _FutureBuilderExampleState extends State&lt;FutureBuilderExample&gt; {
  @others
}

</t>
<t tx="swot.20221028064229.3">Future&lt;String&gt; getData() async {
  await Future.delayed(
    const Duration(seconds: 1),
  );
  // throw 'Error';
  return 'Super!';
}

</t>
<t tx="swot.20221028064229.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028064815.1">FutureBuilder(
  future: getData(),
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const CircularProgressIndicator();
    }
    if (snapshot.hasError) {
      return Text(snapshot.error.toString());
    } else {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(snapshot.data.toString()),
          ElevatedButton(
            onPressed: () {
              setState(() {});
            },
            child: const Text('FutureBuilder Refresh'),
          ),
        ],
      );
    }
  },
)
</t>
<t tx="swot.20221028065632.1">FutureBuilderExample(),
</t>
<t tx="swot.20221028070508.1"></t>
<t tx="swot.20221028070508.10">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221028070508.11">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),

</t>
<t tx="swot.20221028070508.17"></t>
<t tx="swot.20221028070508.2">class G extends StatelessWidget {
  const G({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return
    @others
    ;
  }
}
</t>
<t tx="swot.20221028070508.3">SafeArea(
  child:
  @others
)
</t>
<t tx="swot.20221028070508.4">Scaffold(
  @others
),

</t>
<t tx="swot.20221028070508.5">appBar: AppBar(
  title: const Text('Demo G'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221028070508.6">body: DemoG(),
</t>
<t tx="swot.20221028070508.7">floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
floatingActionButton: FloatingActionButton(
  onPressed: () {},
  backgroundColor: Colors.deepPurple.shade400,
  child: Icon(Icons.add),
),
</t>
<t tx="swot.20221028070508.8">@language dart
@tabwidth -2
class DemoG extends StatefulWidget {
  const DemoG({super.key});

  @override
  State&lt;DemoG&gt; createState() =&gt; _DemoGState();
}

class _DemoGState extends State&lt;DemoG&gt; {
  @others
}

</t>
<t tx="swot.20221028070508.9">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028084729.2">@language dart
@tabwidth -2
class GestureDetectorExample extends StatefulWidget {
  const GestureDetectorExample({super.key});

  @override
  State&lt;GestureDetectorExample&gt; createState() =&gt; _GestureDetectorExampleState();
}

class _GestureDetectorExampleState extends State&lt;GestureDetectorExample&gt; {
  @others
}

</t>
<t tx="swot.20221028084729.3">int _counter = 0;
</t>
<t tx="swot.20221028084729.6">@override
Widget build(BuildContext context) {
  return Center(
    child: GestureDetector(
      onTap: () {
        setState(() {
          _counter += 1;
        });
      },
      child: Container(
        height: 50,
        color: Colors.orangeAccent,
        child: Row(children: [
          const Text("GestureDetector"),
          Text(
            _counter.toString(),
            style: const TextStyle(fontSize: 40),
          ),
        ]),
      ),
    ),
  );
}
</t>
<t tx="swot.20221028085926.1">GestureDetectorExample(),
</t>
<t tx="swot.20221028090127.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'g');
  },
  child: const Text('G'),
),

</t>
<t tx="swot.20221028090546.1">SizedBox(height: 5.00),
</t>
<t tx="swot.20221028093414.2">@language dart
@tabwidth -2
class GridViewExample extends StatelessWidget {
  const GridViewExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221028093414.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028093753.1">GridView.builder(
  itemCount: 10,
  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
    crossAxisCount: 2,
  ),
  itemBuilder: (_, index) =&gt;
  @others
)

@doc
You can use this also, not use itemBuilder
GridView(
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),
  children: &lt;Widget&gt;[],
)
</t>
<t tx="swot.20221028095636.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('GridView'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; GridViewExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221028122703.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221028122703.3">appBar: AppBar(
  title: Text('GridView'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221028122703.4">body:
@others
</t>
<t tx="swot.20221028130417.2">@language dart
@tabwidth -2
class GridTileExample extends StatelessWidget {
  const GridTileExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221028130417.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028130528.1">Center(
  child:
  @others
),
</t>
<t tx="swot.20221028131344.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('GridTileExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; GridTileExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221028131715.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221028131715.3">appBar: AppBar(
  title: Text('GridTile'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221028131715.4">body:
@others
</t>
<t tx="swot.20221029070417.1">GridTile(
  header: const GridTileBar(
    backgroundColor: Colors.black45,
    leading: Icon(Icons.person),
    title: Text('Flutter App'),
    trailing: Icon(Icons.menu),
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    fit: BoxFit.cover,
  ),
  footer: const GridTileBar(
    backgroundColor: Colors.black45,
    leading: Icon(Icons.favorite),
  ),
),
</t>
<t tx="swot.20221029070636.1">  GridTile(
  header: Container(
    height: 40,
    color: Colors.black38,
    child: const Center(
      child: Text(
        'Header',
        style: TextStyle(color: Colors.white),
      ),
    ),
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    fit: BoxFit.cover,
  ),
  footer: Container(
    height: 40,
    color: Colors.black38,
    child: const Center(
      child: Text(
        'Footer',
        style: TextStyle(color: Colors.white),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221029070735.1">SizedBox(
  height: 400,
  width: 300,
  child:
  @others
),
</t>
<t tx="swot.20221029081545.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'i');
  },
  child: const Text('I'),
),

</t>
<t tx="swot.20221029081714.1"></t>
<t tx="swot.20221029081714.13"></t>
<t tx="swot.20221029081714.14">@language dart
@tabwidth -2
class InteractiveViewerExample extends StatefulWidget {
  const InteractiveViewerExample({super.key});

  @override
  State&lt;InteractiveViewerExample&gt; createState() =&gt;
      _InteractiveViewerExampleState();
}

class _InteractiveViewerExampleState extends State&lt;InteractiveViewerExample&gt; {
  @others
}

</t>
<t tx="swot.20221029081714.17">@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Tool'),
    ),
    backgroundColor: Colors.orangeAccent,
    body: InteractiveViewer(
      boundaryMargin: const EdgeInsets.all(
        double.infinity,
      ),
      child: Scaffold(
        appBar: AppBar(
          title: const Text('SwotApp'),
        ),
        body: Text('ALT + mouse zoom'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221029081714.2">class I extends StatelessWidget {
  const I({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoI(),
      ),
    );
  }
}

</t>
<t tx="swot.20221029081714.3">appBar: AppBar(
  title: const Text('Demo I'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221029081714.4">@language dart
@tabwidth -2
class DemoI extends StatefulWidget {
  const DemoI({super.key});

  @override
  State&lt;DemoI&gt; createState() =&gt; _DemoIState();
}

class _DemoIState extends State&lt;DemoI&gt; {
  @others
}

</t>
<t tx="swot.20221029081714.5">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029081714.6">SingleChildScrollView(
  child:
  @others
)
</t>
<t tx="swot.20221029081714.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221029081714.8">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('InteractiveViewerExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; InteractiveViewerExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221029090411.1">ListTile(
  title: const Text('Hero click'),
  trailing: const Hero(
    tag: 'tag-1',
    child: Icon(Icons.person),
  ),
  onTap: () =&gt; Navigator.of(context).push(
    MaterialPageRoute(
      builder: (context) =&gt; const HeroExample(),
    ),
  ),
),
</t>
<t tx="swot.20221029092751.2">@language dart
@tabwidth -2
class HeroExample extends StatelessWidget {
  const HeroExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221029092751.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029092810.1">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029092914.1">Hero(
  tag: 'tag-1',
  child: Container(
    color: Colors.orangeAccent,
    width: 100.0,
    height: 100.0,
  ),
),
</t>
<t tx="swot.20221029094712.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029094712.3">appBar: AppBar(
  title: Text('Hero'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029094712.4">body:
@others
</t>
<t tx="swot.20221029115307.2">@language dart
@tabwidth -2
class IgnorePointerExample extends StatefulWidget {
  const IgnorePointerExample({super.key});

  @override
  State&lt;IgnorePointerExample&gt; createState() =&gt; _IgnorePointerExampleState();
}

class _IgnorePointerExampleState extends State&lt;IgnorePointerExample&gt; {
  @others
}

</t>
<t tx="swot.20221029115307.3">bool ignore = false;
</t>
<t tx="swot.20221029115307.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221029115307.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221029115307.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029115522.1">Row(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221029115652.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: ignore ? Colors.red : Colors.green,
  ),
  onPressed: () {
    setState(() {
      ignore = !ignore;
    });
  },
  child: Text(
    ignore ? 'Blocked IgnorePointer' : 'Can press IgnorePointer',
  ),
),
</t>
<t tx="swot.20221029120401.1">IgnorePointer(
  ignoring: ignore,
  child: ElevatedButton(
    onPressed: () {},
    child: const Text('IgnorePointer'),
  ),
),
</t>
<t tx="swot.20221029121446.1">IgnorePointerExample(),
</t>
<t tx="swot.20221029122755.2">@language dart
@tabwidth -2
class IndexedStackExample extends StatefulWidget {
  const IndexedStackExample({super.key});

  @override
  State&lt;IndexedStackExample&gt; createState() =&gt; _IndexedStackExampleState();
}

class _IndexedStackExampleState extends State&lt;IndexedStackExample&gt; {
  @others
}

</t>
<t tx="swot.20221029122755.3">int index = 0;
</t>
<t tx="swot.20221029122755.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221029122755.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221029122755.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029123730.2">Padding(
  padding: const EdgeInsets.all(8.0),
  child:
  @others
)
</t>
<t tx="swot.20221029123925.2">Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221029124213.2">Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221029124242.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    setState(() {
      index = 0;
    });
  },
  child: const Text('0'),
),

</t>
<t tx="swot.20221029124327.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    setState(() {
      index = 1;
    });
  },
  child: const Text('1'),
),

</t>
<t tx="swot.20221029124328.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    setState(() {
      index = 2;
    });
  },
  child: const Text('2'),
),

</t>
<t tx="swot.20221029124503.1">IndexedStack(
  index: index,
  children: [
    Center(
      child: Image.network(
          'https://img1.baidu.com/it/u=2346614730,4149113350&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=300&amp;h=231'),
    ),
    Center(
      child: Image.network(
          'https://img0.baidu.com/it/u=3654949633,659950172&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=612'),
    ),
    Center(
      child: Image.network(
          'https://img0.baidu.com/it/u=2809418066,998395186&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=622'),
    ),
  ],
),
</t>
<t tx="swot.20221029125017.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  child: const Text('IndexedStackExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; IndexedStackExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221029125202.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029125202.3">appBar: AppBar(
  title: Text('IndexedStack'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029125202.4">body:
@others
</t>
<t tx="swot.20221029130827.2">@language dart
@tabwidth -2
class ListViewExample extends StatelessWidget {
  const ListViewExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221029130827.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029130915.1"></t>
<t tx="swot.20221029131000.1"></t>
<t tx="swot.20221029131010.1"></t>
<t tx="swot.20221029132335.1">ListView.separated(
  separatorBuilder: (BuildContext context, int index) =&gt; const Divider(color: Colors.white),
  itemCount: 5,
  itemBuilder: (BuildContext context, int index) {
    return
    @others
    ;
  },
),
</t>
<t tx="swot.20221029132948.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(context,
        MaterialPageRoute(builder: (context) =&gt; ListViewExample()));
  },
  child: const Text('ListView'),
),

</t>
<t tx="swot.20221029133516.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029133516.3">appBar: AppBar(
  title: Text('ListView'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029133516.4">body:
@others
</t>
<t tx="swot.20221029133717.1">ListTile(
  tileColor: Colors.orangeAccent,
  leading: const Icon(Icons.person),
  title: const Text('Flutter App'),
  trailing: const Icon(Icons.menu),
  onTap: () {},
)
</t>
<t tx="swot.20221029134319.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'n');
  },
  child: const Text('N'),
),

</t>
<t tx="swot.20221029134405.1"></t>
<t tx="swot.20221029134405.14"></t>
<t tx="swot.20221029134405.2">class N extends StatelessWidget {
  const N({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        @others
        body: DemoN(),
      ),
    );
  }
}

</t>
<t tx="swot.20221029134405.3">appBar: AppBar(
  title: const Text('Demo N'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221029134405.4">@language dart
@tabwidth -2
class DemoN extends StatefulWidget {
  const DemoN({super.key});

  @override
  State&lt;DemoN&gt; createState() =&gt; _DemoNState();
}

class _DemoNState extends State&lt;DemoN&gt; {
  @others
}

</t>
<t tx="swot.20221029134405.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221029134405.6">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221029134405.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221029140231.2">@language dart
@tabwidth -2
class NavigationBarExample extends StatefulWidget {
  const NavigationBarExample({super.key});

  @override
  State&lt;NavigationBarExample&gt; createState() =&gt; _NavigationBarExampleState();
}

class _NavigationBarExampleState extends State&lt;NavigationBarExample&gt; {
  @others
}

</t>
<t tx="swot.20221029140231.3">int currentIndex = 0;

static const List body = [
  Icon(Icons.home, size: 50),
  Icon(Icons.search, size: 50),
  Icon(Icons.person, size: 50),
];
</t>
<t tx="swot.20221029140231.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221029140231.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221029140231.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029141046.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029141046.3">appBar: AppBar(
  title: Text('NavigationBar'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029141046.4">body: Center(
  child: body.elementAt(currentIndex),
),

</t>
<t tx="swot.20221029141046.5">bottomNavigationBar: NavigationBar(
  destinations: const [
    NavigationDestination(
      label: 'Home',
      icon: Icon(Icons.home),
    ),
    NavigationDestination(
      label: 'Menu',
      icon: Icon(Icons.menu),
    ),
    NavigationDestination(
      label: 'Profile',
      icon: Icon(Icons.person),
    ),
  ],
  selectedIndex: currentIndex,
  onDestinationSelected: (int index) {
    setState(() {
      currentIndex = index;
    });
  },
),
</t>
<t tx="swot.20221029141845.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; NavigationBarExample(),
      ),
    );
  },
  child: const Text('NavigationBarExample'),
),

</t>
<t tx="swot.20221029142534.2">@language dart
@tabwidth -2
class StackExample extends StatelessWidget {
  const StackExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221029142534.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029142627.1">Stack(
  children: [
    Center(
      child: Image.network(
        'https://img0.baidu.com/it/u=3512755295,746862310&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=236&amp;h=500',
        width: 500,
      ),
    ),
    Center(
      child: Image.network(
        'https://img1.baidu.com/it/u=695618151,2431461217&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=350&amp;h=250',
        width: 200,
      ),
    ),
  ],
)
</t>
<t tx="swot.20221029142715.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221029142715.3">appBar: AppBar(
  title: Text('Stack'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029142715.4">body:
    @others
</t>
<t tx="swot.20221029142815.2">Center(
  child:
      @others
),
</t>
<t tx="swot.20221029143324.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StackExample(),
      ),
    );
  },
  child: const Text('StackExample'),
),

</t>
<t tx="swot.20221029144530.2">@language dart
@tabwidth -2
class StepperExample extends StatefulWidget {
  const StepperExample({super.key});

  @override
  State&lt;StepperExample&gt; createState() =&gt; _StepperExampleState();
}

class _StepperExampleState extends State&lt;StepperExample&gt; {
  @others
}

</t>
<t tx="swot.20221029144530.3">int _currentStep = 0;
</t>
<t tx="swot.20221029144530.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221029144530.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221029144530.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029144924.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221029144924.3">appBar: AppBar(
  title: Text('Stepper'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029144924.4">body:
    @others
</t>
<t tx="swot.20221029144954.2">Center(
  child:
      @others
),
</t>
<t tx="swot.20221029145033.1">Stepper(
  @others
  // type: StepperType.horizontal,
  currentStep: _currentStep,

  onStepTapped: (int newIndex) {
    setState(() {
      _currentStep = newIndex;
    });
  },
  onStepContinue: () {
    if (_currentStep != 2) {
      setState(() {
        _currentStep += 1;
      });
    }
  },
  onStepCancel: () {
    if (_currentStep != 0) {
      setState(() {
        _currentStep -= 1;
      });
    }
  },
),
</t>
<t tx="swot.20221029190037.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StepperExample(),
      ),
    );
  },
  child: const Text('StepperExample'),
),

</t>
<t tx="swot.20221029191553.1">steps: [
  Step(
    isActive: _currentStep == 0,
    title: const Text('Step 1'),
    content: const Text(
      'Information for step 1',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
  Step(
    isActive: _currentStep == 1,
    title: const Text('Step 2'),
    content: const Text(
      'Information for step 2',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
  Step(
    isActive: _currentStep == 2,
    title: const Text('Step 3'),
    content: const Text(
      'Information for step 3',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
],
</t>
<t tx="swot.20221029211533.2">@language dart
@tabwidth -2
class StreamBuilderExample extends StatefulWidget {
  const StreamBuilderExample({super.key});

  @override
  State&lt;StreamBuilderExample&gt; createState() =&gt; _StreamBuilderExampleState();
}

class _StreamBuilderExampleState extends State&lt;StreamBuilderExample&gt; {
  @others
}

</t>
<t tx="swot.20221029211533.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029211743.1">@language dart
@tabwidth -2
Stream&lt;int&gt; generateStream = (() async* {
  await Future&lt;void&gt;.delayed(const Duration(seconds: 2));
  yield 1;
  await Future&lt;void&gt;.delayed(const Duration(seconds: 1));
  yield 2;
  // throw 'An error occured';  // test After show 1, Error displayed
  await Future&lt;void&gt;.delayed(const Duration(seconds: 1));
  yield 3;
})();

</t>
<t tx="swot.20221029212803.2">Center(
  child:
      @others
),
</t>
<t tx="swot.20221029212812.1">StreamBuilder(
  stream: generateStream,
  initialData: 0,
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const CircularProgressIndicator.adaptive();
    }
    if (snapshot.hasError) {
      return const Text('Error');
    } else {
      return Text(
        snapshot.data.toString(),
        style: const TextStyle(fontSize: 40),
      );
    }
  },
),
</t>
<t tx="swot.20221029213808.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StreamBuilderExample(),
      ),
    );
  },
  child: const Text('StreamBuilderExample'),
),
</t>
<t tx="swot.20221029213944.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221029213944.3">appBar: AppBar(
  title: Text('StreamBuilder'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029213944.4">body:
    @others
</t>
<t tx="swot.20221029215403.2">@language dart
@tabwidth -2
class SwitchExample extends StatefulWidget {
  const SwitchExample({super.key});

  @override
  State&lt;SwitchExample&gt; createState() =&gt; _SwitchExampleState();
}

class _SwitchExampleState extends State&lt;SwitchExample&gt; {
  @others
}

</t>
<t tx="swot.20221029215403.3">bool isSwitched = false;
</t>
<t tx="swot.20221029215403.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221029215403.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221029215403.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029215500.2">Center(
  child:
      @others
);
</t>
<t tx="swot.20221029215505.1">Switch(
  value: isSwitched,
  onChanged: (value) {
    setState(() {
      isSwitched = value;
    });
  },
)
</t>
<t tx="swot.20221029215656.1">SwitchExample(),
</t>
<t tx="swot.20221029220227.2">@language dart
@tabwidth -2
class TabPageSelectorExample extends StatefulWidget {
  const TabPageSelectorExample({super.key});

  @override
  State&lt;TabPageSelectorExample&gt; createState() =&gt; _TabPageSelectorExampleState();
}

class _TabPageSelectorExampleState extends State&lt;TabPageSelectorExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221029220227.3">late final TabController controller;
int _index = 0;
</t>
<t tx="swot.20221029220227.4">@override
void initState() {
  super.initState();
  controller = TabController(
    length: tabPageSelectorWidgets.length,
    initialIndex: _index,
    vsync: this,
  );
}

</t>
<t tx="swot.20221029220227.5">@override
void dispose() {
  controller.dispose();
  super.dispose();
}

</t>
<t tx="swot.20221029220227.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029220342.1">List&lt;Widget&gt; tabPageSelectorWidgets = const [
  Icon(Icons.home, size: 80),
  Icon(Icons.settings, size: 80),
  Icon(Icons.person, size: 80),
];

</t>
<t tx="swot.20221029221243.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221029221243.3">appBar: AppBar(
  title: Text('TabPageSelector'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029221243.4">body:
    @others
</t>
<t tx="swot.20221029221243.6">floatingActionButton: ButtonBar(
  children: [
    FloatingActionButton.small(
      onPressed: () {
        (_index != tabPageSelectorWidgets.length - 1)
        ? _index++
        : _index = 0;
        controller.animateTo(_index);
      },
      hoverElevation: 0,
      elevation: 0,
      child: const Icon(Icons.navigate_next),
    ),
  ],
),
</t>
<t tx="swot.20221029221337.1">Stack(
  alignment: Alignment.center,
  children: [
    TabBarView(
      controller: controller, // TabController
      children: tabPageSelectorWidgets,
    ),
    Positioned(
      bottom: 40,
      child: TabPageSelector(
        controller: controller, // TabController
        color: Colors.black38,
      ),
    ),
  ],
),
</t>
<t tx="swot.20221029222412.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; TabPageSelectorExample(),
      ),
    );
  },
  child: const Text('TabPageSelector'),
),

</t>
<t tx="swot.20221029230649.2">@language dart
@tabwidth -2
class TabBarExample extends StatelessWidget {
  const TabBarExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221029230649.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221029230800.1">DefaultTabController(
  length: 3,
  child:
      @others
);
</t>
<t tx="swot.20221029230841.2">Scaffold(
  @others
),
</t>
<t tx="swot.20221029230841.3">appBar: AppBar(
  title: Text('TabBar'),
  bottom:
      @others
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029230841.4">body:
    @others
</t>
<t tx="swot.20221029231559.1">TabBarView(
  children: [
    Container(
      color: Colors.orangeAccent,
      child: const Icon(Icons.home),
    ),
    Container(
      color: Colors.redAccent,
      child: const Icon(Icons.settings),
    ),
    Container(
      color: Colors.orangeAccent,
      child: const Icon(Icons.person),
    ),
  ],
)
</t>
<t tx="swot.20221029232032.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; TabBarExample(),
      ),
    );
  },
  child: const Text('TabBarExample'),
),

</t>
<t tx="swot.20221029234453.2">@language dart
@tabwidth -2
class PageViewExample extends StatefulWidget {
  const PageViewExample({super.key});

  @override
  State&lt;PageViewExample&gt; createState() =&gt; _PageViewExampleState();
}

class _PageViewExampleState extends State&lt;PageViewExample&gt; {
  @others
}

</t>
<t tx="swot.20221029234453.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029234534.1">PageView(
  // physics: const NeverScrollableScrollPhysics(),
  // scrollDirection: Axis.vertical,  // default is Axis.horizontal
  controller: controller,
  onPageChanged: (index) {
    print('Page ${index + 1}');
  },
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221029234605.1">Container(
  color: Colors.orangeAccent,
  child: const Center(
    child: Text(
      'Page 1',
      style: TextStyle(fontSize: 100),
    ),
  ),
),
</t>
<t tx="swot.20221029234724.1">Container(
  color: Colors.redAccent,
  child: const Center(
    child: Text(
      'Page 2',
      style: TextStyle(fontSize: 100),
    ),
  ),
),
</t>
<t tx="swot.20221029234725.1">Container(
  color: Colors.blueGrey,
  child: const Center(
    child: Text(
      'Page 3',
      style: TextStyle(fontSize: 100),
    ),
  ),
),
</t>
<t tx="swot.20221029234843.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; PageViewExample(),
      ),
    );
  },
  child: const Text('PageViewExample'),
),

</t>
<t tx="swot.20221029235310.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029235310.3">appBar: AppBar(
  title: Text('PageViewExample'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    @others
  ],
),
</t>
<t tx="swot.20221029235310.4">body:
@others
</t>
<t tx="swot.20221029235922.2">@language dart
@tabwidth -2
class PositionedExample extends StatelessWidget {
  const PositionedExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221029235922.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221030081223.2">Center(
  child:
  @others
),
</t>
<t tx="swot.20221030081235.1">Stack(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221030081313.1">Positioned(
  left: 20,
  top: 20,
  child: Image.network(
    'https://img0.baidu.com/it/u=3216067279,1683207701&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=250&amp;h=238',
    width: 250,
  ),
),
</t>
<t tx="swot.20221030081540.1">Positioned(
  left: 60,
  top: 120,
  child: Image.network(
    'https://img2.baidu.com/it/u=3325552638,2237228879&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=260&amp;h=298',
    width: 250,
  ),
),
</t>
<t tx="swot.20221030081542.1">Positioned(
  left: 100,
  top: 220,
  child: Image.network(
    'https://img1.baidu.com/it/u=3146473707,3528165124&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=307&amp;h=298',
    width: 250,
  ),
),
</t>
<t tx="swot.20221030082123.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; PositionedExample(),
      ),
    );
  },
  child: const Text('PositionedExample'),
),
</t>
<t tx="swot.20221030082723.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221030082723.3">appBar: AppBar(
  title: Text('PositionedExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030082723.4">body:
@others
</t>
<t tx="swot.20221030083029.1"></t>
<t tx="swot.20221030083241.2">@language dart
@tabwidth -2
class RadioListTileExample extends StatefulWidget {
  const RadioListTileExample({super.key});

  @override
  State&lt;RadioListTileExample&gt; createState() =&gt; _RadioListTileExampleState();
}

class _RadioListTileExampleState extends State&lt;RadioListTileExample&gt; {
  @others
}

</t>
<t tx="swot.20221030083241.3">String currentOption = radioListTileOptions[0];
</t>
<t tx="swot.20221030083241.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221030083241.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221030083241.6">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221030083721.2">Column(
  mainAxisSize: MainAxisSize.min,
  children: [
    @others
  ],
)

</t>
<t tx="swot.20221030083736.1">RadioListTile(
  title: const Text('Option 1'),
  value: radioListTileOptions[0],
  groupValue: currentOption,
  onChanged: (value) {
    setState(() {
      currentOption = value.toString();
    });
  },
),
</t>
<t tx="swot.20221030084017.1">RadioListTile(
  title: const Text('Option 2'),
  value: radioListTileOptions[1],
  groupValue: currentOption,
  onChanged: (value) {
    setState(() {
      currentOption = value.toString();
    });
  },
),
</t>
<t tx="swot.20221030084137.1">RadioListTileExample(),
</t>
<t tx="swot.20221030084432.1">List&lt;String&gt; radioListTileOptions = ['Option 1', 'Option 2'];

</t>
<t tx="swot.20221030172700.2">@language dart
@tabwidth -2
class RefreshIndicatorExample extends StatefulWidget {
  const RefreshIndicatorExample({super.key});

  @override
  State&lt;RefreshIndicatorExample&gt; createState() =&gt;
      _RefreshIndicatorExampleState();
}

class _RefreshIndicatorExampleState extends State&lt;RefreshIndicatorExample&gt; {
  @others
}

</t>
<t tx="swot.20221030172700.3">List&lt;String&gt; items = [
  "Item 1",
  "Item 2",
];
</t>
<t tx="swot.20221030172700.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221030172700.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221030172700.6">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221030173047.1">RefreshIndicator(
  color: Colors.white,
  backgroundColor: Colors.orangeAccent,
  onRefresh: () async {
    await Future.delayed(const Duration(seconds: 1));
    int nextItem = items.length + 1;
    setState(() {
      items.add("Item $nextItem");
    });
  },
  child: ListView.builder(
    padding: const EdgeInsets.all(5),
    itemCount: items.length,
    itemBuilder: ((context, index) =&gt;
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListTile(
          title: Text(items[index]),
          tileColor: Colors.white24,
        ),
      )
    ),
  ),
),
</t>
<t tx="swot.20221030181409.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; RefreshIndicatorExample(),
      ),
    );
  },
  child: const Text('RefreshIndicatorExample'),
),

</t>
<t tx="swot.20221030182420.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221030182420.3">appBar: AppBar(
  title: Text('RefreshIndicatorExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030182420.4">body:
    @others
</t>
<t tx="swot.20221030205049.2">@language dart
@tabwidth -2
class RotatedBoxExample extends StatelessWidget {
  const RotatedBoxExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030205049.3">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221030205124.1">const RotatedBox(
  // change this
  quarterTurns: 1,
  // quarterTurns: 2,
  child: FlutterLogo(size: 60),
)
</t>
<t tx="swot.20221030205503.1">RotatedBoxExample(),
</t>
<t tx="swot.20221030210033.2">@language dart
@tabwidth -2
class SelectableTextExample extends StatefulWidget {
  const SelectableTextExample({super.key});

  @override
  State&lt;SelectableTextExample&gt; createState() =&gt; _SelectableTextExampleState();
}

class _SelectableTextExampleState extends State&lt;SelectableTextExample&gt; {
  @others
}

</t>
<t tx="swot.20221030210033.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030210100.1">Text(
  selectedText,
  style: _styleBlue,
),
TextSelectionTheme(
  data: const TextSelectionThemeData(
    selectionColor: Colors.yellow,
  ),
  child: SelectableText(
    _selectableText,
    style: _style,
    onSelectionChanged: (selection, cause) {
      setState(() {
        selectedText = _selectableText.substring(
          selection.start,
          selection.end,
        );
      });
    },
  ),
),
</t>
<t tx="swot.20221030210255.1">SelectableTextExample(),
</t>
<t tx="swot.20221030210547.2">@language dart
@tabwidth -2
class SliderExample extends StatefulWidget {
  const SliderExample({super.key});

  @override
  State&lt;SliderExample&gt; createState() =&gt; _SliderExampleState();
}

class _SliderExampleState extends State&lt;SliderExample&gt; {
  @others
}

</t>
<t tx="swot.20221030210547.3">double _currentSliderValue = 20;
</t>
<t tx="swot.20221030210547.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030211118.1">Slider(
  value: _currentSliderValue,
  max: 100,
  divisions: 5,
  label: _currentSliderValue.round().toString(),
  onChanged: (double value) {
    setState(() {
      _currentSliderValue = value;
    });
  },
);
</t>
<t tx="swot.20221030211748.1">SliderExample(),
</t>
<t tx="swot.20221030212509.2">@language dart
@tabwidth -2
class SnackBarExample extends StatelessWidget {
  const SnackBarExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030212509.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030212550.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('Flutter App'),
        action: SnackBarAction(
          label: 'Undo',
          onPressed: () {},
        ),
      ),
    );
  },
  child: const Text('Show SnackBar'),
);

</t>
<t tx="swot.20221030212913.1">SnackBarExample(),
</t>
<t tx="swot.20221030213345.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'v');
  },
  child: const Text('V'),
),

</t>
<t tx="swot.20221030213442.1"></t>
<t tx="swot.20221030213518.1"></t>
<t tx="swot.20221030213518.12"></t>
<t tx="swot.20221030213518.2">class V extends StatelessWidget {
  const V({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: const DemoV(),
    );
  }
}

</t>
<t tx="swot.20221030213518.3">appBar: AppBar(
  title: const Text('Demo V'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221030213518.4">@language dart
@tabwidth -2
class DemoV extends StatefulWidget {
  const DemoV({super.key});

  @override
  State&lt;DemoV&gt; createState() =&gt; _DemoVState();
}

class _DemoVState extends State&lt;DemoV&gt; {
  @others
}

</t>
<t tx="swot.20221030213518.5">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030213518.6">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221030213518.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221030222244.2">@language dart
@tabwidth -2
class VisibilityExample extends StatefulWidget {
  const VisibilityExample({super.key});

  @override
  State&lt;VisibilityExample&gt; createState() =&gt; _VisibilityExampleState();
}

class _VisibilityExampleState extends State&lt;VisibilityExample&gt; {
  @others
}

</t>
<t tx="swot.20221030222244.3">bool isVisible = true;
</t>
<t tx="swot.20221030222244.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221030222244.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221030222244.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030222322.2">Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    @others
  ],
);
</t>
<t tx="swot.20221030222414.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    setState(() {
      isVisible = !isVisible;
    });
  },
  child: const Text('Show/Hide Visibility'),
),

</t>
<t tx="swot.20221030222619.1">Visibility(
  visible: isVisible,
  child: Image.network(
    'https://img2.baidu.com/it/u=11150005,537174686&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=435&amp;h=500',
    width: 100,
  ),
),
</t>
<t tx="swot.20221030222854.1">VisibilityExample(),
</t>
<t tx="swot.20221030223324.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'w');
  },
  child: const Text('W'),
),
</t>
<t tx="swot.20221030223524.1"></t>
<t tx="swot.20221030223524.2">class W extends StatelessWidget {
  const W({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: const DemoW(),
    );
  }
}

</t>
<t tx="swot.20221030223524.3">appBar: AppBar(
  title: const Text('Demo W'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221030223524.4">@language dart
@tabwidth -2
class DemoW extends StatefulWidget {
  const DemoW({super.key});

  @override
  State&lt;DemoW&gt; createState() =&gt; _DemoWState();
}

class _DemoWState extends State&lt;DemoW&gt; {
  @others
}

</t>
<t tx="swot.20221030223524.5">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030223524.6">SingleChildScrollView(
  child:
      @others
);
</t>
<t tx="swot.20221030223524.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221030223524.9"></t>
<t tx="swot.20221030223719.2">@language dart
@tabwidth -2
class WrapExample extends StatelessWidget {
  const WrapExample({Key? key}) : super(key: key);
  @others
}
</t>
<t tx="swot.20221030223719.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030223755.2">Center(
  child:
      @others
),
</t>
<t tx="swot.20221030223816.1">Wrap(
  spacing: 10.0,
  runSpacing: 40.0,
  children: List.generate(
    10,
    (index) =&gt; const Chip(
      avatar: CircleAvatar(
        backgroundColor: Colors.orangeAccent,
        child: Icon(Icons.person),
      ),
      label: Text('SwotPP'),
    ),
  ),
)
</t>
<t tx="swot.20221030224243.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; WrapExample(),
      ),
    );
  },
  child: const Text('WrapExample'),
),

</t>
<t tx="swot.20221030224541.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221030224541.3">appBar: AppBar(
  title: Text('WrapExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030224541.4">body:
    @others
</t>
<t tx="swot.20221030224821.2">@language dart
@tabwidth -2
class SafeAreaExample extends StatelessWidget {
  const SafeAreaExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030224821.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221030224837.1">Text(
  'Swotpp App',
  style: TextStyle(fontSize: 30),
)
</t>
<t tx="swot.20221030225013.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; SafeAreaExample(),
      ),
    );
  },
  child: const Text('SafeAreaExample'),
),

</t>
<t tx="swot.20221030225147.1">SafeArea(
child:
    @others
);
</t>
<t tx="swot.20221030225430.2">@language dart
@tabwidth -2
class LayoutBuilderExample extends StatelessWidget {
  const LayoutBuilderExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030225430.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221030225455.1">LayoutBuilder(
  builder: (BuildContext context, BoxConstraints constraints) {
    if (constraints.maxWidth &gt; 600) {
      return Center(
        child: Image.network(
          'https://img1.baidu.com/it/u=2393225502,1254584585&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500',
        ),
      );
    } else {
      return const Center(
        child: Text('Screen under 600'),
      );
    }
  },
),
</t>
<t tx="swot.20221030230436.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; LayoutBuilderExample(),
      ),
    );
  },
  child: const Text('LayoutBuilderExample'),
),

</t>
<t tx="swot.20221030230818.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221030230818.3">appBar: AppBar(
  title: Text('LayoutBuilderExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030230818.4">body:
@others
</t>
<t tx="swot.20221030231220.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.pushNamed(context, 'p');
  },
  child: const Text('P'),
),

</t>
<t tx="swot.20221030231300.1"></t>
<t tx="swot.20221030231300.11"></t>
<t tx="swot.20221030231300.2">class O extends StatelessWidget {
  const O({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: DemoO(),
    );
  }
}

</t>
<t tx="swot.20221030231300.4">@language dart
@tabwidth -2
class DemoO extends StatefulWidget {
  const DemoO({super.key});

  @override
  State&lt;DemoO&gt; createState() =&gt; _DemoOState();
}

class _DemoOState extends State&lt;DemoO&gt; {
  @others
}

</t>
<t tx="swot.20221030231300.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221030231300.6">SingleChildScrollView(
  child:
  @others
);
</t>
<t tx="swot.20221030231300.7">Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
  @others
]),
</t>
<t tx="swot.20221030231748.1">appBar: AppBar(
  title: const Text('Demo O'),
  centerTitle: true,

  // leading: IconButton(
  // icon: const Icon(Icons.menu),
  // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: () {},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0, // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221030231950.2">@language dart
@tabwidth -2
class OrientationBuilderExample extends StatelessWidget {
  const OrientationBuilderExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030231950.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221030232043.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221030232043.3">appBar: AppBar(
  title: Text('OrientationBuilderExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030232043.4">body:
@others
</t>
<t tx="swot.20221030232118.1">OrientationBuilder(
  builder: (context, orientation) {
    if (orientation == Orientation.portrait) {
      return const Center(
        child: Text('Portrait'),
      );
    } else {
      return const Center(
        child: Text('Landscape'),
      );
    }
  },
),
</t>
<t tx="swot.20221030232506.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; OrientationBuilderExample(),
      ),
    );
  },
  child: const Text('OrientationBuilderExample'),
),

</t>
<t tx="swot.20221030232847.2">@language dart
@tabwidth -2
class OverflowBarExample extends StatelessWidget {
  const OverflowBarExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030232847.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221030233137.2">Padding(
  padding: const EdgeInsets.all(8.0),
  child:
  @others
  )

</t>
<t tx="swot.20221030233211.1">OverflowBar(
  spacing: 8,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221030233258.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {},
  child: const Text('linux'),
),

</t>
<t tx="swot.20221030233342.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {},
  child: const Text('javascript'),
),

</t>
<t tx="swot.20221030233342.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {},
  child: const Text('flutter'),
),

</t>
<t tx="swot.20221030233533.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; OverflowBarExample(),
      ),
    );
  },
  child: const Text('OverflowBarExample'),
),
</t>
<t tx="swot.20221030233721.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221030233721.3">appBar: AppBar(
  title: Text('OverflowBarExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221030233721.4">body:
@others
</t>
<t tx="swot.20221030233809.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {},
  child: const Text('python'),
),

</t>
<t tx="swot.20221030233843.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {},
  child: const Text('dart'),
),

</t>
<t tx="swot.20221030234221.2">@language dart
@tabwidth -2
class FittedBoxExample extends StatelessWidget {
  const FittedBoxExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221030234221.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221030234303.2" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d33307103752e">Center(
  child:
  @others
)
</t>
<t tx="swot.20221031063239.2">Container(
  // height: 25,
  // width: 100,
  // width: 300,
  width: double.infinity,
  color: Colors.orangeAccent,
  child:
  @others
),
</t>
<t tx="swot.20221031063757.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FittedBoxExample(),
      ),
    );
  },
  child: const Text('FittedBoxExample'),
),

</t>
<t tx="swot.20221031064454.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221031064454.3">appBar: AppBar(
  title: Text('FittedBoxExample'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221031064454.4">body:
@others
</t>
<t tx="swot.20221031070048.1">const FittedBox(
  child: Text(
    'This is a pretty long text',
    style: TextStyle(color: Colors.black),
  ),
),
</t>
<t tx="swot.20221031070602.2">@language dart
@tabwidth -2
class ExpansionTileExample extends StatefulWidget {
  const ExpansionTileExample({super.key});

  @override
  State&lt;ExpansionTileExample&gt; createState() =&gt; _ExpansionTileExampleState();
}

class _ExpansionTileExampleState extends State&lt;ExpansionTileExample&gt; {
  @others
}

</t>
<t tx="swot.20221031070602.3">bool _customIcon = false;
</t>
<t tx="swot.20221031070602.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221031073139.1">ExpansionTile(
  title: const Text('Expansion Tile -- custom icon'),
  trailing: Icon(
    _customIcon ? Icons.arrow_drop_down_circle : Icons.arrow_drop_down,
  ),
  children: const [
    ListTile(
      title: Text('This is tile number 2'),
    ),
  ],
  onExpansionChanged: (bool expanded) {
    setState(() {
      _customIcon = expanded;
    });
  },
),
</t>
<t tx="swot.20221031073947.1">ExpansionTileExample(),
Divider(),
</t>
<t tx="swot.20221031074310.1">ExpansionTile(
  title: const Text('Expansion Tile -- basic icon'),
  // trailing: Icon(
  // _customIcon ? Icons.arrow_drop_down_circle : Icons.arrow_drop_down,
  // ),
  children: const [
    ListTile(
      title: Text('This is tile number 2'),
    ),
    ListTile(
      title: Text('This is tile number 3'),
    ),
  ],
  onExpansionChanged: (bool expanded) {
    // setState(() {
    // _customIcon = expanded;
    // });
  },
),
</t>
<t tx="swot.20221031074359.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221031074605.1">ExpansionTile(
  title: const Text('Expansion Tile -- basic icon'),
  onExpansionChanged: (bool expanded) {
    // setState(() {
    // _customIcon = expanded;
    // });
  },
  controlAffinity: ListTileControlAffinity.leading,
  // leading: const Icon(Icons.info),
  // trailing: Icon(
  // _customIcon ? Icons.arrow_drop_down_circle : Icons.arrow_drop_down,
  // ),
  children: const [
    ListTile(
      title: Text('This is tile number 2'),
    ),
  ], // icon location
),
</t>
<t tx="swot.20221031082929.2">@language dart
@tabwidth -2
class CupertinoSlidingSegmentedControlExample extends StatefulWidget {
  const CupertinoSlidingSegmentedControlExample({super.key});

  @override
  State&lt;CupertinoSlidingSegmentedControlExample&gt; createState() =&gt;
      _CupertinoSlidingSegmentedControlExampleState();
}

class _CupertinoSlidingSegmentedControlExampleState
    extends State&lt;CupertinoSlidingSegmentedControlExample&gt; {
  @others
}

</t>
<t tx="swot.20221031082929.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221031083017.1">int? _sliding = 0;
</t>
<t tx="swot.20221031083051.1">CupertinoSlidingSegmentedControl(
  groupValue: _sliding,
  onValueChanged: (int? newValue) {
    setState(() { _sliding = newValue; });
  },
  children: {
    0: Text('Text 0'),
    1: Text('Text 1'),
    2: Text('Text 2'),
  },
)
</t>
<t tx="swot.20221031083344.1">CupertinoSlidingSegmentedControlExample(),
Divider(),
</t>
<t tx="swot.20221031114906.1"></t>
<t tx="swot.20221031114947.2">@language dart
@tabwidth -2
class SearchDelegateExample extends StatefulWidget {
  const SearchDelegateExample({super.key});

  @override
  State&lt;SearchDelegateExample&gt; createState() =&gt; _SearchDelegateExampleState();
}

class _SearchDelegateExampleState extends State&lt;SearchDelegateExample&gt; {
  @others
}

</t>
<t tx="swot.20221031114947.3"></t>
<t tx="swot.20221031114947.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221031115107.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221031115107.3">appBar: AppBar(
  title: Text('SearchDelegateExample'),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    @others
  ],
),
</t>
<t tx="swot.20221031115107.4">body: null,
</t>
<t tx="swot.20221031115310.2">IconButton(
  icon: Icon(Icons.search),
  onPressed: () {
    showSearch(
      // call search
      context: context,
      delegate: CustomSearchDelegate(),
    );
  },
),
</t>
<t tx="swot.20221031115636.1">class CustomSearchDelegate extends SearchDelegate {
  List&lt;String&gt; searchTerms = [
    'Apple',
    'Banana',
    'Pear',
    'Watermelons',
    'Oranges',
    'Blueberries',
    'Strawberries',
    'Raspberries',
  ];

  @override
  List&lt;Widget&gt;? buildActions(BuildContext context) {
    return [
      IconButton(
        onPressed: () {
          query = '';
        },
        icon: const Icon(Icons.clear),
      )
    ];
  }

  @override
  Widget? buildLeading(BuildContext context) {
    return IconButton(
      onPressed: () {
        close(context, null);
      },
      icon: const Icon(Icons.arrow_back),
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    List&lt;String&gt; matchQuery = [];
    for (var fruit in searchTerms) {
      if (fruit.toLowerCase().contains(query.toLowerCase())) {
        matchQuery.add(fruit);
      }
    }
    return ListView.builder(
      itemCount: matchQuery.length,
      itemBuilder: (context, index) {
        var result = matchQuery[index];
        return ListTile(
          title: Text(result),
        );
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    List&lt;String&gt; matchQuery = [];
    for (var fruit in searchTerms) {
      if (fruit.toLowerCase().contains(query.toLowerCase())) {
        matchQuery.add(fruit);
      }
    }
    return ListView.builder(
      itemCount: matchQuery.length,
      itemBuilder: (context, index) {
        var result = matchQuery[index];
        return ListTile(
          title: Text(result),
        );
      },
    );
  }
}

</t>
<t tx="swot.20221031122837.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; SearchDelegateExample(),
      ),
    );
  },
  child: const Text('CustomSearchDelegate'),
),
</t>
<t tx="swot.20221031125101.1"></t>
<t tx="swot.20221031125115.1"></t>
<t tx="swot.20221031125205.1">很好的一篇实战文章 《Flutter之内置SearchDelegate -上》
https://mp.weixin.qq.com/s/eSVoyITisYYVqQI65agxxQ
</t>
<t tx="swot.20221031134256.2">@language dart
@tabwidth -2
class AdaptiveExample extends StatefulWidget {
  const AdaptiveExample({super.key});

  @override
  State&lt;AdaptiveExample&gt; createState() =&gt; _AdaptiveExampleState();
}

class _AdaptiveExampleState extends State&lt;AdaptiveExample&gt; {
  @others
}

</t>
<t tx="swot.20221031134256.6">@override
Widget build(BuildContext context) {
  return
      @others
      ;
}
</t>
<t tx="swot.20221031134345.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221031134345.3">appBar: AppBar(
  title: Text('.adaptive'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221031134345.4">body:
@others
</t>
<t tx="swot.20221031134422.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221031134446.2">Column(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221031134619.1">Slider.adaptive(
  onChanged: (double newValue) {},
  value: 1,
),
</t>
<t tx="swot.20221031135430.2">Padding(
  padding: const EdgeInsets.symmetric(vertical: 4),
  child: ListTile(
    tileColor: Colors.blue,
    textColor: Colors.white,
    iconColor: Colors.white,
    leading: const Icon(Icons.adb_outlined),
    title: const Text('Adaptive'),
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; AdaptiveExample(),
        ),
      );
    },
  ),
),
</t>
<t tx="swot.20221031140355.1">SwitchListTile.adaptive(
  title: const Text('Switch List tile'),
  onChanged: (bool newValue) {},
  value: true,
),
</t>
<t tx="swot.20221031140635.1">Switch.adaptive(
  onChanged: (bool newValue) {},
  value: true,
),
</t>
<t tx="swot.20221031140816.1">Icon(
  Icons.adaptive.share,
),
</t>
<t tx="swot.20221031140929.1">const CircularProgressIndicator.adaptive(),
</t>
<t tx="swot.20221031143139.2">@language dart
@tabwidth -2
class HeroExample2 extends StatelessWidget {
  const HeroExample2({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221031143139.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221031143419.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221031143419.3">appBar: AppBar(
  title: Text('HeroExample2'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221031143419.4">body:
@others
</t>
<t tx="swot.20221031143456.1">Hero(
  tag: 'tag-2',
  child: Image.asset('assets/fengjing.webp'),
),
</t>
<t tx="swot.20221031151733.1">GestureDetector(
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; HeroExample2(),
      ),
    );
  },
  child: ClipRRect(
    child: Hero(
      tag: 'tag-2',
      child: Image.asset(
        'assets/fengjing.webp',
        width: 100,
      ),
    ),
  ),
)
</t>
<t tx="swot.20221031171010.2">@language dart
@tabwidth -2
class SliveAppBarExample extends StatefulWidget {
  const SliveAppBarExample({super.key});

  @override
  State&lt;SliveAppBarExample&gt; createState() =&gt; _SliveAppBarExampleState();
}

class _SliveAppBarExampleState extends State&lt;SliveAppBarExample&gt; {
  @others
}

</t>
<t tx="swot.20221031171010.6">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221031171922.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221031171922.4">body:
    @others
</t>
<t tx="swot.20221031172002.1">CustomScrollView(
  slivers: [
    const SliverAppBar(
      title: Text('Flutter'),
      centerTitle: false,
      // pinned: true,
      floating: true,
      // snap: true,
      expandedHeight: 150.0,
      flexibleSpace: FlexibleSpaceBar(
        title: Text('Swot'),
        centerTitle: true,
      ),
    ),
    SliverList(
      delegate: SliverChildListDelegate([
        const Text(
          'SLIVER',
          style: TextStyle(fontSize: 600),
        ),
      ]),
    ),
  ],
),
</t>
<t tx="swot.20221031172540.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; SliveAppBarExample(),
      ),
    );
  },
  child: const Text('SliveAppBarExample'),
),
</t>
<t tx="swot.20221031182202.2">@language dart
@tabwidth -2
class RangeSliderExample extends StatefulWidget {
  const RangeSliderExample({super.key});

  @override
  State&lt;RangeSliderExample&gt; createState() =&gt; _RangeSliderExampleState();
}

class _RangeSliderExampleState extends State&lt;RangeSliderExample&gt; {
  @others
}

</t>
<t tx="swot.20221031182202.3">RangeValues values = const RangeValues(0.1, 0.5);
</t>
<t tx="swot.20221031182202.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221031182202.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221031182202.6">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221031182439.1">RangeLabels labels = RangeLabels(
  values.start.toString(),
  values.end.toString(),
);
</t>
<t tx="swot.20221031182617.2">return Center(
  child:
      @others
);
</t>
<t tx="swot.20221031182643.1">RangeSlider(
  values: values,
  divisions: 8,
  labels: labels,
  onChanged: (newValues) {
    setState(() {
      values = newValues;
    });
  },
),
</t>
<t tx="swot.20221031182942.1">RangeSliderExample(),
</t>
<t tx="swot.20221031193012.2">@language dart
@tabwidth -2
class AnimatedCrossFadeExample extends StatefulWidget {
  const AnimatedCrossFadeExample({super.key});

  @override
  State&lt;AnimatedCrossFadeExample&gt; createState() =&gt;
      _AnimatedCrossFadeExampleState();
}

class _AnimatedCrossFadeExampleState extends State&lt;AnimatedCrossFadeExample&gt; {
  @others
}

</t>
<t tx="swot.20221031193012.3">bool selected = false;
</t>
<t tx="swot.20221031193012.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221031193341.2">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221031193450.1">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 10.0),
  child: TextButton(
    onPressed: () {
      setState(() {
        selected = !selected;
      });
    },
    child: const Text(
      'AnimatedCrossFade (click)',
      // style: TextStyle(
        // color: Colors.black,
      // ),
    ),
  ),
),
</t>
<t tx="swot.20221031202343.2">@language dart
@tabwidth -2
class WillPopScopeExample extends StatelessWidget {
  const WillPopScopeExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221031202343.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221031202510.1">WillPopScope(
  onWillPop: () async {
    return false; // disable Android back button
    // return true;    // enable Android back button
  },
  child:
      @others
);
</t>
<t tx="swot.20221031202632.2">Scaffold(
  backgroundColor: Colors.blue,
  @others
),
</t>
<t tx="swot.20221031202632.3">appBar: AppBar(
  title: Text('WillPopScope'),
  leading: IconButton(
    onPressed: () {
      Navigator.pop(context);
    },
    icon: Icon(Icons.arrow_back_ios_new),
  ),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221031202632.4">body: const Center(),
</t>
<t tx="swot.20221031202945.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; WillPopScopeExample(),
      ),
    );
  },
  child: const Text('WillPopScopeExample'),
),

</t>
<t tx="swot.20221031213433.2">@language dart
@tabwidth -2
class GridPaperExample extends StatelessWidget {
  const GridPaperExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221031213433.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221031213506.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221031213506.3">appBar: AppBar(
  title: Text('GridPaper'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221031213506.4">body:
@others
</t>
<t tx="swot.20221031213547.1">const SizedBox(
  width: double.infinity,
  height: double.infinity,
  child:
  @others
)
</t>
<t tx="swot.20221031213653.1">GridPaper(
  color: Colors.pink,
  divisions: 2,
  interval: 200,
  subdivisions: 5,
)
</t>
<t tx="swot.20221031213940.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; GridPaperExample(),
      ),
    );
  },
  child: const Text('GridPaperExample'),
),

</t>
<t tx="swot.20221031220414.2">@language dart
@tabwidth -2
class TooltipExample extends StatelessWidget {
  const TooltipExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221031220414.3">@override
Widget build(BuildContext context) {
  return
      @others
}
</t>
<t tx="swot.20221031220639.2">Center(
  child:
      @others
);
</t>
<t tx="swot.20221031220649.1">Tooltip(
  message: 'Image message',
  child: Image.asset(
    width: 200,
    'assets/fengjing.webp',
  ),
)
</t>
<t tx="swot.20221031220908.1">TooltipExample(),
</t>
<t tx="swot.20221031222131.2">@language dart
@tabwidth -2
class SpreadOperatorExample extends StatelessWidget {
  const SpreadOperatorExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221031222131.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221031222154.1">List&lt;Widget&gt; imagesList = [
  Image.asset(
    'assets/fengjing.webp',
    height: 50,
  ),
  Image.asset(
    'assets/fengjing.webp',
    height: 50,
  ),
  Image.asset(
    'assets/fengjing.webp',
    height: 50,
  ),
];
</t>
<t tx="swot.20221031225000.2">return Scaffold(
  @others
);
</t>
<t tx="swot.20221031225000.3">appBar: AppBar(
  title: Text('SpreadOperator'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221031225000.4">body:
    @others
</t>
<t tx="swot.20221031225029.2">Column(
  children: [
    Image.asset('assets/avatar.webp'),
    SizedBox(height: 20.0),
    Column(children: imagesList),
    SizedBox(height: 20.0),
    ...imagesList, // same result with above Column
  ],
),
</t>
<t tx="swot.20221031225347.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; SpreadOperatorExample(),
      ),
    );
  },
  child: const Text('SpreadOperatorExample'),
),

</t>
<t tx="swot.20221031231919.2">@language dart
@tabwidth -2
class InkwellExample extends StatefulWidget {
  const InkwellExample({super.key});

  @override
  State&lt;InkwellExample&gt; createState() =&gt; _InkwellExampleState();
}

class _InkwellExampleState extends State&lt;InkwellExample&gt; {
  @others
}

</t>
<t tx="swot.20221031231919.3">Color boxColor = Colors.blue;
</t>
<t tx="swot.20221031231919.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221101062927.1">InkWell(
  onTap: () {
    setState(() { boxColor = Colors.blue; });
  },
  onDoubleTap: () {
    setState(() {
      boxColor = Colors.red;
    });
  },
  onLongPress: () {
    setState(() {
      boxColor = Colors.yellow;
    });
  },
  child: Ink(
    width: 100.0,
    height: 100.0,
    color: boxColor,
    child: const FlutterLogo(size: 100),
  ),
)
</t>
<t tx="swot.20221101063450.1">InkwellExample(),
</t>
<t tx="swot.20221101064424.1">@language dart
@tabwidth -2
class InteractiveViewerExample2 extends StatefulWidget {
  const InteractiveViewerExample2({super.key});

  @override
  State&lt;InteractiveViewerExample2&gt; createState() =&gt;
      _InteractiveViewerExample2State();
}

class _InteractiveViewerExample2State extends State&lt;InteractiveViewerExample2&gt; {
  @others
}

</t>
<t tx="swot.20221101064424.2">@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Scall'),
    ),
    body: Center(
      child: InteractiveViewer(
        maxScale: 5,
        child: Image.asset('assets/fengjing.webp'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221101065031.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
      ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; InteractiveViewerExample2(),
      ),
    );
  },
  child: const Text('InteractiveViewerExample2'),
),

</t>
<t tx="swot.20221101072329.1">String selectedText = '';

final String _selectableText = 'This is a selectable text';

final TextStyle _styleBlue = const TextStyle(
  fontSize: 25,
  fontWeight: FontWeight.bold,
  color: Colors.blue,
);

final TextStyle _style = const TextStyle(
  fontSize: 25,
  fontWeight: FontWeight.bold,
);
</t>
<t tx="swot.20221101072843.2">Column(
  children: [
    @others
  ],
);
</t>
<t tx="swot.20221101163948.2">@language dart
@tabwidth -2
class AnimatedContainerExample extends StatefulWidget {
  const AnimatedContainerExample({super.key});

  @override
  State&lt;AnimatedContainerExample&gt; createState() =&gt;
      _AnimatedContainerExampleState();
}

class _AnimatedContainerExampleState extends State&lt;AnimatedContainerExample&gt; {
  @others
}

</t>
<t tx="swot.20221101163948.3">bool selected = false;
</t>
<t tx="swot.20221101163948.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221101165100.1">GestureDetector(
  onTap: () {
    setState(() { selected = !selected; });
  },
  child: Center(
    child:
    @others
  ),
),
</t>
<t tx="swot.20221101165100.2">AnimatedContainer(
  width: selected ? 100.0 : 55.0,
  height: selected ? 55.0 : 40.0,
  color: selected ? Colors.blueGrey : Colors.blue.shade100,
  alignment: selected ? Alignment.topCenter : AlignmentDirectional.center,
  duration: const Duration(seconds: 1),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 25.0),
),
</t>
<t tx="swot.20221101175102.2">@language dart
@tabwidth -2
class AnimatedDefaultTextStyleExample extends StatefulWidget {
  const AnimatedDefaultTextStyleExample({super.key});

  @override
  State&lt;AnimatedDefaultTextStyleExample&gt; createState() =&gt;
      _AnimatedDefaultTextStyleExampleState();
}

class _AnimatedDefaultTextStyleExampleState
    extends State&lt;AnimatedDefaultTextStyleExample&gt; {
  @others
}

</t>
<t tx="swot.20221101175102.3">bool selected = false;
double _fontSize = 20;
Color _color = Colors.blue;
</t>
<t tx="swot.20221101175102.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221101175533.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221101175533.2">TextButton(
  onPressed: () {
    setState(() {
      _fontSize = selected ? 40 : 20;
      _color = selected ? Colors.blue : Colors.red;
      selected = !selected;
    });
  },
  child: const Text('AnimatedDefaultTextStyle'),
),
</t>
<t tx="swot.20221101175533.3">SizedBox(
  height: 40,
  child:
  @others
),
</t>
<t tx="swot.20221101175533.4">AnimatedDefaultTextStyle(
  duration: const Duration(milliseconds: 300),
  style: TextStyle(
    fontSize: _fontSize,
    color: _color,
    fontWeight: FontWeight.bold,
  ),
  child: const Text('Flutter'),
),
</t>
<t tx="swot.20221101181708.2">@language dart
@tabwidth -2
class AnimatedListExample extends StatefulWidget {
  const AnimatedListExample({super.key});

  @override
  State&lt;AnimatedListExample&gt; createState() =&gt; _AnimatedListExampleState();
}

class _AnimatedListExampleState extends State&lt;AnimatedListExample&gt; {
  @others
}

</t>
<t tx="swot.20221101181708.3">final _items = [];
final GlobalKey&lt;AnimatedListState&gt; _key = GlobalKey();

void _addItem() {
  _items.insert(0, "Item ${_items.length + 1}");
  _key.currentState!.insertItem(
    0,
    duration: const Duration(seconds: 1),
  );
}

void _removeItem(int index) {
  _key.currentState!.removeItem(
    index,
    (_, animation) {
      return SizeTransition(
        sizeFactor: animation,
        child: const Card(
          margin: EdgeInsets.all(10),
          color: Colors.red,
          child: ListTile(
            title: Text(
              "Deleted",
              style: TextStyle(fontSize: 14),
            ),
            visualDensity:
                VisualDensity(vertical: -3), // adjust listTile height
            dense: true,
          ),
        ),
      );
    },
    duration: const Duration(milliseconds: 600),
  );
  _items.removeAt(index);
}

</t>
<t tx="swot.20221101181708.4">@override
void initState() {
  super.initState();
}

</t>
<t tx="swot.20221101181708.5">@override
void dispose() {
  super.dispose();
}

</t>
<t tx="swot.20221101181708.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221101182340.2">AnimatedList(
  key: _key,
  shrinkWrap: true,
  initialItemCount: 0,
  padding: const EdgeInsets.all(10),
  itemBuilder: (context, index, animation) {
    @others
  },
),
</t>
<t tx="swot.20221101182340.3">return SizeTransition(
  key: UniqueKey(),
  sizeFactor: animation,
  child: Card(
    margin: const EdgeInsets.all(3),
    color: Colors.blue.shade100,
    child: ListTile(
      title: Text(
        _items[index],
        style: const TextStyle(fontSize: 14),
      ),
      trailing: IconButton(
        icon: const Icon(Icons.delete),
        onPressed: () {
          _removeItem(index);
        },
      ),
      visualDensity: const VisualDensity(vertical: -3), // adjust listTile height
      dense: true, // 高度会更加紧密，就是高度更小的意思
    ),
  ),
);
</t>
<t tx="swot.20221101182425.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221101193037.1">Stack(
  alignment: AlignmentDirectional.center,
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221101201546.1">AnimatedRotation(
  turns: turns,
  duration: const Duration(seconds: 1),
  child: const FlutterLogo(size: 30),
),
</t>
<t tx="swot.20221102101634.2">@language dart
@tabwidth -2
class DividerExample extends StatelessWidget {
  const DividerExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221102101634.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221102101649.1">const Divider(
  color: Colors.red,
  height: 20,
  thickness: 5,
  indent: 20,
  endIndent: 40,
),
</t>
<t tx="swot.20221102101920.2">Container(
  width: double.infinity,
  height: 200.0,
  color: Colors.orange,
),
</t>
<t tx="swot.20221102102110.1">Container(
  width: double.infinity,
  height: 200.0,
  color: Colors.orange,
),
</t>
<t tx="swot.20221102102136.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DividerExample(),
      ),
    );
  },
  child: const Text('DividerExample'),
),

</t>
<t tx="swot.20221102103050.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221102103902.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221102103902.3">appBar: AppBar(
  title: Text(''),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221102103902.4">body:
@others
</t>
<t tx="swot.20221110210618.1">showModalBottomSheet(
  context: context,
  // isScrollControlled: true,   // 可以滚动
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.vertical(
      top: Radius.circular(20),
    ),
  ),
  builder: (BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        // mainAxisSize: MainAxisSize.min,  // 收缩到最小
        children: [
          FlutterLogo(size: 120),
          FlutterLogo(size: 120),
          FlutterLogo(size: 120),
          FlutterLogo(size: 120),
          Center(
            child: ElevatedButton(
              child: const Text('Close'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
          ),
        ],
      ),
    );
    // return SizedBox(
      // height: 200,
      // child: Center(
        // child: ElevatedButton(
          // child: const Text('Close'),
          // onPressed: () {
            // Navigator.pop(context);
          // },
        // ),
      // ),
    // );
  },
);
</t>
<t tx="swot.20221110225224.1">Checkbox(
  value: isChecked,
  activeColor: Colors.orangeAccent,
  checkColor: Colors.red,
  tristate: true, // allow null value
  onChanged: (newBool) {
    setState(() {
      isChecked = newBool;
    });
  },
),
</t>
<t tx="swot.20221110225519.1">Theme(
  data: Theme.of(context).copyWith(
    unselectedWidgetColor: Colors.blue,
  ),
  child:
      @others
),
</t>
<t tx="swot.20221110233138.2">@language dart
@tabwidth -2
class DropDownButtonExample extends StatefulWidget {
  const DropDownButtonExample({super.key});

  @override
  State&lt;DropDownButtonExample&gt; createState() =&gt; _DropDownButtonExampleState();
}

class _DropDownButtonExampleState extends State&lt;DropDownButtonExample&gt;{
  @others
}

</t>
<t tx="swot.20221110233138.3">List&lt;String&gt; items = [
  'Item 1',
  'Item 2',
  'Item 3',
  'Item 4',
];

String? selectedItem = 'Item 1';
</t>
<t tx="swot.20221110233138.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221110233138.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221110233138.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221110233541.2">DropdownButton(
  // hint: const Text("Filter by"),
  value: selectedItem,
  items: items.map((item) =&gt; DropdownMenuItem&lt;String&gt;(
    value: item,
    child: Text(item, style: const TextStyle(fontSize: 20),
    ),
  )).toList(),
  onChanged: (item) {
    setState(() {
      selectedItem = item;
    });
  },
),
</t>
<t tx="swot.20221110233828.1">DropDownButtonExample(),
</t>
<t tx="swot.20221111000057.1">SizedBox(
  width: 240,
  child:
  @others
),
</t>
<t tx="swot.20221111000936.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221111001008.1">SizedBox(
  width: 240,
  child:
  @others
)
</t>
<t tx="swot.20221111001008.2">DropdownButtonFormField(
  decoration: InputDecoration(
    enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(width: 3, color: Colors.blue)
    )
  ),
  // hint: const Text("Filter by"),
  value: selectedItem,
  items: items.map((item) =&gt; DropdownMenuItem&lt;String&gt;(
    value: item,
    child: Text(item, style: const TextStyle(fontSize: 20),
    ),
  )).toList(),
  onChanged: (item) {
    setState(() {
      selectedItem = item;
    });
  },
),
</t>
<t tx="swot.20221111002547.1"></t>
<t tx="swot.20221111064532.1">final controller = PageController(initialPage: 1);  // Page 2
</t>
<t tx="swot.20221111064612.1">dispose() {
  super.dispose();
  controller.dispose();
}
</t>
<t tx="swot.20221111065157.2">IconButton(
  icon: const Icon(Icons.keyboard_arrow_left),
  onPressed: (){
    // controller.animateToPage(
      // 0,  // index 0 is the first page
      // duration: const Duration(seconds: 1),
      // curve: Curves.easeInOut,
    // );
    controller.previousPage(
      duration: const Duration(seconds: 1),
      curve: Curves.easeInOut,
    );
  },
),
</t>
<t tx="swot.20221111065339.1">IconButton(
  icon: const Icon(Icons.keyboard_arrow_right),
  onPressed: (){
    // controller.animateToPage(
      // 2,  // index 2 is the last page
      // duration: const Duration(seconds: 1),
      // curve: Curves.easeInOut,
    // );
    controller.nextPage(
      duration: const Duration(seconds: 1),
      curve: Curves.easeInOut,
    );
  },
),
</t>
<t tx="swot.20221111201811.2">@language dart
@tabwidth -2
class ExpansionPanelListExample extends StatefulWidget {
  const ExpansionPanelListExample({super.key});

  @override
  State&lt;ExpansionPanelListExample&gt; createState() =&gt; _ExpansionPanelListExampleState();
}

class _ExpansionPanelListExampleState extends State&lt;ExpansionPanelListExample&gt;{
  @others
}

</t>
<t tx="swot.20221111201811.3">static const loremIpsum = 'Officia elit et minim, est et lorem excepteur in et laborum velit. Id sit incididunt laborum fugiat ad est. Laborum non cillum ad in eu. Tempor aute consequat exercitation anim excepteur dolor nulla. Ea lorem ea proident consectetur proident.';

final List&lt;Item&gt; items = [
  Item(header: 'Panel 1', body: loremIpsum),
  Item(header: 'Panel 2', body: loremIpsum),
  Item(header: 'Panel 3', body: loremIpsum),
];
</t>
<t tx="swot.20221111201811.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221111201811.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221111201811.6">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221111202207.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221111202207.3">appBar: AppBar(
  title: Text('ExpansionPanelListExample'),
),
</t>
<t tx="swot.20221111202207.4">body:
@others
</t>
<t tx="swot.20221111202707.2">SingleChildScrollView(
  child:
  @others
),
</t>
<t tx="swot.20221111202728.1">ExpansionPanelList.radio(
  children: items.map(
    (item) =&gt; ExpansionPanelRadio(
      canTapOnHeader: true,
      value: item.header,  // has to be unique!
      headerBuilder: (context, isExpanded) =&gt; ListTile(
        title: Text(
          item.header,
          style: const TextStyle(fontSize: 20),
        ),
      ),
      body: ListTile(
        title: Text(
          item.body,
          style: const TextStyle(fontSize: 16),
        ),
      ),
    ),
  ).toList(),
),
</t>
<t tx="swot.20221111204125.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; ExpansionPanelListExample(),
      ),
    );
  },
  child: const Text('ExpansionPanelListExample'),
),

</t>
<t tx="swot.20221111204854.1">class Item {
  final String header;
  final String body;
  bool isExpanded;

  Item({
    required this.header,
    required this.body,
    this.isExpanded = false,
  });
}
</t>
<t tx="swot.20221111212929.1">// ExpansionPanelList.radio(
ExpansionPanelList(
  expansionCallback: (index, isExpanded) {
    setState(() {
      items[index].isExpanded = !isExpanded;
    });
  },
  children: items.map(
    // (item) =&gt; ExpansionPanelRadio(
    (item) =&gt; ExpansionPanel(
      canTapOnHeader: true,
      // value: item.header,  // has to be unique!
      isExpanded: item.isExpanded,
      headerBuilder: (context, isExpanded) =&gt; ListTile(
        title: Text(
          item.header,
          style: const TextStyle(fontSize: 20),
        ),
      ),
      body: ListTile(
        title: Text(
          item.body,
          style: const TextStyle(fontSize: 16),
        ),
      ),
    ),
  ).toList(),
),
</t>
<t tx="swot.20221111213642.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221111213817.1">Text(
  'Radio',
  style: TextStyle(fontSize: 20),
),
</t>
<t tx="swot.20221111214154.1">Text(
  'Multiple',
  style: TextStyle(fontSize: 20),
),
</t>
<t tx="swot.20221111214514.1">SizedBox(height: 20.0),
</t>
<t tx="swot.20221111222446.1">const TabBar(
  tabs: [
    Tab(text: 'Tab 1', icon: Icon(Icons.home)),
    Tab(text: 'Tab 2', icon: Icon(Icons.settings)),
    Tab(text: 'Tab 3', icon: Icon(Icons.person)),
  ],
),
</t>
<t tx="swot.20221112114354.1"></t>
<t tx="swot.20221112175512.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">TextFormField(
  @others
),
</t>
<t tx="swot.20221112175530.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">ElevatedButton(
  @others
  child: const Text('Validate'),
),
</t>
<t tx="swot.20221112180550.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">TextFormField(
  @others
),
</t>
<t tx="swot.20221112180604.1">const SizedBox(height: 10),
</t>
<t tx="swot.20221112180616.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">Card(
  child: Padding(
    padding: const EdgeInsets.all(8.0),
    child: Text(titles[index]),
  ),
),
</t>
<t tx="swot.20221112180710.1">List.generate(3, (int index) {
  return Padding(
    padding: const EdgeInsets.all(20.0),
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        @others
      ],
    ),
  );
}),
</t>
<t tx="swot.20221112181907.1">validator: (value) {
  if (value == null || value.isEmpty) {
    return 'Enter something';
  }
  return null;
},
</t>
<t tx="swot.20221112182043.1">onPressed: () {
  if (_formKey.currentState!.validate()) {
    @others
  }
},
</t>
<t tx="swot.20221112182228.1">ScaffoldMessenger.of(context).showSnackBar(
  const SnackBar(
    content: Text('Great!'),
  ),
);
</t>
<t tx="swot.20221112182519.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">onSaved: (String? value) {
  if (value != null) {
    titles[index] = value;
    print('index: $index');  // will print all index: 0,1,2
  }
},
</t>
<t tx="swot.20221112184234.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31312d31327103752e">// TextFormField changed then call onSaved()
onChanged: () {
  setState(() {
    Form.of(primaryFocus!.context!)!.save();
  });
},
</t>
<t tx="swot.20221112184709.1">child:
    @others
</t>
<t tx="swot.20221112195018.2">body: Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221112195040.1">const Divider(),
</t>
<t tx="swot.20221112195208.1">const Center(
  child: Padding(
    padding: EdgeInsets.all(5.0),
    child: Text(
      'Composite Example',
      style: TextStyle(fontSize: 18),
    ),
  ),
),
&lt;&lt; ListTile -- User Login &gt;&gt;
</t>
<t tx="swot.20221112195648.1">const Center(
  child: Padding(
    padding: EdgeInsets.all(5.0),
    child: Text(
      'Alphabetical Example',
      style: TextStyle(fontSize: 18),
    ),
  ),
),
</t>
<t tx="swot.20221112203550.1"></t>
<t tx="swot.20221112213542.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.person),
  title: const Text('User Login'),
  // trailing: const Icon(Icons.menu),
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; UserLoginExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221112223923.1"></t>
<t tx="swot.20221113174340.1">@language asciidoc
:nofooter:
https://www.flutterbeads.com/numeric-input-keyboard-in-flutter/

@language dart
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

@language asciidoc
.TextField: number &amp; decimal
image:image/FlutterWidget/number.png[,200]
image:image/FlutterWidget/decimal.png[,200]

.TextField: phone &amp; done
image:image/FlutterWidget/phone.png[,200]
image:image/FlutterWidget/done.png[,200]

.TextField: number/decimal/done &amp; phone
image:image/FlutterWidget/number2.png[,200]
image:image/FlutterWidget/phone2.png[,200]
</t>
<t tx="swot.20221113174434.2">@language dart
@tabwidth -2
class TextFieldExample extends StatelessWidget {
  const TextFieldExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221113174434.3">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221113180505.1">GestureDetector(
  onTap: () {
    FocusManager.instance.primaryFocus?.unfocus();
  },
  child:
  @others
);
</t>
<t tx="swot.20221113180641.1">Scaffold(
  @others
),
</t>
<t tx="swot.20221113180931.1">appBar: AppBar(
  centerTitle: true,
  title: Row(
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      // Image.asset(
        // 'assets/images/logo.png',
        // scale: 12,
      // ),
      // const SizedBox(
        // width: 10,
      // ),
      const Text(
        'FlutterBeads',
        style: TextStyle(color: Colors.black),
      ),
    ],
  ),
  backgroundColor: const Color(0xff6ae792),
),
</t>
<t tx="swot.20221113181008.1">@language dart
@tabwidth -2
body: Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221113181132.1">@language dart
@tabwidth -2
TextField(
  decoration: InputDecoration(labelText: 'Enter Number'),
  keyboardType: TextInputType.number,
  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
),
</t>
<t tx="swot.20221113181152.1">@language dart
@tabwidth -2
TextField(
  decoration: InputDecoration(labelText: 'Enter Decimal value'),
  keyboardType: TextInputType.numberWithOptions(decimal: true),
  inputFormatters: [
    FilteringTextInputFormatter.allow(RegExp('[0-9.,]')),
  ],
),
</t>
<t tx="swot.20221113181202.1">@language dart
@tabwidth -2
TextField(
  decoration: InputDecoration(labelText: 'Enter phone number'),
  keyboardType: TextInputType.phone,
),
</t>
<t tx="swot.20221113181209.1">@language dart
@tabwidth -2
TextField(
  decoration: InputDecoration(labelText: 'Enter Number'),
  keyboardType: defaultTargetPlatform == TargetPlatform.iOS
      ? TextInputType.numberWithOptions(decimal: true, signed: true)
      : TextInputType.number,
  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
),
</t>
<t tx="swot.20221113181739.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; TextFieldExample(),
      ),
    );
  },
  child: const Text('TextFieldExample'),
),
Divider(),
</t>
<t tx="swot.20221113194855.1">appBar: AppBar(
  title: const Text('Flutter Widgets'),
  centerTitle: true,
  elevation: 4.0,
),
</t>
<t tx="swot.20221114070028.1">const Center(
  child: Padding(
    padding: EdgeInsets.all(5.0),
    child: Text(
      'Functional Example',
      style: TextStyle(fontSize: 18),
    ),
  ),
),
&lt;&lt; ListTile -- Check Platform &gt;&gt;
SizedBox(height: 4.0),
&lt;&lt; ListTile -- IfElse Widget &gt;&gt;
SizedBox(height: 4.0),
&lt;&lt; Easy Steps to Close Keyboard &gt;&gt;
</t>
<t tx="swot.20221114130724.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.apple),
  title: const Text('Check Platform'),
  &lt;&lt; trailing &gt;&gt;
  onTap: () {},
),
</t>
<t tx="swot.20221114153230.1">trailing: PopupMenuButton(
  itemBuilder: (context) =&gt; [
    const PopupMenuItem(
      value: "checkPlatform",
      child: Text("Check Platform"),
    ),
    const PopupMenuItem(
      value: "checkTopLevelPlatform",
      child: Text("Check Top Level Platform"),
    ),
  ],
  onSelected: (String newValue) {
    if (newValue == "checkPlatform") {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; const CheckPlatformExample(),
        ),
      );
    } else if (newValue == "checkTopLevelPlatform") {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; const CheckTopLevelPlatformExample(),
        ),
      );
    }
  },
),
</t>
<t tx="swot.20221114192153.2">@language dart
@tabwidth -2
class TextExample extends StatelessWidget {
  const TextExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221114192153.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221114192542.1">GestureDetector(
  onTap: () {
    FocusManager.instance.primaryFocus?.unfocus();
  },
  child:
  @others
)
</t>
<t tx="swot.20221114193002.1">Scaffold(
  @others
),
</t>
<t tx="swot.20221114193106.1">appBar: AppBar(
  centerTitle: true,
  title: Row(
    // mainAxisAlignment: MainAxisAlignment.start,
    children: const [
      // Image.asset(
      //   'assets/images/logo.png',
      //   scale: 12,
      // ),
      FlutterLogo(),
      SizedBox(
        width: 10,
      ),
      Text(
        'TextExample',
        style: TextStyle(color: Colors.black),
      ),
    ],
  ),
  // backgroundColor: const Color(0xff6ae792),
),
</t>
<t tx="swot.20221114193135.1">body:
@others
</t>
<t tx="swot.20221114195006.2">@language dart
ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; TextExample(),
      ),
    );
  },
  child: const Text('TextExample'),
),

</t>
<t tx="swot.20221114195436.1">Row(
  children: const [
    Expanded(
      child: Text(
        'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
        style: TextStyle(fontSize: 58),
        softWrap: false,
        maxLines: 2,
        overflow: TextOverflow.ellipsis,
      ),
    ),
  ],
),

</t>
<t tx="swot.20221114195444.1">Row(
  children: const [
    Expanded(
      child: Text(
        'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
        style: TextStyle(fontSize: 58),
        softWrap: true,
        maxLines: 1,
        overflow: TextOverflow.fade,
      ),
    ),
  ],
),

</t>
<t tx="swot.20221114195452.1">@language dart
@tabwidth -2
Row(
  children: const [
    Expanded(
      child: FittedBox(
        child: Text(
          'It is a long established text.',
          style: TextStyle(fontSize: 58),
          softWrap: false,
          overflow: TextOverflow.ellipsis,
        ),
      ),
    ),
  ],
),
</t>
<t tx="swot.20221114202206.1">Column(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221114202534.2">const Divider(
  color: Colors.red,
  height: 20,
  thickness: 3,
  // indent: 20,
  // endIndent: 40,
),
</t>
<t tx="swot.20221114204245.1">Row(
  children: const [
    Expanded(
      child: Text(
        'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.',
        style: TextStyle(fontSize: 58),
        softWrap: true,
        maxLines: 2,
        overflow: TextOverflow.fade,
      ),
    ),
  ],
),

</t>
<t tx="swot.20221114214205.1">@language dart
@tabwidth -2
@others
</t>
<t tx="swot.20221114214307.1">@doc
@language asciidoc
Check Platform in Flutter The Right Way in 2022

https://www.flutterbeads.com/how-to-check-platform-in-flutter-the-right-way/#How-to-Check-Platform-in-Flutter

The platform in Fluter is determined by checking the `defaultTargetPlatform` and comparing it with `TargetPlatform` enum.

@language dart
import ‘package:flutter/foundation.dart’;

if (defaultTargetPlatform == TargetPlatform.android){
  // Android specific code
}
else if (defaultTargetPlatform == TargetPlatform.iOS){
  //iOS specific code
}
else {
  //web or desktop specific code
}

@language asciidoc
Call it

@c
@language dart
/*
&lt;&lt; ListTile -- Check Platform &gt;&gt;
*/

</t>
<t tx="swot.20221114214307.10">if (defaultTargetPlatform == TargetPlatform.android) ...[
  const Center(
    child: Text(
      'Android',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
]
</t>
<t tx="swot.20221114214307.11">else if (defaultTargetPlatform == TargetPlatform.iOS) ...[
  const Center(
    child: Text(
      'iOS',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
]
</t>
<t tx="swot.20221114214307.12">else ...[
  const Center(
    child: Text(
      'Web',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
]
</t>
<t tx="swot.20221114214307.13">@language dart
@tabwidth -2
class CheckTopLevelPlatformExample extends StatelessWidget {
  const CheckTopLevelPlatformExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221114214307.14">@override
Widget build(BuildContext context) {
  return
  @others
}

</t>
<t tx="swot.20221114214307.15">Scaffold(
  @others
);
</t>
<t tx="swot.20221114214307.16">appBar: AppBar(
  title: Text('CheckTopLevelPlatform'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221114214307.17">body:
@others
</t>
<t tx="swot.20221114214307.18">Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221114214307.19">if (PlatformDetails().isMobile) ...[
  const Center(
    child: Text(
      'Mobile',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
] else if (PlatformDetails().isDesktop) ...[
  const Center(
    child: Text(
      'Desktop',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
] else ...[
  const Center(
    child: Text(
      'Web',
      style: TextStyle(fontSize: 74, fontWeight: FontWeight.bold),
    ),
  )
]
</t>
<t tx="swot.20221114214307.20">class PlatformDetails {
  static final PlatformDetails _singleton = PlatformDetails._internal();

  factory PlatformDetails() {
    return _singleton;
  }

  PlatformDetails._internal();

  bool get isDesktop =&gt;
      defaultTargetPlatform == TargetPlatform.macOS ||
      defaultTargetPlatform == TargetPlatform.linux ||
      defaultTargetPlatform == TargetPlatform.windows;

  bool get isMobile =&gt;
      defaultTargetPlatform == TargetPlatform.iOS ||
      defaultTargetPlatform == TargetPlatform.android;
}
</t>
<t tx="swot.20221114214307.4">@language dart
@tabwidth -2
class CheckPlatformExample extends StatelessWidget {
  const CheckPlatformExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221114214307.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221114214307.6">Scaffold(
  @others
);
</t>
<t tx="swot.20221114214307.7">appBar: AppBar(
  title: Text('CheckPlatform'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221114214307.8">body:
@others
</t>
<t tx="swot.20221114214307.9">Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221114214940.1">import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
</t>
<t tx="swot.20221114222958.1">@language dart
@tabwidth -2
@others
</t>
<t tx="swot.20221114223110.1">@doc
@language asciidoc
:nofooter:
可以练习一下：
https://blog.csdn.net/wywinstonwy/article/details/122274788

.UserLogin
image::image/FlutterWidget/UserLoginOnWillPop.png[,300]

Call it:
@c
@language dart
/*
&lt;&lt; ListTile -- User Login &gt;&gt;
*/
</t>
<t tx="swot.20221114223110.10">Form(
  key: _formKey,
  @others
),
</t>
<t tx="swot.20221114223110.11">onWillPop: () async {
  return await showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('提示'),
        content: Text('确认退出吗？'),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context, false);
            },
            child: Text('取消')
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context, true);
            },
            child: Text('确定'),
          ),
        ],
      );
    },
  );
},
</t>
<t tx="swot.20221114223110.12">@language dart
@tabwidth -2
child: Column(
  children: [
  @others
  ],
),
</t>
<t tx="swot.20221114223110.13">@language dart
@tabwidth -2
TextFormField(
  autovalidateMode: AutovalidateMode.always,
  decoration: InputDecoration(hintText: '请输入账号'),
  onSaved: (value) {
    _account = value;
  },
  validator: (value) {
    RegExp reg = RegExp(r'^.{4}$');
    if (!reg.hasMatch(value!)) {
      return '账号最少4个字符';
    }
    return null;
  },
),
</t>
<t tx="swot.20221114223110.14">@language dart
@tabwidth -2
TextFormField(
  autovalidateMode: AutovalidateMode.always,
  decoration: InputDecoration(hintText: '请输入密码'),
  obscureText: true,
  onSaved: (value) {
    _pwd = value;
  },
  validator: (value) {
    return value!.length &gt;= 6 ? null : '密码最少6个字符';
  },
),
</t>
<t tx="swot.20221114223110.15">@language dart
@tabwidth -2
ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    var state = _formKey.currentState;
    if (state!.validate()) {
      state.save();
      _login(_account, _pwd);
    }
  },
  child: const Text('登录'),
),
</t>
<t tx="swot.20221114223110.3">@language dart
@tabwidth -2
class UserLoginExample extends StatefulWidget {
  const UserLoginExample({super.key});

  @override
  State&lt;UserLoginExample&gt; createState() =&gt; _UserLoginExampleState();
}

class _UserLoginExampleState extends State&lt;UserLoginExample&gt;{
  @others
}

</t>
<t tx="swot.20221114223110.4">String? _account;
String? _pwd;
final _formKey = GlobalKey&lt;FormState&gt;();
</t>
<t tx="swot.20221114223110.5">_login(account, pwd) {
  print('账号：$account\n密码：$pwd');
}
</t>
<t tx="swot.20221114223110.6">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221114223110.7">Scaffold(
  @others
);
</t>
<t tx="swot.20221114223110.8">appBar: AppBar(
  title: Text('UserLoginExample'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221114223110.9">body:
@others
</t>
<t tx="swot.20221114223555.1">import 'package:flutter/material.dart';
</t>
<t tx="swot.20221114225716.1">@language dart
@tabwidth -2
@others
</t>
<t tx="swot.20221114231710.1">import 'dart:ui';
import 'dart:math' as math;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
</t>
<t tx="swot.20221115092033.1">showDialog(
  context: context,
  builder: (context) =&gt;
  @others
);
</t>
<t tx="swot.20221115092033.2">@doc
@language asciidoc
:nofooter:
image::../image/AboutDialog.png[AboutDialog,240]
@c
@language dart
const AboutDialog(
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter App',
  applicationVersion: 'version 1.0.0',
  children: [
    Text('This is a text created by Flutter Mapp'),
  ],
),

</t>
<t tx="swot.20221115092046.1">Widget ppAboutDialog(context) {
  return ListTile(
    tileColor: Colors.blue,
    textColor: Colors.white,
    iconColor: Colors.white,
    leading: const Icon(Icons.info_outline),
    title: const Text('AboutDialog'),
    onTap: () {
      @others
    },
  );
}
</t>
<t tx="swot.20221115093118.1">Widget ppAboutListTile() {
  return
  @others
}
</t>
<t tx="swot.20221115093353.1">@doc
@language asciidoc
:nofooter:
https://www.flutterbeads.com/renderbox-was-not-laid-out/?[3 Ways to Fix RenderBox was not Laid Out in Flutter [2022]]

使用 SizedBox 可以解决上面报错的问题
@c
@language dart
const SizedBox(
  width: 200.0,
  height: 40.0,
  child:
  @others
);
</t>
<t tx="swot.20221115093740.1"></t>
<t tx="swot.20221115114822.1">Widget ppAbsorbPointer() {
  return
  @others
}
</t>
<t tx="swot.20221115115504.1">SizedBox(height: 5),
ppAboutDialog(context),
ppAboutListTile(),
ppAbsorbPointer(),
&lt;&lt; ListTile AdaptiveExample &gt;&gt;
ppAlertDialog(context),
ppAlign(),
ppAspectRatio(),
AutoCompleteExample(),
</t>
<t tx="swot.20221115115948.1">Widget ppAlertDialog(context) {
  return ListTile(
    tileColor: Colors.blue,
    textColor: Colors.white,
    iconColor: Colors.white,
    leading: const Icon(Icons.crisis_alert_outlined),
    title: const Text('AlertDialog'),
    onTap: () {
      @others
    },
  );
}
</t>
<t tx="swot.20221115120424.1">showDialog(
  context: context,
  builder: (context) =&gt;
      @others
);
</t>
<t tx="swot.20221115120424.2">AlertDialog(
  title: const Text('Flutter App'),
  content: const Text('This is the alert Dialog'),
  contentPadding: const EdgeInsets.all(20.0),
  actions: [
    TextButton(
      onPressed: () {
        Navigator.of(context).pop();
      },
      child: const Text('CANCEL'),
    ),
    TextButton(
      onPressed: () {
        Navigator.of(context).pop();
      },
      child: const Text('OK'),
    )
  ],
),
</t>
<t tx="swot.20221115120941.1">Padding(
  padding: const EdgeInsets.symmetric(vertical: 10.0),
  child:
    @others
);
</t>
<t tx="swot.20221115123329.1">Widget ppAlign() {
  return
  @others
  ;
}
</t>
<t tx="swot.20221115123410.1">Container(
  margin: const EdgeInsets.symmetric(vertical: 4.0),
  width: 55,
  height: 55,
  color: Colors.blue.shade100,
  child:
  @others
),
</t>
<t tx="swot.20221115123410.2">@doc
@language asciidoc
:nofooter:
image::../image/Align.png[Align,240]
@c
@language dart
const Align(
  alignment: Alignment.center,
  child: FlutterLogo(
    size: 20,
  ),
),
</t>
<t tx="swot.20221115125023.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221115125209.1">const Padding(
  padding: EdgeInsets.symmetric(horizontal: 18.0),
  child: Text('Align.center (only show here)'),
),
</t>
<t tx="swot.20221115131154.2">@language dart
@tabwidth -2
class AnimatedAlignExample extends StatefulWidget {
  const AnimatedAlignExample({super.key});

  @override
  State&lt;AnimatedAlignExample&gt; createState() =&gt; _AnimatedAlignExampleState();
}

class _AnimatedAlignExampleState extends State&lt;AnimatedAlignExample&gt;{
  @others
}

</t>
<t tx="swot.20221115131154.3">bool selected = false;
</t>
<t tx="swot.20221115131154.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221115131443.1">GestureDetector(
  onTap: () {
    setState(() {
      selected = !selected;
    });
  },
  child: Center(
    child: Container(
      width: 55.0,
      height: 55.0,
      color: Colors.blue.shade100,
      child:
      @others
    ),
  ),
),
</t>
<t tx="swot.20221115131443.2">AnimatedAlign(
  alignment: selected ? Alignment.topRight : Alignment.bottomLeft,
  duration: const Duration(milliseconds: 300),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221115132041.1">const Padding(
  padding: EdgeInsets.symmetric(horizontal: 18.0),
  child: Text('AnimatedAlign'),
),
</t>
<t tx="swot.20221115132124.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221115145639.1">@language dart
@tabwidth -2
class AnimatedBuilderExample extends StatefulWidget {
  const AnimatedBuilderExample({super.key});

  @override
  State&lt;AnimatedBuilderExample&gt; createState() =&gt; _AnimatedBuilderExampleState();
}

class _AnimatedBuilderExampleState extends State&lt;AnimatedBuilderExample&gt;
    with TickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221115145639.2">late AnimationController _controllerBuilder;
</t>
<t tx="swot.20221115145639.3">@override
void initState() {
  _controllerBuilder = AnimationController(
    duration: const Duration(seconds: 10), // 转一圈的时间
    vsync: this, // use TickerProviderStateMixin
  )..repeat(); // 10s 后重复

  super.initState();
}

</t>
<t tx="swot.20221115145639.4">@override
void dispose() {
  _controllerBuilder.dispose();
  super.dispose();
}

</t>
<t tx="swot.20221115145639.5">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221115145926.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221115150013.1">const Padding(
  padding: EdgeInsets.symmetric(horizontal: 18.0),
  child: Text('AnimatedBuilder'),
),
</t>
<t tx="swot.20221115150133.1">Container(
  width: 55.0,
  height: 55.0,
  margin: const EdgeInsets.symmetric(vertical: 5),
  // padding: const EdgeInsets.all(10),
  alignment: Alignment.center,
  color: Colors.blue.shade100,
  child:
  @others
),
</t>
<t tx="swot.20221115152731.1">AnimatedBuilder(
  animation: _controllerBuilder,
  child: const FlutterLogo(size: 30),
  builder: (BuildContext context, Widget? child) {
    return Transform.rotate(
      // scale &amp; translate can be used
      angle: _controllerBuilder.value * 2.0 * math.pi,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221115160357.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221115160421.1">const Padding(
  padding: EdgeInsets.symmetric(horizontal: 18.0),
  child: Text('AnimatedContainer'),
),
</t>
<t tx="swot.20221115161549.1">Container(
  width: 55.0,
  height: 55.0,
  margin: const EdgeInsets.symmetric(vertical: 5),
  // padding: const EdgeInsets.all(10),
  alignment: Alignment.center,
  color: Colors.blue.shade100,
  child:
  @others
),
</t>
<t tx="swot.20221115171856.1">const Padding(
  padding: EdgeInsets.symmetric(horizontal: 18.0),
  child: Text('AnimatedIcon'),
),
</t>
<t tx="swot.20221115171940.1">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221115190544.2">SizedBox(
  width: double.infinity,
  height: 55.0,
  child:
  @others
)
</t>
<t tx="swot.20221115194933.1">SizedBox(height: 200),
</t>
<t tx="swot.20221115195409.1">AnimatedAlignExample(),
AnimatedBuilderExample(),
AnimatedContainerExample(),
AnimatedCrossFadeExample(),
AnimatedDefaultTextStyleExample(),
AnimatedIconExample(),
AnimatedModalBarrierExample(),
AnimatedListExample(),
AnimatedOpacityExample(),
AnimatedPaddingExample(),
AnimatedPhysicalModelExample(),
AnimatedPositionedExample(),
AnimatedRotationExample(),
AnimatedSizeExample(),
AnimatedSwitcherExample(),
</t>
<t tx="swot.20221115200646.1">Padding(
  padding: const EdgeInsets.symmetric(vertical: 4),
  child: ListTile(
    tileColor: Colors.blue,
    textColor: Colors.white,
    iconColor: Colors.white,
    leading: const Icon(Icons.add),
    title: const Text('AnimatedList'),
    onTap: _addItem,
  ),
),
</t>
<t tx="swot.20221115202940.1">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 18),
  child:
  @others
),
</t>
<t tx="swot.20221115204946.1">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 5),
  child:
  @others
)
</t>
<t tx="swot.20221115205826.2">Row(
  mainAxisAlignment: MainAxisAlignment.start,
  children: [
  @others
  ],
),
</t>
<t tx="swot.20221115205935.2">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 5.0),
  child:
  @others
)
</t>
<t tx="swot.20221115213128.2">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 10.0),
  child:
  @others
)
</t>
<t tx="swot.20221115213615.2">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 18.0),
  child:
  @others
)
</t>
<t tx="swot.20221115213902.1">AnimatedSize(
  curve: Curves.easeIn,
  duration: const Duration(seconds: 1),
  child: FlutterLogo(size: _size),
),
</t>
<t tx="swot.20221115214248.2">Padding(
  padding: const EdgeInsets.symmetric(horizontal: 18.0),
  child:
  @others
)
</t>
<t tx="swot.20221115215710.1">Widget ppAspectRatio() {
  return Container(
    color: Colors.blue.shade100,
    alignment: Alignment.center,
    margin: const EdgeInsets.only(bottom: 5),
    width: double.infinity,
    height: 50,
    // height: 200,
    child: AspectRatio(
      aspectRatio: 16 / 9,
      child: Container(
        color: Colors.blue,
        alignment: Alignment.center,
        child: const Text(
          "AspecRatio 16/9",
          style: TextStyle(color: Colors.white)
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221115221134.2">Container(
  margin: EdgeInsets.symmetric(vertical: 5.0),
  child:
  @others
)
</t>
<t tx="swot.20221115221203.1">Autocomplete&lt;String&gt;(
  optionsBuilder: (TextEditingValue textEditingValue) {
    // user input value
    if (textEditingValue.text == '') {
      return const Iterable&lt;String&gt;.empty();
    }
    return listItems.where((String item) {
      return item.contains(textEditingValue.text.toLowerCase());
    });
  },
  onSelected: (String item) {
    print('The $item was selected');
  },
),
</t>
<t tx="swot.20221116181828.1"></t>
<t tx="swot.20221116181828.2">@language dart
@tabwidth -2
class CupertinoAppExample extends StatelessWidget {
  const CupertinoAppExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221116181828.3">@override
Widget build(BuildContext context) {
  return ElevatedButton(
    style: ElevatedButton.styleFrom(
        // backgroundColor: Colors.orangeAccent,
        ),
    child: const Text('CupertinoApp'),
    onPressed: () {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; const MyCupertinoApp(),
        ),
      );
    },
  );
}
</t>
<t tx="swot.20221116181828.4">@language dart
@tabwidth -2
class MyCupertinoApp extends StatelessWidget {
  const MyCupertinoApp({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221116181828.5">@override
Widget build(BuildContext context) {
  return const CupertinoApp(
    debugShowCheckedModeBanner: false,
    theme: CupertinoThemeData(
      brightness: Brightness.dark,
      scaffoldBackgroundColor: Color.fromARGB(255, 18, 32, 47),
      primaryColor: CupertinoColors.systemOrange,
    ),
    home: CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        middle: Text("Flutter App"),
      ),
      child: Center(
        child: Icon(CupertinoIcons.share),
      ),
    ),
  );
}
</t>
<t tx="swot.20221116181924.1"></t>
<t tx="swot.20221116181924.2">@language dart
@tabwidth -2
class ClipRectExample extends StatelessWidget {
  const ClipRectExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221116181924.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipRect(
      clipper: MyClipper2(),
      child: Container(
        width: 100,
        height: 100,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221116181924.4">class MyClipper2 extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return const Rect.fromLTWH(0, 0, 80, 80);
  }

  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}

</t>
<t tx="swot.20221116181957.1"></t>
<t tx="swot.20221116181957.2">@language dart
@tabwidth -2
class ClipPathExample extends StatelessWidget {
  const ClipPathExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221116181957.3">@override
Widget build(BuildContext context) {
  return ClipPath(
    clipper: MyClipper1(),
    child: Container(
      width: double.infinity,
      height: 100,
      color: const Color(0xFF142B46),
    ),
  );
}
</t>
<t tx="swot.20221116181957.4">class MyClipper1 extends CustomClipper&lt;Path&gt; {
  @override
  Path getClip(Size size) {
    return Path()
      ..lineTo(0, size.height)
      ..quadraticBezierTo(
        size.width / 4,
        size.height - 40,
        size.width / 2,
        size.height - 20,
      )
      ..quadraticBezierTo(
        3 / 4 * size.width,
        size.height,
        size.width,
        size.height - 30,
      )
      ..lineTo(size.width, 0);
  }

  @override
  bool shouldReclip(covariant CustomClipper&lt;Path&gt; oldClipper) {
    return false;
  }
}

</t>
<t tx="swot.20221116182028.1"></t>
<t tx="swot.20221116182028.2">@language dart
@tabwidth -2
class ClipOvalExample extends StatelessWidget {
  const ClipOvalExample({Key? key}) : super(key: key);
  @others
}

</t>
<t tx="swot.20221116182028.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipOval(
      clipper: CustomClip(), // change shape
      child: Container(
        width: 60,
        height: 60,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221116182028.4">class CustomClip extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return Rect.fromLTWH(0, 0, size.width - 10, size.height);
  }

  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}

</t>
<t tx="swot.20221116182847.1"></t>
<t tx="swot.20221116192205.1"></t>
<t tx="swot.20221116192440.1"></t>
<t tx="swot.20221116192626.1"></t>
<t tx="swot.20221116193019.1"></t>
<t tx="swot.20221116195736.1">@doc
@language asciidoc
Flutter if else: Top 3 ways you need to know in 2022 (Code)

https://www.flutterbeads.com/if-else-statement-in-flutter-widget/

</t>
<t tx="swot.20221116195958.1">@doc
@language asciidoc
A ternary operator takes three operands. The first one is a condition, the second is the expression if the condition is true, and the third one is the expression if the condition is false.

@language dart
(age &gt; 18) ? 'Eligible for license' : 'Not eligible'
</t>
<t tx="swot.20221116200016.1">@doc
Writing a conditional statement inside the method is preferable if you would like to produce clean code and none of the other options work for you.
</t>
<t tx="swot.20221116202858.1">@language dart
@tabwidth -2
class IfElseExample extends StatefulWidget {
  const IfElseExample({super.key});

  @override
  State&lt;IfElseExample&gt; createState() =&gt; _IfElseExampleState();
}

class _IfElseExampleState extends State&lt;IfElseExample&gt; {
  @others
}

</t>
<t tx="swot.20221116202858.10">PageView(
  // physics: const NeverScrollableScrollPhysics(),
  // scrollDirection: Axis.vertical,  // default is Axis.horizontal
  controller: controller,
  onPageChanged: (index) {
    print('Page ${index + 1}');
  },
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221116202858.12">@doc
@language asciidoc
The spread operator (…) is used to insert multiple values into a Collection. It was introduced in Dart 2.3. The spread operator must be inside the collection widget like Column, Row, etc.

</t>
<t tx="swot.20221116202858.2">final controller = PageController(initialPage: 0);  // Page 1
bool switchValue = false;
</t>
<t tx="swot.20221116202858.3">dispose() {
  super.dispose();
  controller.dispose();
}
</t>
<t tx="swot.20221116202858.4">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221116202858.5">Scaffold(
  @others
)
</t>
<t tx="swot.20221116202858.6">appBar: AppBar(
  title: const Text('IfElseExample'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    @others
  ],
),
</t>
<t tx="swot.20221116202858.7">IconButton(
  icon: const Icon(Icons.keyboard_arrow_left),
  onPressed: (){
    // controller.animateToPage(
      // 0,  // index 0 is the first page
      // duration: const Duration(seconds: 1),
      // curve: Curves.easeInOut,
    // );
    controller.previousPage(
      duration: const Duration(seconds: 1),
      curve: Curves.easeInOut,
    );
  },
),
</t>
<t tx="swot.20221116202858.8">IconButton(
  icon: const Icon(Icons.keyboard_arrow_right),
  onPressed: (){
    // controller.animateToPage(
      // 2,  // index 2 is the last page
      // duration: const Duration(seconds: 1),
      // curve: Curves.easeInOut,
    // );
    controller.nextPage(
      duration: const Duration(seconds: 1),
      curve: Curves.easeInOut,
    );
  },
),
</t>
<t tx="swot.20221116202858.9">body:
@others
</t>
<t tx="swot.20221116204444.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.pages_outlined),
  title: const Text('IfElse Widget (use PageView)'),
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; IfElseExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221116214910.1">@doc
This is another use case where we are showing multiple widgets in a column.
</t>
<t tx="swot.20221116215552.1">Widget getLockStatus(bool isLocked) {
  if (isLocked) {
    return const Icon(
      Icons.lock_outline,
      size: 200,
      color: Color(0xff6ae792),
    );
  } else {
    return const Icon(
      Icons.lock_open,
      size: 200,
      color: Colors.black,
    );
  }
}
</t>
<t tx="swot.20221117065613.2">Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221117065939.1">Center(
  child: switchValue
      ? Row(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: const [
            Text(
              '12',
              style: TextStyle(fontSize: 120),
            ),
            Icon(
              Icons.thumb_up,
              size: 180,
              color: Color(0xff6ae792),
            ),
          ],
        )
      : const Icon(
          Icons.thumb_up,
          size: 200,
          color: Colors.black,
        )
),
</t>
<t tx="swot.20221117065952.1">SwitchListTile.adaptive(
  title: const Text('Test if else by ternary ?:'),
  onChanged: (bool newValue) {
    setState(() {
      switchValue = newValue;
    });
  },
  value: switchValue,
),
</t>
<t tx="swot.20221117074820.10">    HeroExample
    HeroExample2

</t>
<t tx="swot.20221117074820.11">    IgnorePointerExample
    IndexedStackExample
    InkwellExample
    InteractiveViewerExample
    InteractiveViewerExample2

</t>
<t tx="swot.20221117074820.12">    LayoutBuilderExample
    LongPressDraggableExample
    ListViewExample

</t>
<t tx="swot.20221117074820.13">    MaterialBannerExample

</t>
<t tx="swot.20221117074820.14">    NavigationBarExample

</t>
<t tx="swot.20221117074820.15">    OrientationBuilderExample
    OverflowBarExample

</t>
<t tx="swot.20221117074820.16">    PageViewExample
    PopupMenuButtonExample
    PositionedExample
    PreferredSizeExample

</t>
<t tx="swot.20221117074820.17">    RadioListTileExample
    RangeSliderExample
    RefreshIndicatorExample
    ReorderableListViewExample  -- longPress
    RotatedBoxExample

</t>
<t tx="swot.20221117074820.18">    SafeAreaExample
    SearchDelegateExample
    SelectableTextExample
    SliderExample
    SliveAppBarExample
    SnackBarExample
    SpreadOperatorExample
    StackExample
    StepperExample
    StreamBuilderExample
    SwitchExample
    showDatePickerExample
    showDateRangePickerExample
    showTimePickerExample

</t>
<t tx="swot.20221117074820.19">    TabBarExample
    TableExample
    TextExample -- wrap long text  2022-11-14 21:08:39
    TextFieldExample
    TextFormFieldExample
    TabPageSelectorExample
    TooltipExample

</t>
<t tx="swot.20221117074820.2">This project is for main using Widgets.

&lt;img src="image/FlutterWidget/FlutterWidgets.png" width="30%" /&gt; &lt;img src="image/FlutterWidget/DemoA.png" width="30%" /&gt; &lt;img src="image/FlutterWidget/TextExample.png" width="30%" /&gt;

Using Literate Programming [leo-editor](https://github.com/leo-editor/leo-editor) tool to manage code structure.

&lt;img src="image/FlutterWidget/introduce.png" width="100%" /&gt;

</t>
<t tx="swot.20221117074820.20">    VisibilityExample

</t>
<t tx="swot.20221117074820.21">    WillPopScopeExample
    WrapExample

</t>
<t tx="swot.20221117074820.3">    AboutDialog
    AboutListTile
    AbsorbPointer -- include button can not be clicked
    AdaptiveExample
    AlertDialog
    Align
    AnimatedAlign
    AnimatedBuilder
    AnimatedContainer
    AnimatedCrossFade
    AnimatedDefaultTextStyle
    AnimatedIcon
    AnimatedList
    AnimatedModalBarrier
    AnimatedOpacity
    AnimatedPadding
    AnimatedPhysicalModel
    AnimatedPositioned
    AnimatedRotation
    AnimatedSize
    AnimatedSwitcher
    AppBar
    AspectRatio
    AutoComplete

</t>
<t tx="swot.20221117074820.4">    BackdropFilterExample
    BannerExample
    BaselineExample
    BlockSemanticsExample
    BottomNavigationBarExample
    BottomSheetExample
    BuilderExample

</t>
<t tx="swot.20221117074820.5">    CardExample
    CenterExample
    CheckboxExample
    CheckboxListTileExample
    ChipExample
    ChoiceChipExample
    CircleAvatarExample
    CircularProgressIndicatorExample
    ClipOvalExample
    ClipPathExample
    ClipRectExample
    ClipRRectExample
    CloseButtonExample
    ColoredBoxExample
    ColorFilteredExample
    ConstrainedBoxExample
    ContainerExample
    ColumnExample
    CupertinoActionSheetExample
    CupertinoAppExample
    CupertinoContextMenuExample  -- longPress
    CupertinoSlidingSegmentedControlExample

</t>
<t tx="swot.20221117074820.6">    DismissibleExample
    DividerExample
    DraggableScrollableExample
    DragTargetExample
    DrawerExample
    DropDownButtonExample

</t>
<t tx="swot.20221117074820.7">    ExpandedExample -- height in Expanded takes no effect
    ExpansionPanelListExample
    ExpansionTileExample

</t>
<t tx="swot.20221117074820.8">    FadeInImageExample
    FittedBoxExample
    FlexibleExample
    floatingActionButton
    FormExample
    FractionallySizedBoxExample
    FutureBuilderExample

</t>
<t tx="swot.20221117074820.9">    GestureDetectorExample
    GridPaperExample
    GridViewExample
    GridTileExample

</t>
<t tx="swot.20221117075103.1">SwitchListTile.adaptive(
  title: const Text('Test if else by spread operator'),
  onChanged: (bool newValue) {
    setState(() {
      switchValue = newValue;
    });
  },
  value: switchValue,
),
</t>
<t tx="swot.20221117075628.1">if (switchValue) ...[
  const Icon(
    Icons.comment,
    size: 200,
    color: Color(0xff6ae792),
  )
] else ...[
  const Icon(
    Icons.comment,
    size: 100,
    color: Colors.black,
  )
]
</t>
<t tx="swot.20221117075830.1">Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221117080420.1">SwitchListTile.adaptive(
  title: const Text('Test if else by spread operator'),
  onChanged: (bool newValue) {
    setState(() {
      switchValue = newValue;
    });
  },
  value: switchValue,
),
</t>
<t tx="swot.20221117080502.1">const Icon(
  Icons.thumb_up,
  size: 100,
  color: Colors.black,
),
if (switchValue) ...[
  const Icon(
    Icons.comment,
    size: 200,
    color: Color(0xff6ae792),
  )
],
</t>
<t tx="swot.20221117081152.1">SwitchListTile.adaptive(
  title: const Text('Test if else by method'),
  onChanged: (bool newValue) {
    setState(() {
      switchValue = newValue;
    });
  },
  value: switchValue,
),
</t>
<t tx="swot.20221117081206.1">Center(
  child: getLockStatus(switchValue),
),
</t>
<t tx="swot.20221117081341.2">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221117081630.1">Column(
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221117124850.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221117124850.3">appBar: AppBar(
  title: Text('CircleAvatar'),
  elevation: 0.0,
  centerTitle: true,
  actions: [],
),
</t>
<t tx="swot.20221117124850.4">body:
@others
</t>
<t tx="swot.20221117124927.1">CircleAvatar(
  radius: 40,
  backgroundColor: Colors.white,
  backgroundImage: AssetImage('assets/cubelogo.png'),  // local image
  onBackgroundImageError: (e, s){
    debugPrint('image issue, $e,$s');
  },
  // backgroundImage: NetworkImage("https://img1.baidu.com/it/u=4237790906,511339359&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=400&amp;h=400"),
  // child: Text(
  //   'Hello',
  //   style: TextStyle(color: Colors.red),
  // ),
),
</t>
<t tx="swot.20221117125122.2">Column(
  mainAxisAlignment: MainAxisAlignment.center,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221117130100.1">Container(
  width: double.infinity,
  padding: const EdgeInsets.only(top: 4.0),
  child:
      @others
),
</t>
<t tx="swot.20221117154500.1">CircleAvatar(
  radius: 50,
  backgroundColor: Colors.orangeAccent,
  child:
  @others
),
</t>
<t tx="swot.20221117164057.1">CircleAvatar(
  radius: 47,
  backgroundColor: Colors.white,
  child:
  @others
),
</t>
<t tx="swot.20221117182334.2">Scaffold(
  @others
);
</t>
<t tx="swot.20221117182334.3">appBar: AppBar(
  title: Text('ClipRRect'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221117182334.4">body:
@others
</t>
<t tx="swot.20221117182433.1">Center(
  child: ClipRRect(
    borderRadius: BorderRadius.circular(30),
    child: Image.network(
        'https://img1.baidu.com/it/u=3866320064,995069430&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500',
        width: 250),
  ),
),
</t>
<t tx="swot.20221117183726.1">ListTile(
  tileColor: Colors.blue,
  textColor: Colors.white,
  iconColor: Colors.white,
  leading: const Icon(Icons.pages_outlined),
  title: const Text('Easy Steps to Close Keyboard'),
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const CloseKeyboardExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221117184025.1">@doc
3 Easy Steps to Close Keyboard in Flutter with Code (2022)

https://www.flutterbeads.com/close-hide-keyboard-flutter/
</t>
<t tx="swot.20221117184127.2">@language dart
@tabwidth -2
class CloseKeyboardExample extends StatelessWidget {
  const CloseKeyboardExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221117184127.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221117192548.2">GestureDetector(
  onTap: () {
    FocusManager.instance.primaryFocus?.unfocus();
  },
  child:
  @others
)
</t>
<t tx="swot.20221117192608.2">Scaffold(
  @others
),
</t>
<t tx="swot.20221117192608.3">appBar: AppBar(
  title: const Text('Close Keyboard'),
  // leading: Icon(Icons.menu),
  elevation: 0.0,
  centerTitle: true,
  actions: const [
    Icon(Icons.settings),
  ],
),
</t>
<t tx="swot.20221117192608.4">body:
@others
</t>
<t tx="swot.20221117193206.2">Container(
  padding: const EdgeInsets.all(16),
  child:
  @others
),

</t>
<t tx="swot.20221117193340.1">const TextField(
  keyboardType: TextInputType.phone,
  decoration: InputDecoration(
    border: OutlineInputBorder(),
    labelText: 'Enter value'
  ),
),
</t>
<t tx="swot.20221118072547.1">@doc
@language asciidoc
There is no straightforward way to change the floating action button border color. So the idea is to NOT use the floating action button widget at all and use the combination of Material and InkWell widget. You create the FloatingActionButton looking like a widget and then change the border color.

@language dart
floatingActionButton: Container(
  height: 70,
  width: 70,
  child: Material(
    type: MaterialType.transparency,
    child: Ink(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.green, width: 3.0),
        color: Colors.greenAccent,
        shape: BoxShape.circle,
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(500.0),
        onTap: () {},
        child: Icon(
          Icons.add,
          //size: 50,
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221118072810.1">@doc
@language asciidoc
To change the shadow color of the floating action button, you can add the Container widget as a child widget and create a box decoration using the BoxShadow widget. While doing this make sure you set the elevation property to 0.

@language dart
floatingActionButton: FloatingActionButton(
  onPressed: () {},
  elevation: 0,
  child: Container(
    height: 70,
    width: 70,
    decoration: BoxDecoration(
      color: Colors.transparent,
      borderRadius: BorderRadius.all(Radius.circular(50)),
      boxShadow: [
        BoxShadow(
          color: Colors.redAccent.withOpacity(0.2),
          spreadRadius: 3,
          blurRadius: 3,
          offset: Offset(0, 3),
        ),
      ],
    ),
    child: Icon(Icons.add),
  ),
  backgroundColor: Colors.tealAccent,
  foregroundColor: Colors.black,
),
</t>
<t tx="swot.20221118073702.1"></t>
<t tx="swot.20221118073739.1"></t>
<t tx="swot.20221118073920.1">theme: ThemeData(
  @others
  // primarySwatch: Colors.blue,
  // fontFamily: 'SourceSansPro',
),
</t>
<t tx="swot.20221118074133.1">@doc
floatingActionButtonTheme: FloatingActionButtonThemeData(
  backgroundColor: Colors.amberAccent,
  foregroundColor: Colors.greenAccent,
  hoverColor: Colors.redAccent,
  splashColor: Colors.tealAccent,
 ),
</t>
</tnodes>
</leo_file>
