<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20221017093031.1"><vh>widgets</vh>
<v t="swot.20221017093031.2" descendentVnodeUnknownAttributes="7d7100285805000000302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032322d31302d3233710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175580b000000302e332e302e302e302e3071197d711a2868037d711b2868054b026806580a000000323032322d31302d3236711c7568085d711d7d711e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711f680e580d000000636c656f2f707269322e706e6771206810681168124b0068134b0268144b016815681668176818756175580f000000302e342e332e312e302e302e302e3071217d71225808000000616e6e6f7461746571237d71242858080000007072696f7269747971254d0f27580a000000707269736574646174657126580a000000323032322d31302d323571277573580b000000302e352e322e312e302e3071287d71295808000000616e6e6f74617465712a7d712b2858080000007072696f72697479712c4d0f27580a00000070726973657464617465712d580a000000323032322d31302d3233712e7573580d000000302e352e322e312e302e302e30712f7d7130682a7d713128682c4d0f27682d580a000000323032322d31302d323371327573752e"><vh>@file lib/main.dart</vh></v>
<v t="swot.20221027203033.1"><vh>@file pubspec.yaml</vh></v>
<v t="swot.20221017093031.150"><vh>@clean README.md</vh></v>
</v>
<v t="swot.20221027111311.1"><vh>Logic</vh>
<v t="swot.20221017093031.151"><vh>A</vh>
<v t="swot.20221017093031.152"><vh>AboutDialog</vh></v>
<v t="swot.20221017093031.153"><vh>AboutListTile</vh></v>
<v t="swot.20221017093031.154"><vh>AbsorbPointer -- include button can not be clicked</vh>
<v t="swot.20221017093031.155"><vh>ElevatedButton 不可点击</vh></v>
</v>
<v t="swot.20221017093031.156"><vh>AlertDialog</vh></v>
<v t="swot.20221017093031.157"><vh>Align</vh></v>
<v t="swot.20221017093031.158"><vh>Animated...</vh>
<v t="swot.20221017093031.159"><vh>AnimatedAlign</vh></v>
<v t="swot.20221017093031.160"><vh>AnimatedBuilder</vh>
<v t="swot.20221017093031.161"><vh>var for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.162"><vh>AnimationController for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.163"><vh>AnimatedBuilder</vh></v>
</v>
<v t="swot.20221017093031.164"><vh>AnimatedContainer</vh></v>
<v t="swot.20221017093031.165"><vh>AnimatedCrossFade</vh></v>
<v t="swot.20221017093031.166"><vh>AnimatedDefaultTextStyle</vh></v>
<v t="swot.20221027192806.1"><vh>AnimatedIconExample</vh>
<v t="swot.20221027192851.2"><vh>AnimatedIconExample</vh>
<v t="swot.20221027192851.3"><vh>varible</vh></v>
<v t="swot.20221027192851.4"><vh>initState()</vh></v>
<v t="swot.20221027192851.5"><vh>dispose()</vh></v>
<v t="swot.20221027192851.6"><vh>build()</vh>
<v t="swot.20221027194101.1"><vh>GestureDetector       -- show AnimatedIcon</vh>
<v t="swot.20221027194101.2"><vh>AnimatedIcon</vh></v>
</v>
</v>
</v>
<v t="swot.20221027194417.2"><vh>show AnimatedIconExample</vh></v>
</v>
<v t="swot.20221017093031.171"><vh>AnimatedList</vh>
<v t="swot.20221017093031.172"><vh>var for AnimatedList</vh></v>
<v t="swot.20221017093031.173"><vh>_addItem()             -- AnimatedList</vh></v>
<v t="swot.20221017093031.174"><vh>_removeItem(int index) -- AnimatedList</vh></v>
<v t="swot.20221017093031.175"><vh>show AnimatedList</vh>
<v t="swot.20221017093031.176"><vh>AnimatedList</vh>
<v t="swot.20221017093031.177"><vh>SizeTransition</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.178"><vh>AnimatedModalBarrier</vh>
<v t="swot.20221017093031.179"><vh>AnimatedModalBarrier  -- show AnimatedModalBarrier</vh></v>
<v t="swot.20221017093031.180"><vh>AnimatedModalBarrierExample</vh>
<v t="swot.20221017093031.181"><vh>varible</vh></v>
<v t="swot.20221017093031.182"><vh>initState()</vh></v>
<v t="swot.20221017093031.183"><vh>dispose()</vh></v>
<v t="swot.20221017093031.184"><vh>build()</vh>
<v t="swot.20221017093031.185"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.186"><vh>_animatedModalBarrier</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.187"><vh>AnimatedOpacity</vh>
<v t="swot.20221017093031.194"><vh>show AnimatedOpacity</vh></v>
<v t="swot.20221017093031.188"><vh>AnimatedOpacityExample</vh>
<v t="swot.20221017093031.189"><vh>varible</vh></v>
<v t="swot.20221017093031.190"><vh>initState()</vh></v>
<v t="swot.20221017093031.191"><vh>build()</vh>
<v t="swot.20221017093031.192"><vh>AnimatedOpacity</vh></v>
<v t="swot.20221017093031.193"><vh>ElevatedButton</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.195"><vh>AnimatedPadding</vh>
<v t="swot.20221017093031.196"><vh>show AnimatedPadding</vh></v>
<v t="swot.20221017093031.197"><vh>AnimatedPaddingExample</vh>
<v t="swot.20221017093031.198"><vh>varible</vh></v>
<v t="swot.20221017093031.199"><vh>initState()</vh></v>
<v t="swot.20221017093031.200"><vh>build()</vh>
<v t="swot.20221017093031.201"><vh>Column</vh>
<v t="swot.20221017093031.202"><vh>Row</vh>
<v t="swot.20221017093031.203"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.204"><vh>Text</vh></v>
</v>
<v t="swot.20221017093031.205"><vh>AnimatedPadding</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.206"><vh>AnimatedPhysicalModel</vh>
<v t="swot.20221017093031.207"><vh>show AnimatedPhysicalModel</vh></v>
<v t="swot.20221017093031.208"><vh>AnimatedPhysicalModelExample</vh>
<v t="swot.20221017093031.209"><vh>varible</vh></v>
<v t="swot.20221017093031.210"><vh>initState()</vh></v>
<v t="swot.20221017093031.211"><vh>dispose()</vh></v>
<v t="swot.20221017093031.212"><vh>build()</vh>
<v t="swot.20221017093031.213"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.214"><vh>AnimatedPhysicalModel</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.215"><vh>AnimatedPositioned</vh>
<v t="swot.20221017093031.216"><vh>show AnimatedPositionedExample</vh></v>
<v t="swot.20221017093031.217"><vh>AnimatedPositionedExample</vh>
<v t="swot.20221017093031.218"><vh>varible</vh></v>
<v t="swot.20221017093031.219"><vh>initState()</vh></v>
<v t="swot.20221017093031.220"><vh>dispose()</vh></v>
<v t="swot.20221017093031.221"><vh>build()</vh>
<v t="swot.20221017093031.222"><vh>SizedBox</vh>
<v t="swot.20221017093031.223"><vh>Stack</vh>
<v t="swot.20221017093031.224"><vh>AnimatedPositioned</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.225"><vh>AnimatedRotation</vh>
<v t="swot.20221017093031.226"><vh>show AnimatedRotationExample</vh></v>
<v t="swot.20221017093031.227"><vh>AnimatedRotationExample</vh>
<v t="swot.20221017093031.228"><vh>varible</vh></v>
<v t="swot.20221017093031.229"><vh>initState()</vh></v>
<v t="swot.20221017093031.230"><vh>dispose()</vh></v>
<v t="swot.20221017093031.231"><vh>build()</vh>
<v t="swot.20221017093031.232"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.233"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.234"><vh>AnimatedSize</vh>
<v t="swot.20221017093031.235"><vh>show AnimatedSizeExample</vh></v>
<v t="swot.20221017093031.236"><vh>AnimatedSizeExample</vh>
<v t="swot.20221017093031.237"><vh>varible</vh></v>
<v t="swot.20221017093031.238"><vh>initState()</vh></v>
<v t="swot.20221017093031.239"><vh>dispose()</vh></v>
<v t="swot.20221017093031.240"><vh>build()</vh>
<v t="swot.20221017093031.241"><vh>Text</vh></v>
<v t="swot.20221017093031.242"><vh>GestureDetector AnimatedSize FlutterLogo</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.243"><vh>AnimatedSwitcher</vh>
<v t="swot.20221017093031.244"><vh>AnimatedSwitcherExample</vh>
<v t="swot.20221017093031.245"><vh>varible</vh></v>
<v t="swot.20221017093031.246"><vh>initState()</vh></v>
<v t="swot.20221017093031.247"><vh>dispose()</vh></v>
<v t="swot.20221017093031.248"><vh>build()</vh>
<v t="swot.20221017093031.249"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.250"><vh>AnimatedSwitcher</vh></v>
</v>
</v>
<v t="swot.20221017093031.251"><vh>show AnimatedSwitcherExample</vh></v>
</v>
</v>
<v t="swot.20221017093031.252"><vh>AppBar</vh></v>
<v t="swot.20221017093031.253"><vh>AspectRatio</vh></v>
<v t="swot.20221017093031.254"><vh>AutoComplete</vh>
<v t="swot.20221017093031.255"><vh>show AutoCompleteExample</vh></v>
<v t="swot.20221017093031.256"><vh>AutoCompleteExample 不要在屏幕中部以下(会被软键盘挡住)</vh>
<v t="swot.20221017093031.257"><vh>varible</vh></v>
<v t="swot.20221017093031.258"><vh>build()</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.259"><vh>B</vh>
<v t="swot.20221021173546.1"><vh>BackdropFilterExample</vh>
<v t="swot.20221019111317.2"><vh>BackdropFilterExample</vh>
<v t="swot.20221019111317.3"><vh>build()</vh></v>
</v>
<v t="swot.20221021173506.1"><vh>show BackdropFilterExample</vh></v>
</v>
<v t="swot.20221021174618.1"><vh>BannerExample</vh>
<v t="swot.20221021175217.2"><vh>BannerExample</vh>
<v t="swot.20221021175217.3"><vh>build()</vh>
<v t="swot.20221021175330.1"><vh>Center</vh>
<v t="swot.20221021175401.1"><vh>Container</vh>
<v t="swot.20221021180745.1"><vh>ClipRect</vh>
<v t="swot.20221021180828.1"><vh>Banner</vh>
<v t="swot.20221021175506.1"><vh>Container</vh>
<v t="swot.20221021175604.1"><vh>Padding</vh>
<v t="swot.20221021175702.1"><vh>Column</vh>
<v t="swot.20221021175915.1"><vh>Image</vh></v>
<v t="swot.20221021180035.1"><vh>SizedBox</vh></v>
<v t="swot.20221021180106.1"><vh>Row</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221021181118.1"><vh>show BannerExample</vh></v>
</v>
<v t="swot.20221021181511.1"><vh>BaselineExample</vh>
<v t="swot.20221021181642.2"><vh>BaselineExample</vh>
<v t="swot.20221021181642.3"><vh>build()</vh></v>
</v>
<v t="swot.20221021181700.1"><vh>show BaselineExample</vh></v>
</v>
<v t="swot.20221021182532.1"><vh>BlockSemanticsExample -- 适用于读屏功能的处理</vh>
<v t="swot.20221022083314.1"><vh>&lt;&lt; showSemanticsDebugger &gt;&gt;</vh></v>
<v t="swot.20221022080218.2"><vh>BlockSemanticsExample</vh>
<v t="swot.20221022083723.1"><vh>varible</vh></v>
<v t="swot.20221022080218.3"><vh>initState()</vh></v>
<v t="swot.20221022080218.4"><vh>dispose()</vh></v>
<v t="swot.20221022080218.5"><vh>build()</vh>
<v t="swot.20221022080422.1"><vh>SizedBox</vh>
<v t="swot.20221022083203.1"><vh>SizedBox</vh>
<v t="swot.20221022083954.1"><vh>Column</vh>
<v t="swot.20221022084045.1"><vh>OutlinedButton</vh></v>
<v t="swot.20221022084513.1"><vh>if (isShow)</vh>
<v t="swot.20221022091825.1"><vh>BlockSemantics</vh>
<v t="swot.20221022090937.1"><vh>Card</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221022085519.1"><vh>show BlockSemanticsExample</vh></v>
</v>
<v t="swot.20221022093209.1"><vh>BottomNavigationBarExample</vh>
<v t="swot.20221022101129.1"><vh>show BottomNavigationBarExample</vh></v>
<v t="swot.20221022094100.2"><vh>BottomNavigationBarExample</vh>
<v t="swot.20221022094133.1"><vh>varible</vh></v>
<v t="swot.20221022094100.3"><vh>initState()</vh></v>
<v t="swot.20221022094100.4"><vh>dispose()</vh></v>
<v t="swot.20221022094100.5"><vh>build()</vh>
<v t="swot.20221022095720.2"><vh>Scaffold</vh>
<v t="swot.20221022101748.1"><vh>appBar</vh></v>
<v t="swot.20221022095720.4"><vh>body</vh></v>
<v t="swot.20221022095720.5"><vh>bottomNavigationBar</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221022104755.1"><vh>BottomSheetExample</vh>
<v t="swot.20221022104843.2"><vh>BottomSheetExample</vh>
<v t="swot.20221022104843.3"><vh>initState()</vh></v>
<v t="swot.20221022104843.4"><vh>dispose()</vh></v>
<v t="swot.20221022104843.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022094818.1"><vh>show BottomSheetExample</vh></v>
</v>
<v t="swot.20221022104749.1"><vh>BuilderExample</vh>
<v t="swot.20221022110627.2"><vh>BuilderExample</vh>
<v t="swot.20221022110627.3"><vh>build()</vh></v>
<v t="swot.20221022110900.1"><vh>myBuilderWidget()</vh></v>
</v>
</v>
</v>
<v t="swot.20221022115422.1"><vh>C</vh>
<v t="swot.20221022121827.1"><vh>CardExample</vh>
<v t="swot.20221022121755.2"><vh>CardExample</vh>
<v t="swot.20221022121755.3"><vh>build()</vh>
<v t="swot.20221022122022.1"><vh>Card</vh></v>
</v>
</v>
<v t="swot.20221022121559.5"><vh>show CardExample</vh></v>
</v>
<v t="swot.20221022122630.1"><vh>CenterExample</vh>
<v t="swot.20221022122655.2"><vh>CenterExample</vh>
<v t="swot.20221022122655.3"><vh>build()</vh>
<v t="swot.20221022122945.1"><vh>Center</vh></v>
</v>
</v>
<v t="swot.20221022123052.1"><vh>show CenterExample</vh></v>
</v>
<v t="swot.20221022124036.1"><vh>CheckboxExample</vh>
<v t="swot.20221022141252.2"><vh>CheckboxExample</vh>
<v t="swot.20221022141315.1"><vh>varible</vh></v>
<v t="swot.20221022141252.3"><vh>initState()</vh></v>
<v t="swot.20221022141252.4"><vh>dispose()</vh></v>
<v t="swot.20221022141252.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022141621.1"><vh>show CheckboxExample</vh></v>
</v>
<v t="swot.20221022141927.1"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022141946.2"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022142005.1"><vh>varible</vh></v>
<v t="swot.20221022141946.3"><vh>initState()</vh></v>
<v t="swot.20221022141946.4"><vh>dispose()</vh></v>
<v t="swot.20221022141946.5"><vh>build()</vh>
<v t="swot.20221022142124.1"><vh>CheckboxListTile</vh></v>
</v>
</v>
<v t="swot.20221022142602.1"><vh>show CheckboxListTileExample</vh></v>
</v>
<v t="swot.20221022142903.1"><vh>ChipExample</vh>
<v t="swot.20221022142919.2"><vh>ChipExample</vh>
<v t="swot.20221022142919.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022143204.1"><vh>show ChipExample</vh></v>
</v>
<v t="swot.20221022144321.1"><vh>ChoiceChipExample</vh>
<v t="swot.20221022144339.2"><vh>ChoiceChipExample</vh>
<v t="swot.20221022144356.1"><vh>varible</vh></v>
<v t="swot.20221022144339.3"><vh>initState()</vh></v>
<v t="swot.20221022144339.4"><vh>dispose()</vh></v>
<v t="swot.20221022144339.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022144701.1"><vh>show ChoiceChipExample</vh></v>
</v>
<v t="swot.20221022144956.1"><vh>CircleAvatarExample</vh>
<v t="swot.20221022145018.2"><vh>CircleAvatarExample</vh>
<v t="swot.20221022145018.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022145230.1"><vh>show CircleAvatarExample</vh></v>
</v>
<v t="swot.20221022153206.1"><vh>CircularProgressIndicatorExample</vh>
<v t="swot.20221022153237.2"><vh>CircularProgressIndicatorExample</vh>
<v t="swot.20221022153237.3"><vh>initState()</vh></v>
<v t="swot.20221022153237.4"><vh>dispose()</vh></v>
<v t="swot.20221022153237.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022153425.1"><vh>show CircularProgressIndicatorExample</vh></v>
</v>
<v t="swot.20221022153732.1"><vh>ClipOvalExample</vh>
<v t="swot.20221022153848.2"><vh>ClipOvalExample</vh>
<v t="swot.20221022153848.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022154849.1"><vh>CustomClip</vh></v>
<v t="swot.20221022154220.1"><vh>show ClipOvalExample</vh></v>
</v>
<v t="swot.20221022161923.1"><vh>ClipPathExample</vh>
<v t="swot.20221022161946.2"><vh>ClipPathExample</vh>
<v t="swot.20221022161946.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022162343.1"><vh>MyClipper1</vh></v>
<v t="swot.20221022162124.1"><vh>show ClipPathExample</vh></v>
</v>
<v t="swot.20221022163908.1"><vh>ClipRectExample</vh>
<v t="swot.20221022163926.2"><vh>ClipRectExample</vh>
<v t="swot.20221022163926.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022164337.1"><vh>MyClipper2</vh></v>
<v t="swot.20221022164554.1"><vh>show ClipRectExample</vh></v>
</v>
<v t="swot.20221022165235.1"><vh>ClipRRectExample</vh>
<v t="swot.20221022165324.2"><vh>ClipRRectExample</vh>
<v t="swot.20221022165324.3"><vh>initState()</vh></v>
<v t="swot.20221022165324.4"><vh>dispose()</vh></v>
<v t="swot.20221022165324.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022165721.1"><vh>show ClipRRectExample</vh></v>
</v>
<v t="swot.20221022170537.1"><vh>CloseButtonExample</vh>
<v t="swot.20221022170557.2"><vh>CloseButtonExample</vh>
<v t="swot.20221022170557.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022170737.1"><vh>show CloseButtonExample</vh></v>
</v>
<v t="swot.20221022171451.1"><vh>ColoredBoxExample</vh>
<v t="swot.20221022171523.2"><vh>ColoredBoxExample</vh>
<v t="swot.20221022171523.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022171708.1"><vh>show ColoredBoxExample</vh></v>
</v>
<v t="swot.20221022172614.1"><vh>ColorFilteredExample</vh>
<v t="swot.20221022172641.2"><vh>ColorFilteredExample</vh>
<v t="swot.20221022172641.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022173017.1"><vh>show ColorFilteredExample</vh></v>
</v>
<v t="swot.20221022201311.1"><vh>ConstrainedBoxExample</vh>
<v t="swot.20221022201619.2"><vh>ConstrainedBoxExample</vh>
<v t="swot.20221022201619.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022202111.1"><vh>show ConstrainedBoxExample</vh></v>
</v>
<v t="swot.20221022202806.1"><vh>ContainerExample</vh>
<v t="swot.20221022202825.2"><vh>ContainerExample</vh>
<v t="swot.20221022202825.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022203303.1"><vh>show ContainerExample</vh></v>
</v>
<v t="swot.20221022203542.1"><vh>ColumnExample</vh>
<v t="swot.20221022203601.2"><vh>ColumnExample</vh>
<v t="swot.20221022203601.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022203824.1"><vh>show ColumnExample</vh></v>
</v>
<v t="swot.20221022210316.1"><vh>CupertinoActionSheetExample</vh>
<v t="swot.20221022210338.2"><vh>CupertinoActionSheetExample</vh>
<v t="swot.20221022210338.3"><vh>initState()</vh></v>
<v t="swot.20221022210338.4"><vh>dispose()</vh></v>
<v t="swot.20221022210338.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022210532.1"><vh>show CupertinoActionSheetExample</vh></v>
</v>
<v t="swot.20221022213225.1"><vh>CupertinoAppExample</vh>
<v t="swot.20221022213243.2"><vh>CupertinoAppExample</vh>
<v t="swot.20221022213243.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022213726.2"><vh>MyCupertinoApp</vh>
<v t="swot.20221022213726.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022214055.1"><vh>show CupertinoAppExample</vh></v>
</v>
<v t="swot.20221023163309.1"><vh>CupertinoContextMenuExample  -- longPress</vh>
<v t="swot.20221023163418.2"><vh>CupertinoContextMenuExample</vh>
<v t="swot.20221023163418.3"><vh>build()</vh>
<v t="swot.20221023163626.1"><vh>CupertinoContextMenu</vh></v>
</v>
</v>
<v t="swot.20221023164513.1"><vh>show CupertinoContextMenuExample</vh></v>
</v>
</v>
<v t="swot.20221024070739.1"><vh>D</vh>
<v t="swot.20221024112547.1"><vh>DismissibleExample</vh>
<v t="swot.20221024112614.2"><vh>DismissibleExample</vh>
<v t="swot.20221024112703.1"><vh>varible</vh></v>
<v t="swot.20221024112614.3"><vh>initState()</vh></v>
<v t="swot.20221024112614.4"><vh>dispose()</vh></v>
<v t="swot.20221024112614.5"><vh>build()</vh>
<v t="swot.20221024113603.2"><vh>Scaffold</vh>
<v t="swot.20221024113603.3"><vh>appBar</vh></v>
<v t="swot.20221024113603.4"><vh>body</vh>
<v t="swot.20221024113627.1"><vh>ListView</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221024112602.1"><vh>show DismissibleExample</vh></v>
</v>
<v t="swot.20221025074714.1"><vh>DraggableScrollableExample</vh>
<v t="swot.20221025074739.2"><vh>DraggableScrollableExample</vh>
<v t="swot.20221025074739.3"><vh>build()</vh>
<v t="swot.20221025081258.2"><vh>Scaffold</vh>
<v t="swot.20221025081258.3"><vh>appBar</vh></v>
<v t="swot.20221025081258.4"><vh>body</vh>
<v t="swot.20221025081316.1"><vh>DraggableScrollableSheet</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221025075357.1"><vh>show DraggableScrollableExample</vh></v>
</v>
<v t="swot.20221025081914.1"><vh>DragTargetExample</vh>
<v t="swot.20221025081939.2"><vh>DragTargetExample</vh>
<v t="swot.20221025081939.3"><vh>varible</vh></v>
<v t="swot.20221025081939.4"><vh>initState()</vh></v>
<v t="swot.20221025081939.5"><vh>dispose()</vh></v>
<v t="swot.20221025081939.6"><vh>build()</vh>
<v t="swot.20221025091431.2"><vh>Scaffold</vh>
<v t="swot.20221025091431.3"><vh>appBar</vh></v>
<v t="swot.20221025091431.4"><vh>body</vh>
<v t="swot.20221025083125.1"><vh>SizedBox</vh>
<v t="swot.20221025083519.1"><vh>Column</vh>
<v t="swot.20221025083732.1"><vh>Draggable</vh></v>
<v t="swot.20221025084843.1"><vh>DragTarget</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221025091113.1"><vh>show DragTargetExample</vh></v>
</v>
<v t="swot.20221025094932.1"><vh>DrawerExample</vh>
<v t="swot.20221025095859.1"><vh>show DrawerExample</vh></v>
<v t="swot.20221025095334.2"><vh>DrawerExample</vh>
<v t="swot.20221025095334.3"><vh>build()</vh>
<v t="swot.20221025095436.2"><vh>Scaffold</vh>
<v t="swot.20221025095436.3"><vh>appBar</vh></v>
<v t="swot.20221025095436.4"><vh>body</vh></v>
<v t="swot.20221025095602.1"><vh>endDrawer</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221026064223.1"><vh>E</vh>
<v t="swot.20221026072859.1"><vh>ExpandedExample</vh>
<v t="swot.20221026073602.2"><vh>ExpandedExample -- height in Expanded takes no effect</vh>
<v t="swot.20221026073602.3"><vh>build()</vh>
<v t="swot.20221026193458.1"><vh>Expanded</vh></v>
<v t="swot.20221026193703.1"><vh>Expanded</vh></v>
<v t="swot.20221026193706.1"><vh>Expanded</vh></v>
</v>
</v>
<v t="swot.20221026194030.1"><vh>show ExpandedExample</vh></v>
</v>
</v>
<v t="swot.20221027111351.1"><vh>F</vh>
<v t="swot.20221027112213.1"><vh>FlexibleExample</vh>
<v t="swot.20221027111458.2"><vh>FlexibleExample</vh>
<v t="swot.20221027111458.3"><vh>build()</vh>
<v t="swot.20221027112522.2"><vh>Scaffold</vh>
<v t="swot.20221027112522.3"><vh>appBar</vh></v>
<v t="swot.20221027112522.4"><vh>body</vh>
<v t="swot.20221027111807.1"><vh>Column</vh>
<v t="swot.20221027111848.1"><vh>Flexible -- FlexFit.loose is default</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027112321.2"><vh>show FlexbleExample</vh></v>
</v>
<v t="swot.20221027114210.1"><vh>FloatingActionButtonExample</vh>
<v t="swot.20221027114010.6"><vh>floatingActionButton</vh></v>
</v>
<v t="swot.20221027115609.1"><vh>FormExample</vh>
<v t="swot.20221027115627.2"><vh>FormExample</vh>
<v t="swot.20221027120023.1"><vh>value</vh></v>
<v t="swot.20221027115627.3"><vh>build()</vh>
<v t="swot.20221027115750.2"><vh>Scaffold</vh>
<v t="swot.20221027115750.3"><vh>appBar</vh></v>
<v t="swot.20221027115750.4"><vh>body</vh>
<v t="swot.20221027115911.1"><vh>Padding</vh>
<v t="swot.20221027115952.1"><vh>Form</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027121244.1"><vh>show FormExample</vh></v>
</v>
<v t="swot.20221027195901.1"><vh>FadeInImageExample</vh>
<v t="swot.20221027203431.2"><vh>FadeInImageExample</vh>
<v t="swot.20221027203431.3"><vh>build()</vh></v>
</v>
<v t="swot.20221027203755.1"><vh>show FadeInImageExample</vh></v>
</v>
<v t="swot.20221027212136.1"><vh>FractionallySizedBoxExample</vh>
<v t="swot.20221027212222.2"><vh>FractionallySizedBoxExample</vh>
<v t="swot.20221027212222.3"><vh>build()</vh>
<v t="swot.20221027212407.2"><vh>Scaffold</vh>
<v t="swot.20221027212407.3"><vh>appBar</vh></v>
<v t="swot.20221027212407.4"><vh>body </vh>
<v t="swot.20221027212916.2"><vh>Center</vh>
<v t="swot.20221027212959.1"><vh>FractionallySizedBox</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027213559.2"><vh>show FractionallySizedBoxExample</vh></v>
</v>
<v t="swot.20221027214525.1"><vh>FutureBuilderExample</vh>
<v t="swot.20221028064229.2"><vh>FutureBuilderExample</vh>
<v t="swot.20221028064229.3"><vh>varible</vh></v>
<v t="swot.20221028064229.4"><vh>initState()</vh></v>
<v t="swot.20221028064229.5"><vh>dispose()</vh></v>
<v t="swot.20221028064229.6"><vh>build()</vh>
<v t="swot.20221028064815.1"><vh>FutureBuilder</vh></v>
</v>
</v>
<v t="swot.20221028065632.1"><vh>show FutureBuilderExample</vh></v>
</v>
</v>
<v t="swot.20221028070441.1"><vh>G</vh>
<v t="swot.20221028083608.1"><vh>GestureDetectorExample</vh>
<v t="swot.20221028084729.2"><vh>GestureDetectorExample</vh>
<v t="swot.20221028084729.3"><vh>varible</vh></v>
<v t="swot.20221028084729.6"><vh>build()</vh></v>
</v>
<v t="swot.20221028085926.1"><vh>show GestureDetectorExample</vh></v>
</v>
<v t="swot.20221028091221.1"><vh>GridViewExample</vh>
<v t="swot.20221028093414.2"><vh>GridViewExample</vh>
<v t="swot.20221028093414.3"><vh>build()</vh>
<v t="swot.20221028122703.2"><vh>Scaffold</vh>
<v t="swot.20221028122703.3"><vh>appBar</vh></v>
<v t="swot.20221028122703.4"><vh>body</vh>
<v t="swot.20221028093753.1"><vh>GridView</vh>
<v t="swot.20221029070417.1"><vh>GridTile -- use GridTileBar</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221028095636.2"><vh>show GridViewExample</vh></v>
</v>
<v t="swot.20221028122858.1"><vh>GridTileExample</vh>
<v t="swot.20221028131344.2"><vh>show GridTileExample</vh></v>
<v t="swot.20221028130417.2"><vh>GridTileExample</vh>
<v t="swot.20221028130417.3"><vh>build()</vh>
<v t="swot.20221028131715.2"><vh>Scaffold</vh>
<v t="swot.20221028131715.3"><vh>appBar</vh></v>
<v t="swot.20221028131715.4"><vh>body</vh>
<v t="swot.20221028130528.1"><vh>Center</vh>
<v t="swot.20221029070735.1"><vh>SizedBox</vh>
<v t="swot.20221029070636.1"><vh>GridTile  -- use Container</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029090319.1"><vh>H</vh>
<v t="swot.20221029090332.1"><vh>HeroExample</vh>
<v t="swot.20221029090411.1"><vh>show HeroExample</vh></v>
<v t="swot.20221029092751.2"><vh>HeroExample</vh>
<v t="swot.20221029092751.3"><vh>build()</vh>
<v t="swot.20221029094712.2"><vh>Scaffold</vh>
<v t="swot.20221029094712.3"><vh>appBar</vh></v>
<v t="swot.20221029094712.4"><vh>body</vh>
<v t="swot.20221029092810.1"><vh>Center</vh>
<v t="swot.20221029092914.1"><vh>Hero</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023124217.1"><vh>I</vh>
<v t="swot.20221023150449.1"><vh>InteractiveViewerExample</vh>
<v t="swot.20221029081714.14"><vh>InteractiveViewerExample</vh>
<v t="swot.20221029081714.15"><vh>initState()</vh></v>
<v t="swot.20221029081714.16"><vh>dispose()</vh></v>
<v t="swot.20221029081714.17"><vh>build()</vh></v>
</v>
<v t="swot.20221029081714.8"><vh>ElevatedButton -- show InteractiveViewerExample</vh></v>
</v>
<v t="swot.20221029115239.1"><vh>IgnorePointerExample</vh>
<v t="swot.20221029121446.1"><vh>show IgnorePointerExample</vh></v>
<v t="swot.20221029115307.2"><vh>IgnorePointerExample</vh>
<v t="swot.20221029115307.3"><vh>varible</vh></v>
<v t="swot.20221029115307.4"><vh>initState()</vh></v>
<v t="swot.20221029115307.5"><vh>dispose()</vh></v>
<v t="swot.20221029115307.6"><vh>build()</vh>
<v t="swot.20221029115522.1"><vh>Row</vh>
<v t="swot.20221029115652.2"><vh>ElevatedButton</vh></v>
<v t="swot.20221029120401.1"><vh>IgnorePointer</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221029122138.1"><vh>IndexedStackExample</vh>
<v t="swot.20221029125017.1"><vh>ElevatedButton -- show IndexedStackExample</vh></v>
<v t="swot.20221029122755.2"><vh>IndexedStackExample</vh>
<v t="swot.20221029122755.3"><vh>varible</vh></v>
<v t="swot.20221029122755.4"><vh>initState()</vh></v>
<v t="swot.20221029122755.5"><vh>dispose()</vh></v>
<v t="swot.20221029122755.6"><vh>build()</vh>
<v t="swot.20221029125202.2"><vh>Scaffold</vh>
<v t="swot.20221029125202.3"><vh>appBar</vh></v>
<v t="swot.20221029125202.4"><vh>body</vh>
<v t="swot.20221029123730.2"><vh>Padding</vh>
<v t="swot.20221029123925.2"><vh>Column</vh>
<v t="swot.20221029124213.2"><vh>Row</vh>
<v t="swot.20221029124242.2"><vh>ElevatedButton 0</vh></v>
<v t="swot.20221029124327.1"><vh>ElevatedButton 1</vh></v>
<v t="swot.20221029124328.1"><vh>ElevatedButton 2</vh></v>
</v>
<v t="swot.20221029124503.1"><vh>IndexedStack</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023105739.1"><vh>L</vh>
<v t="swot.20221023105806.1"><vh>LongPressDraggableExample</vh>
<v t="swot.20221023105920.2"><vh>LongPressDraggableExample</vh>
<v t="swot.20221023105947.1"><vh>varible</vh></v>
<v t="swot.20221023105920.3"><vh>initState()</vh></v>
<v t="swot.20221023105920.4"><vh>dispose()</vh></v>
<v t="swot.20221023105920.5"><vh>build()</vh>
<v t="swot.20221023123049.2"><vh>Scaffold</vh>
<v t="swot.20221023123049.3"><vh>appBar</vh></v>
<v t="swot.20221023123049.4"><vh>body</vh>
<v t="swot.20221023110506.1"><vh>Positioned</vh>
<v t="swot.20221023110634.1"><vh>LongPressDraggable</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023122724.2"><vh>ElevatedButton -- show LongPressDraggableExample</vh></v>
</v>
<v t="swot.20221029125546.1"><vh>ListViewExample</vh>
<v t="swot.20221029132948.2"><vh>ElevatedButton -- show ListViewExample</vh></v>
<v t="swot.20221029130827.2"><vh>ListViewExample</vh>
<v t="swot.20221029130827.3"><vh>build()</vh>
<v t="swot.20221029133516.2"><vh>Scaffold</vh>
<v t="swot.20221029133516.3"><vh>appBar</vh></v>
<v t="swot.20221029133516.4"><vh>body</vh>
<v t="swot.20221029132335.1"><vh>ListView</vh>
<v t="swot.20221029133717.1"><vh>ListTile</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023080337.1"><vh>M</vh>
<v t="swot.20221023081507.1"><vh>MaterialBannerExample</vh>
<v t="swot.20221023081535.2"><vh>MaterialBannerExample</vh>
<v t="swot.20221023081535.3"><vh>build()</vh></v>
</v>
<v t="swot.20221023081047.5"><vh>show MaterialBannerExample</vh></v>
</v>
<v t="swot.20221023081552.1"><vh>newHeadline</vh></v>
<v t="swot.20221023081552.2"><vh>newHeadline</vh></v>
<v t="swot.20221023081553.1"><vh>newHeadline</vh></v>
<v t="swot.20221023081553.2"><vh>newHeadline</vh></v>
<v t="swot.20221023081553.3"><vh>newHeadline</vh></v>
<v t="swot.20221023081554.1"><vh>newHeadline</vh></v>
<v t="swot.20221023081554.2"><vh>newHeadline</vh></v>
</v>
<v t="swot.20221029134124.1"><vh>N</vh>
<v t="swot.20221029134556.1"><vh>NavigationBarExample</vh>
<v t="swot.20221029141845.2"><vh>ElevatedButton -- show NavigationBarExample</vh></v>
<v t="swot.20221029140231.2"><vh>NavigationBarExample</vh>
<v t="swot.20221029140231.3"><vh>varible</vh></v>
<v t="swot.20221029140231.4"><vh>initState()</vh></v>
<v t="swot.20221029140231.5"><vh>dispose()</vh></v>
<v t="swot.20221029140231.6"><vh>build()</vh>
<v t="swot.20221029141046.2"><vh>Scaffold</vh>
<v t="swot.20221029141046.3"><vh>appBar</vh></v>
<v t="swot.20221029141046.4"><vh>body</vh></v>
<v t="swot.20221029141046.5"><vh>bottomNavigationBar</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023093247.1"><vh>P</vh>
<v t="swot.20221023093415.1"><vh>PreferredSizeExample</vh>
<v t="swot.20221023093803.1"><vh>AppBar</vh></v>
</v>
<v t="swot.20221025114659.1"><vh>PopupMenuButtonExample</vh>
<v t="swot.20221025114730.2"><vh>PopupMenuButtonExample</vh>
<v t="swot.20221025114730.3"><vh>varible</vh></v>
<v t="swot.20221025114730.4"><vh>initState()</vh></v>
<v t="swot.20221025114730.5"><vh>dispose()</vh></v>
<v t="swot.20221025114730.6"><vh>build()</vh></v>
</v>
<v t="swot.20221025191831.1"><vh>show PopupMenuButtonExample</vh></v>
</v>
</v>
<v t="swot.20221023152237.1"><vh>R</vh>
<v t="swot.20221023155312.1"><vh>ReorderableListViewExample  -- longPress</vh>
<v t="swot.20221023152801.2"><vh>ReorderableListViewExample</vh>
<v t="swot.20221023152933.1"><vh>varible</vh></v>
<v t="swot.20221023152801.3"><vh>initState()</vh></v>
<v t="swot.20221023152801.4"><vh>dispose()</vh></v>
<v t="swot.20221023152801.5"><vh>build()</vh>
<v t="swot.20221023154334.2"><vh>Scaffold</vh>
<v t="swot.20221023154334.3"><vh>appBar</vh></v>
<v t="swot.20221023154334.4"><vh>body</vh>
<v t="swot.20221023153058.1"><vh>ReorderableListView</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221023154547.2"><vh>ElevatedButton -- show ReorderableListViewExample</vh></v>
</v>
</v>
<v t="swot.20221024091445.1"><vh>S</vh>
<v t="swot.20221024092102.1"><vh>showDatePickerExample</vh>
<v t="swot.20221024095344.2"><vh>DatePickerExample</vh>
<v t="swot.20221024095406.1"><vh>varible</vh></v>
<v t="swot.20221024095344.3"><vh>initState()</vh></v>
<v t="swot.20221024095344.4"><vh>dispose()</vh></v>
<v t="swot.20221024095344.5"><vh>build()</vh></v>
</v>
<v t="swot.20221024100552.1"><vh>show DatePickerExample</vh></v>
</v>
<v t="swot.20221024103418.1"><vh>showTimePickerExample</vh>
<v t="swot.20221024103523.2"><vh>TimePickerExample</vh>
<v t="swot.20221024103850.1"><vh>varible</vh></v>
<v t="swot.20221024103523.3"><vh>initState()</vh></v>
<v t="swot.20221024103523.4"><vh>dispose()</vh></v>
<v t="swot.20221024103957.1"><vh>build()</vh></v>
</v>
<v t="swot.20221024103554.1"><vh>show TimePickerExample</vh></v>
</v>
<v t="swot.20221024105608.1"><vh>showDateRangePickerExample</vh>
<v t="swot.20221024110030.2"><vh>DateRangePickerExample</vh>
<v t="swot.20221024110048.1"><vh>varible</vh></v>
<v t="swot.20221024110030.3"><vh>initState()</vh></v>
<v t="swot.20221024110030.4"><vh>dispose()</vh></v>
<v t="swot.20221024110030.5"><vh>build()</vh></v>
</v>
<v t="swot.20221024110745.1"><vh>show DateRangePickerExample</vh></v>
</v>
<v t="swot.20221029142524.1"><vh>StackExample</vh>
<v t="swot.20221029142534.2"><vh>StackExample</vh>
<v t="swot.20221029142534.3"><vh>build()</vh>
<v t="swot.20221029142715.2"><vh>Scaffold</vh>
<v t="swot.20221029142715.3"><vh>appBar</vh></v>
<v t="swot.20221029142715.4"><vh>body</vh>
<v t="swot.20221029142815.2"><vh>Center</vh>
<v t="swot.20221029142627.1"><vh>Stack</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029143324.2"><vh>ElevatedButton -- show StackExample</vh></v>
</v>
<v t="swot.20221029144518.1"><vh>StepperExample</vh>
<v t="swot.20221029190037.1"><vh>ElevatedButton -- show StepperExample</vh></v>
<v t="swot.20221029144530.2"><vh>StepperExample</vh>
<v t="swot.20221029144530.3"><vh>varible</vh></v>
<v t="swot.20221029144530.4"><vh>initState()</vh></v>
<v t="swot.20221029144530.5"><vh>dispose()</vh></v>
<v t="swot.20221029144530.6"><vh>build()</vh>
<v t="swot.20221029144924.2"><vh>Scaffold</vh>
<v t="swot.20221029144924.3"><vh>appBar</vh></v>
<v t="swot.20221029144924.4"><vh>body</vh>
<v t="swot.20221029144954.2"><vh>Center</vh>
<v t="swot.20221029145033.1"><vh>Stepper</vh>
<v t="swot.20221029191553.1"><vh>steps</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029211447.1"><vh>StreamBuilderExample</vh>
<v t="swot.20221029213808.1"><vh>ElevatedButton -- show StreamBuilderExample</vh></v>
<v t="swot.20221029211743.1"><vh>generateStream -- FAKE FIREBASE STREAM</vh></v>
<v t="swot.20221029211533.2"><vh>StreamBuilderExample</vh>
<v t="swot.20221029211533.6"><vh>build()</vh>
<v t="swot.20221029213944.2"><vh>Scaffold</vh>
<v t="swot.20221029213944.3"><vh>appBar</vh></v>
<v t="swot.20221029213944.4"><vh>body</vh>
<v t="swot.20221029212803.2"><vh>Center</vh>
<v t="swot.20221029212812.1"><vh>StreamBuilder</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221029215342.1"><vh>SwitchExample</vh>
<v t="swot.20221029215656.1"><vh>show SwitchExample</vh></v>
<v t="swot.20221029215403.2"><vh>SwitchExample</vh>
<v t="swot.20221029215403.3"><vh>varible</vh></v>
<v t="swot.20221029215403.4"><vh>initState()</vh></v>
<v t="swot.20221029215403.5"><vh>dispose()</vh></v>
<v t="swot.20221029215403.6"><vh>build()</vh>
<v t="swot.20221029215500.2"><vh>Center</vh>
<v t="swot.20221029215505.1"><vh>Switch</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023175848.1"><vh>T</vh>
<v t="swot.20221023181752.1"><vh>TableExample</vh>
<v t="swot.20221023193833.2"><vh>TableExample</vh>
<v t="swot.20221023193833.3"><vh>build()</vh>
<v t="swot.20221023193950.2"><vh>Scaffold</vh>
<v t="swot.20221023193950.3"><vh>appBar</vh></v>
<v t="swot.20221023193950.4"><vh>body</vh>
<v t="swot.20221023194122.1"><vh>Center</vh>
<v t="swot.20221023200224.1"><vh>SingleChildScrollView</vh>
<v t="swot.20221023194310.1"><vh>Table</vh>
<v t="swot.20221023194533.1"><vh>TableRow</vh>
<v t="swot.20221023194941.1"><vh>TableCell</vh></v>
<v t="swot.20221023194949.1"><vh>TableCell</vh></v>
<v t="swot.20221023194950.1"><vh>TableCell</vh></v>
</v>
<v t="swot.20221023195102.1"><vh>List.generate</vh>
<v t="swot.20221023195414.1"><vh>TableCell</vh></v>
<v t="swot.20221023195426.1"><vh>TableCell</vh></v>
<v t="swot.20221023195426.2"><vh>TableCell</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221023195608.1"><vh>show TableExample</vh></v>
</v>
<v t="swot.20221027182452.1"><vh>TextFormFieldExample</vh>
<v t="swot.20221027175533.2"><vh>TextFormFieldExample</vh>
<v t="swot.20221027175533.3"><vh>varible</vh></v>
<v t="swot.20221027175533.4"><vh>initState()</vh></v>
<v t="swot.20221027175533.5"><vh>dispose()</vh></v>
<v t="swot.20221027175533.6"><vh>build()</vh>
<v t="swot.20221027183133.2"><vh>Scaffold</vh>
<v t="swot.20221027183133.3"><vh>appBar</vh></v>
<v t="swot.20221027183133.4"><vh>body</vh>
<v t="swot.20221027180846.1"><vh>SingleChildScrollView</vh>
<v t="swot.20221027180945.1"><vh>Form</vh>
<v t="swot.20221027182206.1"><vh>Column</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027182544.1"><vh>show TextFormFieldExample</vh></v>
</v>
<v t="swot.20221029215808.1"><vh>TabPageSelectorExample</vh>
<v t="swot.20221029222412.2"><vh>ElevatedButton -- show TabPageSelectorExample</vh></v>
<v t="swot.20221029220342.1"><vh>tabPageSelectorWidgets</vh></v>
<v t="swot.20221029220227.2"><vh>TabPageSelectorExample</vh>
<v t="swot.20221029220227.3"><vh>varible</vh></v>
<v t="swot.20221029220227.4"><vh>initState()</vh></v>
<v t="swot.20221029220227.5"><vh>dispose()</vh></v>
<v t="swot.20221029220227.6"><vh>build()</vh>
<v t="swot.20221029221243.2"><vh>Scaffold</vh>
<v t="swot.20221029221243.3"><vh>appBar</vh></v>
<v t="swot.20221029221243.4"><vh>body</vh>
<v t="swot.20221029221337.1"><vh>Stack</vh></v>
</v>
<v t="swot.20221029221243.6"><vh>floatingActionButton</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221027213439.1"><vh>@spot</vh>
<v t="swot.20221027212222.2"></v>
<v t="swot.20221028064229.2"></v>
<v t="swot.20221028084729.2"></v>
<v t="swot.20221028093414.2"></v>
<v t="swot.20221028130417.2"></v>
<v t="swot.20221029092751.2"></v>
<v t="swot.20221029115307.2"></v>
<v t="swot.20221029122755.2"></v>
<v t="swot.20221029130827.2"></v>
<v t="swot.20221029140231.2"></v>
<v t="swot.20221029142534.2"></v>
<v t="swot.20221029144530.2"></v>
<v t="swot.20221029211533.2"></v>
<v t="swot.20221029215403.2"></v>
<v t="swot.20221029220227.2"></v>
</v>
</vnodes>
<tnodes>
<t tx="swot.20221017093031.1">Every Flutter Widgets - Part One - 50 Widgets
https://www.youtube.com/watch?v=P3LzkpHBcnI&amp;list=PL82uaKJraAILRBFE1XhCyfvu-Fclc6vv1&amp;index=1&amp;ab_channel=FlutterMapp

TOP 70 Flutter Widgets EVER (Only For Pro)
https://www.youtube.com/watch?v=G1LGOH424lo

</t>
<t tx="swot.20221017093031.150">@language md
## Flutter built in Widgets

This project is for main using Widgets.

Using Literate Programming [leo-editor](https://github.com/leo-editor/leo-editor) tool to manage code structure.

### A...

    AboutDialog
    AboutListTile
    AbsorbPointer -- include button can not be clicked
    AlertDialog
    Align
    AnimatedAlign
    AnimatedBuilder
    AnimatedContainer
    AnimatedCrossFade
    AnimatedDefaultTextStyle
    AnimatedIcon
    AnimatedList
    AnimatedModalBarrier
    AnimatedOpacity
    AnimatedPadding
    AnimatedPhysicalModel
    AnimatedPositioned
    AnimatedRotation
    AnimatedSize
    AnimatedSwitcher
    AppBar
    AspectRatio
    AutoComplete

### B...

    BackdropFilterExample
    BannerExample
    BaselineExample
    BlockSemanticsExample -- 适用于读屏功能的处理
    BottomNavigationBarExample
    BottomSheetExample
    BuilderExample

### C...

    CardExample
    CenterExample
    CheckboxExample
    CheckboxListTileExample
    ChipExample
    ChoiceChipExample
    CircleAvatarExample
    CircularProgressIndicatorExample
    ClipOvalExample
    ClipPathExample
    ClipRectExample
    ClipRRectExample
    CloseButtonExample
    ColoredBoxExample
    ColorFilteredExample
    ConstrainedBoxExample
    ContainerExample
    ColumnExample
    CupertinoActionSheetExample
    CupertinoAppExample
    CupertinoContextMenuExample  -- longPress

### D...

    DismissibleExample
    DraggableScrollableExample
    DragTargetExample
    DrawerExample

### E

    ExpandedExample -- height in Expanded takes no effect

### F

    FadeInImageExample
    FlexibleExample
    floatingActionButton
    FormExample
    FractionallySizedBoxExample
    FutureBuilderExample

### G

    GestureDetectorExample
    GridViewExample
    GridTileExample

### H

    HeroExample

### I...

    InteractiveViewerExample
    IgnorePointerExample
    IndexedStackExample

### L...

    LongPressDraggableExample
    ListViewExample

### M...

    MaterialBannerExample

### N

    NavigationBarExample

### P...

    PreferredSizeExample
    PopupMenuButtonExample

### R...

    ReorderableListViewExample  -- longPress

### S...

    DatePickerExample
    TimePickerExample
    DateRangePickerExample
    StackExample
    StepperExample
    StreamBuilderExample
    SwitchExample

### T...

    TableExample
    TextFormFieldExample
    TabPageSelectorExample
</t>
<t tx="swot.20221017093031.151">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.152">@doc
@language asciidoc
:nofooter:
image::../image/AboutDialog.png[AboutDialog,240]

@c
@language dart
@tabwidth -2
const AboutDialog(
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter App',
  applicationVersion: 'version 1.0.0',
  children: [
    Text('This is a text created by Flutter Mapp'),
  ],
),

</t>
<t tx="swot.20221017093031.153">@doc
@language asciidoc
:nofooter:
image::../image/AboutListTile.png[AboutListTile,240]

@c
@language dart
@tabwidth -2
const AboutListTile(
  icon: Icon(Icons.info),
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter',
  applicationVersion: 'version 1.0.0',
  aboutBoxChildren: [
    Text('This is a text created by Flutter Mapp'),
  ],
),
</t>
<t tx="swot.20221017093031.154">@doc
@language asciidoc
:nofooter:
image::../image/AbsorbPointer.png[AbsorbPointer,240]

@c
@language dart
@tabwidth -2
AbsorbPointer(
  child:
    @others
),
</t>
<t tx="swot.20221017093031.155">@language dart
@tabwidth -2
ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue.shade200,
  ),
  onPressed: (){},
  child: Text("不能点"),
),
</t>
<t tx="swot.20221017093031.156">AlertDialog(
  actions: [
    TextButton(
      onPressed: (){
        Navigator.of(context).pop();
      },
      child: const Text('Close'),
    ),
  ],
  title: const Text('Flutter App'),
  contentPadding: const EdgeInsets.all(20.0),
  content: const Text('This is the alert Dialog'),
),
</t>
<t tx="swot.20221017093031.157">@doc
@language asciidoc
:nofooter:
image::../image/Align.png[Align,240]

@c
@language dart
@tabwidth -2
const Align(
  alignment: Alignment.topRight,
  // alignment: Alignment.bottonLeft,
  child: FlutterLogo(
    size: 20,
  ),
),
</t>
<t tx="swot.20221017093031.158">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.159">AnimatedAlign(
  alignment: selected ? Alignment.topRight : Alignment.bottomLeft,
  duration: const Duration(seconds: 1),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.160"></t>
<t tx="swot.20221017093031.161">late AnimationController _controllerBuilder;
</t>
<t tx="swot.20221017093031.162">_controllerBuilder = AnimationController(
  duration: const Duration(seconds: 10),  // 转一圈的时间
  vsync: this,                            // use TickerProviderStateMixin
)..repeat();                              // 10s 后重复

</t>
<t tx="swot.20221017093031.163">@doc
@language asciidoc
:nofooter:
1. define _controllerBuilder
2. _controllerBuilder: need class `with TickerProviderStateMixin`
3. _controllerBuilder: need dispose

@c
@language dart
@tabwidth -2
AnimatedBuilder(
  animation: _controllerBuilder,
  child: const FlutterLogo(size: 30,),
  builder: (BuildContext context, Widget? child){
    return Transform.rotate(
      angle: _controllerBuilder.value * 2.0 * math.pi,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.164">AnimatedContainer(
  width: selected ? 150.0 : 25.0,
  height: selected ? 25.0 : 40.0,
  color: selected ? Colors.blueGrey : Colors.grey,
  alignment: selected ? Alignment.center: AlignmentDirectional.topCenter,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.165">AnimatedCrossFade(
  firstChild: Image.network(
    'https://img2.baidu.com/it/u=2642639611,1941240358&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  secondChild: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  crossFadeState: selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
  duration: const Duration(seconds: 1),
),
</t>
<t tx="swot.20221017093031.166">AnimatedDefaultTextStyle(
  duration: const Duration(milliseconds: 300),
  style: TextStyle(
    fontSize: _fontSize,
    color: _color,
    fontWeight: FontWeight.bold,
  ),
  child: const Text('Flutter'),
),
</t>
<t tx="swot.20221017093031.171"></t>
<t tx="swot.20221017093031.172">final _items = [];
final GlobalKey&lt;AnimatedListState&gt; _key = GlobalKey();
</t>
<t tx="swot.20221017093031.173">void _addItem() {
  _items.insert(0, "Item ${_items.length + 1}");
  _key.currentState!.insertItem(
    0,
    duration: const Duration(seconds: 1),
  );
}
</t>
<t tx="swot.20221017093031.174">void _removeItem(int index) {
  _key.currentState!.removeItem(
    index,
    (_, animation) {
      return SizeTransition(
        sizeFactor: animation,
        child: const Card(
          margin: EdgeInsets.all(10),
          color: Colors.red,
          child: ListTile(
            title: Text(
              "Deleted",
              style: TextStyle(fontSize: 14),
            ),
            visualDensity: VisualDensity(vertical: -3),  // adjust listTile height
            dense: true,
          ),
        ),
      );
    },
    duration: const Duration(milliseconds: 600),
  );
  _items.removeAt(index);
}
</t>
<t tx="swot.20221017093031.175">IconButton(
  onPressed: _addItem,
  icon: const Icon(Icons.add),
),

SizedBox(
  height: 150,
  child:
    @others
),

Divider(),
</t>
<t tx="swot.20221017093031.176">AnimatedList(
  key: _key,
  initialItemCount: 0,
  padding: const EdgeInsets.all(10),
  itemBuilder: (context, index, animation) {
    @others
  },
),
</t>
<t tx="swot.20221017093031.177">return SizeTransition(
  key: UniqueKey(),
  sizeFactor: animation,
  child: Card(
    margin: const EdgeInsets.all(3),
    color: Colors.orangeAccent,
    child: ListTile(
      title: Text(
        _items[index],
        style: const TextStyle(fontSize: 14),
      ),
      trailing: IconButton(
        icon: const Icon(Icons.delete),
        onPressed: (){
          _removeItem(index);
        },
      ),
      visualDensity: const VisualDensity(vertical: -3),  // adjust listTile height
      dense: true,  // 高度会更加紧密，就是高度更小的意思
    ),
  ),
);
</t>
<t tx="swot.20221017093031.178"></t>
<t tx="swot.20221017093031.179">const AnimatedModalBarrierExample(),
</t>
<t tx="swot.20221017093031.180">@language dart
@tabwidth -2
class AnimatedModalBarrierExample extends StatefulWidget {
  const AnimatedModalBarrierExample({super.key});

  @override
  State&lt;AnimatedModalBarrierExample&gt; createState() =&gt; _AnimatedModalBarrierExampleState();
}

class _AnimatedModalBarrierExampleState extends State&lt;AnimatedModalBarrierExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221017093031.181">bool _isPressed = false;
late Widget _animatedModalBarrier;
late AnimationController _animationController;
late Animation&lt;Color?&gt; _colorAnimation;

</t>
<t tx="swot.20221017093031.182">@override
void initState() {
  ColorTween colorTween = ColorTween(
    begin: Colors.orangeAccent.withOpacity(0.5),
    end: Colors.blueGrey.withOpacity(0.5),
  );
  _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
  );
  _colorAnimation = colorTween.animate(_animationController);
  _animatedModalBarrier = AnimatedModalBarrier(
    color: _colorAnimation,
    dismissible: true,
  );
  super.initState();
}
</t>
<t tx="swot.20221017093031.183">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.184">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 50.0,
    width: 150.0,
    child: Stack(
      alignment: AlignmentDirectional.center,
      children: [
        @others
      ],
    ),
  );
}
</t>
<t tx="swot.20221017093031.185">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  onPressed: (){
    setState(() {
      _isPressed = true;
    });
    _animationController.reset();
    _animationController.forward();
    Future.delayed(
      const Duration(seconds: 3), (){
        setState(() {
          _isPressed = false;
        });
      }
    );
  },
  child: const Text('Press'),
),
</t>
<t tx="swot.20221017093031.186">if (_isPressed) _animatedModalBarrier,
</t>
<t tx="swot.20221017093031.187"></t>
<t tx="swot.20221017093031.188">@language dart
@tabwidth -2
class AnimatedOpacityExample extends StatefulWidget {
  const AnimatedOpacityExample({super.key});

  @override
  State&lt;AnimatedOpacityExample&gt; createState() =&gt; _AnimatedOpacityExampleState();
}

class _AnimatedOpacityExampleState extends State&lt;AnimatedOpacityExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.189">double opacityLevel = 1.0;
</t>
<t tx="swot.20221017093031.190">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.191">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.192">AnimatedOpacity(
  opacity: opacityLevel,
  duration: const Duration(seconds: 2),
  child: const FlutterLogo(size: 30),
),

</t>
<t tx="swot.20221017093031.193">ElevatedButton(
  child: const Text('Fade Logo'),
  onPressed: (){
    setState(
      () =&gt; opacityLevel = opacityLevel == 0 ? 1.0 : 0.0,
    );
  },
),
</t>
<t tx="swot.20221017093031.194">AnimatedOpacityExample(),

Divider(),
</t>
<t tx="swot.20221017093031.195"></t>
<t tx="swot.20221017093031.196">AnimatedPaddingExample(),

Divider(),
</t>
<t tx="swot.20221017093031.197">@language dart
@tabwidth -2
class AnimatedPaddingExample extends StatefulWidget {
  const AnimatedPaddingExample({super.key});

  @override
  State&lt;AnimatedPaddingExample&gt; createState() =&gt; _AnimatedPaddingExampleState();
}

class _AnimatedPaddingExampleState extends State&lt;AnimatedPaddingExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.198">double padValue = 0.0;
</t>
<t tx="swot.20221017093031.199">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.200">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.201">Column(
  children: [
    @others
  ],
);
</t>
<t tx="swot.20221017093031.202">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.203">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Change padding'),
  onPressed: () {
    setState((){
      padValue = padValue == 0.0 ? 100.0 : 0.0;
    });
  },
),

</t>
<t tx="swot.20221017093031.204">Text('Padding = $padValue'),
</t>
<t tx="swot.20221017093031.205">AnimatedPadding(
  // padValue will be changed
  padding: EdgeInsets.all(padValue),
  duration: const Duration(seconds: 2),
  curve: Curves.easeInOut,
  child: Container(
    width: MediaQuery.of(context).size.width,
    height: 30.0,
    color: Colors.orangeAccent,
  ),
),
</t>
<t tx="swot.20221017093031.206"></t>
<t tx="swot.20221017093031.207">AnimatedPhysicalModelExample(),

Divider(),
</t>
<t tx="swot.20221017093031.208">@language dart
@tabwidth -2
class AnimatedPhysicalModelExample extends StatefulWidget {
  const AnimatedPhysicalModelExample({super.key});

  @override
  State&lt;AnimatedPhysicalModelExample&gt; createState() =&gt; _AnimatedPhysicalModelExampleState();
}

class _AnimatedPhysicalModelExampleState extends State&lt;AnimatedPhysicalModelExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.209">bool isFlat = true;
</t>
<t tx="swot.20221017093031.210">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.211">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.212">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.213">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Click'),
  onPressed: () {
    setState(() {
      isFlat = ! isFlat;
    });
  },
),

</t>
<t tx="swot.20221017093031.214">AnimatedPhysicalModel(
  duration: const Duration(milliseconds: 500),
  curve: Curves.fastOutSlowIn,
  elevation: isFlat ? 0 : 6.0,
  shape: BoxShape.rectangle,
  shadowColor: Colors.black,
  color: Colors.white,
  child: const SizedBox(
    height: 40.0,
    width: 40.0,
    child: Icon(Icons.android_outlined),
  ),
),

</t>
<t tx="swot.20221017093031.215"></t>
<t tx="swot.20221017093031.216">AnimatedPositionedExample(),

Divider(),
</t>
<t tx="swot.20221017093031.217">@language dart
@tabwidth -2
class AnimatedPositionedExample extends StatefulWidget {
  const AnimatedPositionedExample({super.key});

  @override
  State&lt;AnimatedPositionedExample&gt; createState() =&gt; _AnimatedPositionedExampleState();
}

class _AnimatedPositionedExampleState extends State&lt;AnimatedPositionedExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.218">bool selected = false;
</t>
<t tx="swot.20221017093031.219">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.220">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.221">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.222">SizedBox(
  width: 200,
  height: 100,
  child:
    @others
);
</t>
<t tx="swot.20221017093031.223">Stack(
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221017093031.224">AnimatedPositioned(
  width: selected ? 200.0 : 150.0,
  height: selected ? 60.0 : 20.0,
  top: selected ? 35.0: 5.0,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: GestureDetector(
    onTap: () {
      setState(() {
        selected = !selected;
      });
    },
    child: Container(
      decoration: BoxDecoration(
        color: Colors.orangeAccent,
        borderRadius: BorderRadius.circular(25),
      ),
      child: const Text('click change position'),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.225"></t>
<t tx="swot.20221017093031.226">AnimatedRotationExample(),

Divider(),
</t>
<t tx="swot.20221017093031.227">@language dart
@tabwidth -2
class AnimatedRotationExample extends StatefulWidget {
  const AnimatedRotationExample({super.key});

  @override
  State&lt;AnimatedRotationExample&gt; createState() =&gt; _AnimatedRotationExampleState();
}

class _AnimatedRotationExampleState extends State&lt;AnimatedRotationExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.228">double turns = 0.0;
</t>
<t tx="swot.20221017093031.229">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.230">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.231">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.232">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Rotate Logo'),
  onPressed: () {
    setState(() {
      turns += 1 / 4;
    });
  },
),

</t>
<t tx="swot.20221017093031.233">Padding(
  padding: const EdgeInsets.all(5),
  child: AnimatedRotation(
    turns: turns,
    duration: const Duration(seconds: 1),
    child: const FlutterLogo(size: 40),
  ),
),
</t>
<t tx="swot.20221017093031.234"></t>
<t tx="swot.20221017093031.235">AnimatedSizeExample(),

Divider(),
</t>
<t tx="swot.20221017093031.236">@language dart
@tabwidth -2
class AnimatedSizeExample extends StatefulWidget {
  const AnimatedSizeExample({super.key});

  @override
  State&lt;AnimatedSizeExample&gt; createState() =&gt; _AnimatedSizeExampleState();
}

class _AnimatedSizeExampleState extends State&lt;AnimatedSizeExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.237">double _size = 30;
</t>
<t tx="swot.20221017093031.238">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.239">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.240">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.241">Text("Click logo change size"),
</t>
<t tx="swot.20221017093031.242">GestureDetector(
  onTap: (){
    setState(() {
      _size = _size == 30 ? 60 : 30;
    });
  },
  child: Container(
    color: Colors.white,
    child: AnimatedSize(
      curve: Curves.easeIn,
      duration: const Duration(seconds: 1),
      child: FlutterLogo(size: _size),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.243"></t>
<t tx="swot.20221017093031.244">@language dart
@tabwidth -2
class AnimatedSwitcherExample extends StatefulWidget {
  const AnimatedSwitcherExample({super.key});

  @override
  State&lt;AnimatedSwitcherExample&gt; createState() =&gt; _AnimatedSwitcherExampleState();
}

class _AnimatedSwitcherExampleState extends State&lt;AnimatedSwitcherExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.245">int _count = 0;
</t>
<t tx="swot.20221017093031.246">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.247">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.248">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.249">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Add'),
  onPressed: () {
    setState(() {
      _count += 1;
    });
  },
),

</t>
<t tx="swot.20221017093031.250">AnimatedSwitcher(
  duration: const Duration(milliseconds: 500),
  child: Text(
    '$_count',
    style: const TextStyle(fontSize: 30),
    key: ValueKey(_count),  // 重要，不加这行无法实现动画
  ),
  // 若不想要默认的动画效果，可能这样指定
  transitionBuilder: (Widget child, Animation&lt;double&gt; animation) {
    return ScaleTransition(
      scale: animation,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.251">AnimatedSwitcherExample(),

Divider(),
</t>
<t tx="swot.20221017093031.252">appBar: AppBar(
  title: const Text('Demo A'),
  centerTitle: true,

  // leading: IconButton(
    // icon: const Icon(Icons.menu),
    // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: (){},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0,  // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221017093031.253">Container(
  color: Colors.orangeAccent,
  alignment: Alignment.center,
  width: double.infinity,
  height: 100,
  // height: 200,
  child: AspectRatio(
    aspectRatio: 16 / 9,
    child: Container(
      color: Colors.blueGrey,
      alignment: Alignment.center,
      child: const Text("AspecRatio 16 / 9"),
    ),
  ),
),
Divider(),
</t>
<t tx="swot.20221017093031.254"></t>
<t tx="swot.20221017093031.255">AutoCompleteExample(),

Divider(),
</t>
<t tx="swot.20221017093031.256">@language dart
@tabwidth -2
class AutoCompleteExample extends StatelessWidget {
  const AutoCompleteExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221017093031.257">static const List&lt;String&gt; listItems = &lt;String&gt;[
  'apple',
  'banana',
  'melon',
];
</t>
<t tx="swot.20221017093031.258">@override
Widget build(BuildContext context) {
  return Autocomplete&lt;String&gt;(
    optionsBuilder: (TextEditingValue textEditingValue) {  // user input value
      if (textEditingValue.text == '') {
        return const Iterable&lt;String&gt;.empty();
      }
      return listItems.where((String item) {
        return item.contains(textEditingValue.text.toLowerCase());
      });
    },
    onSelected: (String item) {
      print('The $item was selected');
    },
  );
}
</t>
<t tx="swot.20221017093031.259">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221019111317.2">@language dart
@tabwidth -2
class BackdropFilterExample extends StatelessWidget {
  const BackdropFilterExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221019111317.3">@override
Widget build(BuildContext context) {
  return Stack(
    children: &lt;Widget&gt;[
      Text(
        '0' * 300,
        style: const TextStyle(
          color: Colors.green,
        ),
      ),
      Center(
        child: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(
              sigmaX: 4.0,
              sigmaY: 4.0,
            ),
            child: Container(
              alignment: Alignment.center,
              width: 100,
              height: 100,
              child: const Text('Blur'),
            ),
          ),
        ),
      ),
    ],
  );
}
</t>
<t tx="swot.20221021173506.1">BackdropFilterExample(),
</t>
<t tx="swot.20221021173546.1"></t>
<t tx="swot.20221021174618.1"></t>
<t tx="swot.20221021175217.2">@language dart
@tabwidth -2
class BannerExample extends StatelessWidget {
  const BannerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221021175217.3">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221021175330.1">Center(
  child:
    @others
);
</t>
<t tx="swot.20221021175401.1">Container(
  margin: const EdgeInsets.all(10.0),
  child:
    @others
),
</t>
<t tx="swot.20221021175506.1">Container(
  color: Colors.blueGrey,
  child:
    @others
),
</t>
<t tx="swot.20221021175604.1">Padding(
  padding: const EdgeInsets.fromLTRB(10, 20, 10, 20),
  child:
    @others
),
</t>
<t tx="swot.20221021175702.1">Column(
  mainAxisSize: MainAxisSize.min,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221021175915.1">Image.network(
  'https://img1.baidu.com/it/u=1855083458,281793390&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=989&amp;h=500',
),
</t>
<t tx="swot.20221021180035.1">const SizedBox(height: 10),
</t>
<t tx="swot.20221021180106.1">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  children: [
    const Text(
      'Flutter Course',
      style: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    ),
    ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.orangeAccent,
      ),
      child: const Text('Get now'),
      onPressed: () {},
    ),
  ],
),
</t>
<t tx="swot.20221021180745.1">ClipRect(
  child:
    @others
),
</t>
<t tx="swot.20221021180828.1">Banner(
  message: "25% off",
  location: BannerLocation.topEnd,
  color: Colors.red,
  child:
    @others
),
</t>
<t tx="swot.20221021181118.1">BannerExample(),
</t>
<t tx="swot.20221021181511.1"></t>
<t tx="swot.20221021181642.2">@language dart
@tabwidth -2
class BaselineExample extends StatelessWidget {
  const BaselineExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221021181642.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Container(
      width: 100,
      height: 100,
      color: Colors.orange,
      child: const Baseline(
        baseline: 0,
        // baseline: 30,
        baselineType: TextBaseline.alphabetic,
        child: FlutterLogo(size: 30,),
      ),
    ),
  );
}
</t>
<t tx="swot.20221021181700.1">BaselineExample(),
</t>
<t tx="swot.20221021182532.1"></t>
<t tx="swot.20221022080218.2">@language dart
@tabwidth -2
class BlockSemanticsExample extends StatefulWidget {
  const BlockSemanticsExample({super.key});

  @override
  State&lt;BlockSemanticsExample&gt; createState() =&gt; _BlockSemanticsExampleState();
}

class _BlockSemanticsExampleState extends State&lt;BlockSemanticsExample&gt;{
  @others
}

</t>
<t tx="swot.20221022080218.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022080218.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022080218.5">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221022080422.1">SizedBox(
  width: double.infinity,
  child:
    @others
);
</t>
<t tx="swot.20221022083203.1">SizedBox(
  width: 500,
  height: 135,
  child:
  @others
),
</t>
<t tx="swot.20221022083314.1">// showSemanticsDebugger: true,
</t>
<t tx="swot.20221022083723.1">bool isShow = false;
</t>
<t tx="swot.20221022083954.1">Column(
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221022084045.1">OutlinedButton(
  onPressed: () {
    setState(() {
      isShow = true;
    });
  },
  child: const Text('Click'),
),
</t>
<t tx="swot.20221022084513.1">if (isShow)
@others
</t>
<t tx="swot.20221022085519.1">BlockSemanticsExample(),
</t>
<t tx="swot.20221022090937.1">Card(
  color: Colors.orangeAccent,
  child: SizedBox(
    width: 200,
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text('This is a card'),
        TextButton(
          child: const Text('Close'),
          onPressed: () =&gt; setState(() {
            isShow = false;
          }),
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022091825.1">BlockSemantics(
  blocking: isShow,  // hidden OutlinedButton?
  child:
  @others
),
</t>
<t tx="swot.20221022093209.1"></t>
<t tx="swot.20221022094100.2">@language dart
@tabwidth -2
class BottomNavigationBarExample extends StatefulWidget {
  const BottomNavigationBarExample({super.key});

  @override
  State&lt;BottomNavigationBarExample&gt; createState() =&gt; _BottomNavigationBarExampleState();
}

class _BottomNavigationBarExampleState extends State&lt;BottomNavigationBarExample&gt;{
  @others
}

</t>
<t tx="swot.20221022094100.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022094100.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022094100.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221022094133.1">int _currentIndex = 0;

List&lt;Widget&gt; body = const [
  Icon(Icons.home),
  Icon(Icons.menu),
  Icon(Icons.person),
];

</t>
<t tx="swot.20221022094818.1">BottomSheetExample(),
</t>
<t tx="swot.20221022095720.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221022095720.4">body: Center(
  child: body[_currentIndex],
),
</t>
<t tx="swot.20221022095720.5">bottomNavigationBar: BottomNavigationBar(  // new 底部
  fixedColor: Colors.white,
  backgroundColor: Colors.blue,
  items: const [
    BottomNavigationBarItem(
      label: 'Home',
      icon: Icon(Icons.home),
    ),
    BottomNavigationBarItem(
      label: 'Menu',
      icon: Icon(Icons.menu),
    ),
    BottomNavigationBarItem(
      label: 'Profile',
      icon: Icon(Icons.person),
    ),
  ],
  currentIndex: _currentIndex,
  type: BottomNavigationBarType.fixed,
  // type: BottomNavigationBarType.shifting, // 很有意思的样式
  onTap: (int index) {
    setState(() {
      _currentIndex = index;
    });
  }
),
</t>
<t tx="swot.20221022101129.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('show BottomNavigationBarExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; BottomNavigationBarExample(),
      ),
    );
  },
),


</t>
<t tx="swot.20221022101748.1">appBar: AppBar(
  title: Text('NewPage'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221022104749.1"></t>
<t tx="swot.20221022104755.1"></t>
<t tx="swot.20221022104843.2">@language dart
@tabwidth -2
class BottomSheetExample extends StatefulWidget {
  const BottomSheetExample({super.key});

  @override
  State&lt;BottomSheetExample&gt; createState() =&gt; _BottomSheetExampleState();
}

class _BottomSheetExampleState extends State&lt;BottomSheetExample&gt;{
  @others
}

</t>
<t tx="swot.20221022104843.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022104843.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022104843.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ElevatedButton(
      child: const Text('Modal Bottom Sheet'),
      onPressed: () {
        showModalBottomSheet(
          context: context,
          builder: (BuildContext context) {
            return SizedBox(
              height: 200,
              child: Center(
                child: ElevatedButton(
                  child: const Text('Close'),
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
              ),
            );
          },
        );
      },
    ),
  );
}
</t>
<t tx="swot.20221022110627.2">@language dart
@tabwidth -2
class BuilderExample extends StatelessWidget {
  const BuilderExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022110627.3">@override
Widget build(BuildContext context) {
  return myBuilderWidget();
}
</t>
<t tx="swot.20221022110900.1">// 不加 Builder,则无法找到上面 build's context, 
myBuilderWidget() =&gt; Builder(
  builder: (context) {
    return Text(
      'Text with Theme',
      // context 需要使用上面的 Builder 来获取
      style: Theme.of(context).textTheme.displayLarge,
    );
  }
);
</t>
<t tx="swot.20221022115422.1">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221022121559.5">CardExample(),
Divider(),
</t>
<t tx="swot.20221022121755.2">@language dart
@tabwidth -2
class CardExample extends StatelessWidget {
  const CardExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022121755.3">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022121827.1"></t>
<t tx="swot.20221022122022.1">Card(
  elevation: 20,
  color: Colors.orangeAccent,
  child: Padding(
    padding: const EdgeInsets.all(10.0),
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const SizedBox(height: 8),
        const Text('This is a Flutter card'),
        TextButton(
          child: const Text('Press'),
          onPressed: () {},
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022122630.1"></t>
<t tx="swot.20221022122655.2">@language dart
@tabwidth -2
class CenterExample extends StatelessWidget {
  const CenterExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022122655.3">@override
Widget build(BuildContext context) {
  return Column(
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      Container(
        color: Colors.orangeAccent,
        child:
        @others
      ),
    ]
  );
}
</t>
<t tx="swot.20221022122945.1">const Center(
  heightFactor: 5,  // Text 组件高度倍数（Container有高度则无效）
  child: Text('Flutter learning'),
),
</t>
<t tx="swot.20221022123052.1">CenterExample(),
Divider(),
</t>
<t tx="swot.20221022124036.1"></t>
<t tx="swot.20221022141252.2">@language dart
@tabwidth -2
class CheckboxExample extends StatefulWidget {
  const CheckboxExample({super.key});

  @override
  State&lt;CheckboxExample&gt; createState() =&gt; _CheckboxExampleState();
}

class _CheckboxExampleState extends State&lt;CheckboxExample&gt;{
  @others
}

</t>
<t tx="swot.20221022141252.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022141252.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022141252.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Checkbox(
      value: isChecked,
      activeColor: Colors.orangeAccent,
      tristate: true,  // allow null value
      onChanged: (newBool) {
        setState(() {
          isChecked = newBool;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221022141315.1">bool? isChecked = false;
</t>
<t tx="swot.20221022141621.1">CheckboxExample(),
Divider(),
</t>
<t tx="swot.20221022141927.1"></t>
<t tx="swot.20221022141946.2">@language dart
@tabwidth -2
class CheckboxListTileExample extends StatefulWidget {
  const CheckboxListTileExample({super.key});

  @override
  State&lt;CheckboxListTileExample&gt; createState() =&gt; _CheckboxListTileExampleState();
}

class _CheckboxListTileExampleState extends State&lt;CheckboxListTileExample&gt;{
  @others
}

</t>
<t tx="swot.20221022141946.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022141946.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022141946.5">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022142005.1">bool? _isChecked = false;
</t>
<t tx="swot.20221022142124.1">CheckboxListTile(
  title: const Text('Checkbox List Tile'),
  value: _isChecked,
  onChanged: (bool? newValue) {
    setState(() {
      _isChecked = newValue;
    });
  },
  activeColor: Colors.orangeAccent,
  checkColor: Colors.white,
  tileColor: Colors.black12,
  subtitle: const Text('This is a subtitle'),
  controlAffinity: ListTileControlAffinity.leading,
  tristate: true,
),
</t>
<t tx="swot.20221022142602.1">CheckboxListTileExample(),
Divider(),
</t>
<t tx="swot.20221022142903.1"></t>
<t tx="swot.20221022142919.2">@language dart
@tabwidth -2
class ChipExample extends StatelessWidget {
  const ChipExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022142919.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Chip(
      label: const Text("This is a Flutter chip"),
      onDeleted: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022143204.1">ChipExample(),
Divider(),
</t>
<t tx="swot.20221022144321.1"></t>
<t tx="swot.20221022144339.2">@language dart
@tabwidth -2
class ChoiceChipExample extends StatefulWidget {
  const ChoiceChipExample({super.key});

  @override
  State&lt;ChoiceChipExample&gt; createState() =&gt; _ChoiceChipExampleState();
}

class _ChoiceChipExampleState extends State&lt;ChoiceChipExample&gt;{
  @others
}

</t>
<t tx="swot.20221022144339.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022144339.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022144339.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ChoiceChip(
      label: const Text("Choice Chip"),
      selected: isSelected,
      selectedColor: Colors.orangeAccent,
      onSelected: (bool newState) {
        setState(() {
          isSelected = newState;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221022144356.1">bool isSelected = false;
</t>
<t tx="swot.20221022144701.1">ChoiceChipExample(),
Divider(),
</t>
<t tx="swot.20221022144956.1"></t>
<t tx="swot.20221022145018.2">@language dart
@tabwidth -2
class CircleAvatarExample extends StatelessWidget {
  const CircleAvatarExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022145018.3">@override
Widget build(BuildContext context) {
  return const Center(
    child: CircleAvatar(
      backgroundColor: Colors.orangeAccent,
      radius: 30,
      // backgroundImage: AssetImage(''),
      backgroundImage: NetworkImage("https://img1.baidu.com/it/u=4237790906,511339359&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=400&amp;h=400"),
      child: Text(
        'Hello',
        style: TextStyle(color: Colors.red),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022145230.1">CircleAvatarExample(),
Divider(),
</t>
<t tx="swot.20221022153206.1"></t>
<t tx="swot.20221022153237.2">@language dart
@tabwidth -2
class CircularProgressIndicatorExample extends StatefulWidget {
  const CircularProgressIndicatorExample({super.key});

  @override
  State&lt;CircularProgressIndicatorExample&gt; createState() =&gt; _CircularProgressIndicatorExampleState();
}

class _CircularProgressIndicatorExampleState extends State&lt;CircularProgressIndicatorExample&gt;{
  @others
}

</t>
<t tx="swot.20221022153237.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022153237.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022153237.5">@override
Widget build(BuildContext context) {
  return Center(
    child: CircularProgressIndicator(
      color: Colors.orangeAccent,
      backgroundColor: Colors.blueGrey,
      value: 0.40,
    ),
  );
}
</t>
<t tx="swot.20221022153425.1">CircularProgressIndicatorExample(),
Divider(),
</t>
<t tx="swot.20221022153732.1"></t>
<t tx="swot.20221022153848.2">@language dart
@tabwidth -2
class ClipOvalExample extends StatelessWidget {
  const ClipOvalExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022153848.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipOval(
      clipper: CustomClip(),  // change shape
      child: Container(
        width: 60,
        height: 60,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022154220.1">ClipOvalExample(),
Divider(),
</t>
<t tx="swot.20221022154849.1">class CustomClip extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return Rect.fromLTWH(0, 0, size.width - 10, size.height);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022161923.1"></t>
<t tx="swot.20221022161946.2">@language dart
@tabwidth -2
class ClipPathExample extends StatelessWidget {
  const ClipPathExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022161946.3">@override
Widget build(BuildContext context) {
  return ClipPath(
    clipper: MyClipper1(),
    child: Container(
      width: double.infinity,
      height: 100,
      color: const Color(0xFF142B46),
    ),
  );
}
</t>
<t tx="swot.20221022162124.1">ClipPathExample(),
Divider(),
</t>
<t tx="swot.20221022162343.1">class MyClipper1 extends CustomClipper&lt;Path&gt; {
  @override
  Path getClip(Size size) {
    return Path()
      ..lineTo(0, size.height)
      ..quadraticBezierTo(
        size.width / 4,
        size.height - 40,
        size.width / 2,
        size.height - 20,
      )
      ..quadraticBezierTo(
        3 / 4 * size.width,
        size.height,
        size.width,
        size.height - 30,
      )
      ..lineTo(size.width, 0);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Path&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022163908.1"></t>
<t tx="swot.20221022163926.2">@language dart
@tabwidth -2
class ClipRectExample extends StatelessWidget {
  const ClipRectExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022163926.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipRect(
      clipper: MyClipper2(),
      child: Container(
        width: 100,
        height: 100,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022164337.1">class MyClipper2 extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return const Rect.fromLTWH(0, 0, 80, 80);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022164554.1">ClipRectExample(),
Divider(),
</t>
<t tx="swot.20221022165235.1"></t>
<t tx="swot.20221022165324.2">@language dart
@tabwidth -2
class ClipRRectExample extends StatefulWidget {
  const ClipRRectExample({super.key});

  @override
  State&lt;ClipRRectExample&gt; createState() =&gt; _ClipRRectExampleState();
}

class _ClipRRectExampleState extends State&lt;ClipRRectExample&gt;{
  @others
}

</t>
<t tx="swot.20221022165324.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022165324.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022165324.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipRRect(
      borderRadius: BorderRadius.circular(30),
      child: Image.network(
        'https://img1.baidu.com/it/u=3866320064,995069430&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500',
        width: 250
      ),
    ),
  );
}
</t>
<t tx="swot.20221022165721.1">ClipRRectExample(),
Divider(),
</t>
<t tx="swot.20221022170537.1"></t>
<t tx="swot.20221022170557.2">@language dart
@tabwidth -2
class CloseButtonExample extends StatelessWidget {
  const CloseButtonExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022170557.3">@override
Widget build(BuildContext context) {
  return Center(
    child: CloseButton(
      color: Colors.red,
      onPressed: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022170737.1">CloseButtonExample(),
Divider(),
</t>
<t tx="swot.20221022171451.1"></t>
<t tx="swot.20221022171523.2">@language dart
@tabwidth -2
class ColoredBoxExample extends StatelessWidget {
  const ColoredBoxExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022171523.3">@override
Widget build(BuildContext context) {
  return const Center(
    child: ColoredBox(
      color: Colors.orangeAccent,
      child: SizedBox(
        width: 100,
        height: 100,
        child: Center(
          child: Text('ColoredBox'),
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022171708.1">ColoredBoxExample(),
Divider(),
</t>
<t tx="swot.20221022172614.1"></t>
<t tx="swot.20221022172641.2">@language dart
@tabwidth -2
class ColorFilteredExample extends StatelessWidget {
  const ColorFilteredExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022172641.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ColorFiltered(
      colorFilter: const ColorFilter.mode(
        Colors.pink,
        BlendMode.color,
      ),
      child: Image.network(
        'https://img1.baidu.com/it/u=457294142,2860827883&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=658&amp;h=439',
        height: 150,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022173017.1">ColorFilteredExample(),
Divider(),
</t>
<t tx="swot.20221022201311.1"></t>
<t tx="swot.20221022201619.2">@language dart
@tabwidth -2
class ConstrainedBoxExample extends StatelessWidget {
  const ConstrainedBoxExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022201619.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ConstrainedBox(
      constraints: const BoxConstraints(
        maxWidth: 200,
        maxHeight: 100,
      ),
      child: Container(
        color: Colors.orangeAccent,
        width: double.infinity,
        height: 50,
        child: const Text('ConstrainedBox'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022202111.1">ConstrainedBoxExample(),
Divider(),
</t>
<t tx="swot.20221022202806.1"></t>
<t tx="swot.20221022202825.2">@language dart
@tabwidth -2
class ContainerExample extends StatelessWidget {
  const ContainerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022202825.3">@override
Widget build(BuildContext context) {
  return Container(
    padding: const EdgeInsets.all(8.0),
    color: Colors.orangeAccent,
    alignment: Alignment.center,
    constraints: const BoxConstraints.expand(height: 100),
    transform: Matrix4.rotationZ(0.2),
    child: const Text('Flutter App'),
  );
}
</t>
<t tx="swot.20221022203303.1">ContainerExample(),
Divider(),
</t>
<t tx="swot.20221022203542.1"></t>
<t tx="swot.20221022203601.2">@language dart
@tabwidth -2
class ColumnExample extends StatelessWidget {
  const ColumnExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022203601.3">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 120,
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      mainAxisAlignment: MainAxisAlignment.end,
      // mainAxisSize: MainAxisSize.min, // Column紧紧包围内容
      children: const [
        Text("data 1"),
        Text("data 2"),
        Text("data 3"),
        Text('data so long long'),
      ],
    ),
  );
}
</t>
<t tx="swot.20221022203824.1">ColumnExample(),
Divider(),
</t>
<t tx="swot.20221022210316.1"></t>
<t tx="swot.20221022210338.2">@language dart
@tabwidth -2
class CupertinoActionSheetExample extends StatefulWidget {
  const CupertinoActionSheetExample({super.key});

  @override
  State&lt;CupertinoActionSheetExample&gt; createState() =&gt; _CupertinoActionSheetExampleState();
}

class _CupertinoActionSheetExampleState extends State&lt;CupertinoActionSheetExample&gt;{
  @others
}

</t>
<t tx="swot.20221022210338.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022210338.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022210338.5">@override
Widget build(BuildContext context) {
  return CupertinoPageScaffold(  // Not important here
    child: Center(
      child: CupertinoButton(
        child: const Text('CupertinoActionSheet'),
        onPressed: () {
          showCupertinoModalPopup(
            context: context,
            builder: (BuildContext context) =&gt; CupertinoActionSheet(
              title: const Text('Flutter App'),
              message: const Text('Your Message'),
              actions: &lt;CupertinoActionSheetAction&gt;[
                CupertinoActionSheetAction(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Do something'),
                ),
                CupertinoActionSheetAction(
                  onPressed: (){
                    Navigator.pop(context);
                  },
                  child: const Text('Do something else'),
                )
              ],
            ),
          );
        },
      ),
    ),
  );
}
</t>
<t tx="swot.20221022210532.1">CupertinoActionSheetExample(),
Divider(),
</t>
<t tx="swot.20221022213225.1"></t>
<t tx="swot.20221022213243.2">@language dart
@tabwidth -2
class CupertinoAppExample extends StatelessWidget {
  const CupertinoAppExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022213243.3">@override
Widget build(BuildContext context) {
  return ElevatedButton(
    style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
    ),
    child: const Text('CupertinoApp'),
    onPressed: () {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; const MyCupertinoApp(),
        ),
      );
    },
  );
}
</t>
<t tx="swot.20221022213726.2">@language dart
@tabwidth -2
class MyCupertinoApp extends StatelessWidget {
  const MyCupertinoApp({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022213726.3">@override
Widget build(BuildContext context) {
  return const CupertinoApp(
    debugShowCheckedModeBanner: false,
    theme: CupertinoThemeData(
      brightness: Brightness.dark,
      scaffoldBackgroundColor: Color.fromARGB(255, 18, 32, 47),
      primaryColor: CupertinoColors.systemOrange,
    ),
    home: CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        middle: Text("Flutter App"),
      ),
      child: Center(
        child: Icon(CupertinoIcons.share),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022214055.1">CupertinoAppExample(),
Divider(),
</t>
<t tx="swot.20221023080337.1"></t>
<t tx="swot.20221023081047.5">MaterialBannerExample(),
</t>
<t tx="swot.20221023081507.1"></t>
<t tx="swot.20221023081535.2">@language dart
@tabwidth -2
class MaterialBannerExample extends StatelessWidget {
  const MaterialBannerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221023081535.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ElevatedButton(
      child: const Text('Open MaterialBanner'),
      onPressed: () {
        ScaffoldMessenger.of(context).showMaterialBanner(
          MaterialBanner(
            padding: const EdgeInsets.all(20),
            content: const Text('Subscribe!'),
            leading: const Icon(Icons.notifications_active_outlined),
            elevation: 5,
            backgroundColor: Colors.white12,
            actions: [
              Builder(
                builder: (context) =&gt; TextButton(
                  onPressed: () {
                    ScaffoldMessenger.of(context).hideCurrentMaterialBanner();
                  },
                  child: const Text('Dismiss'),
                ),
              ),
            ],
          )
        );
      },
    ),
  );
}

@doc
Looking up a deactivated widget's ancestor is unsafe.

At this point the state of the widget's element tree is no longer stable.

To safely refer to a widget's ancestor in its dispose() method, save a reference to the ancestor by calling dependOnInheritedWidgetOfExactType() in the widget's didChangeDependencies() method.

Solved:
https://stackoverflow.com/questions/69141074/showmaterialbanner-doesnt-hide-on-change-route-looking-up-a-deactivated-widgets

@language dart
Builder(  // Can solve above problem
  builder: (context) =&gt; TextButton(
    onPressed: () {
      ScaffoldMessenger.of(context).hideCurrentMaterialBanner();
    },
    child: const Text('Dismiss'),
  ),
)
</t>
<t tx="swot.20221023081552.1"></t>
<t tx="swot.20221023081552.2"></t>
<t tx="swot.20221023081553.1"></t>
<t tx="swot.20221023081553.2"></t>
<t tx="swot.20221023081553.3"></t>
<t tx="swot.20221023081554.1"></t>
<t tx="swot.20221023081554.2"></t>
<t tx="swot.20221023093247.1"></t>
<t tx="swot.20221023093415.1"></t>
<t tx="swot.20221023093803.1">appBar: PreferredSize(
  preferredSize: const Size.fromHeight(80.0),
  child: Container(
    height: 120,
    decoration: const BoxDecoration(
      gradient: LinearGradient(
        colors: &lt;Color&gt;[
          Colors.redAccent,
          Colors.orangeAccent,
        ],
      ),
    ),
    child: SafeArea(
      child: Center(
        child: ListTile(
          title: const Text('PreferredSize'),
          trailing: IconButton(
            icon: const Icon(Icons.arrow_back, size: 20),
            color: Colors.white,
            onPressed: () {
              Navigator.pop(context);
            },
          ),
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221023105739.1"></t>
<t tx="swot.20221023105806.1"></t>
<t tx="swot.20221023105920.2">@language dart
@tabwidth -2
class LongPressDraggableExample extends StatefulWidget {
  const LongPressDraggableExample({super.key});

  @override
  State&lt;LongPressDraggableExample&gt; createState() =&gt; _LongPressDraggableExampleState();
}

class _LongPressDraggableExampleState extends State&lt;LongPressDraggableExample&gt;{
  @others
}

</t>
<t tx="swot.20221023105920.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221023105920.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221023105920.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221023105947.1">Offset _offset = const Offset(200, 250);
</t>
<t tx="swot.20221023110506.1">Positioned(
  left: _offset.dx,
  top: _offset.dy,
  child:
  @others
),
</t>
<t tx="swot.20221023110634.1">LongPressDraggable(
  feedback: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    height: 100,
    color: Colors.orangeAccent,
    colorBlendMode: BlendMode.colorBurn,
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    height: 100,
  ),
  onDragEnd: (details) {
    setState(() {
      double adjustment = MediaQuery.of(context).size.height - constrains.maxHeight;
      _offset = Offset(
        details.offset.dx,
        details.offset.dy - adjustment,
      );
    });
  },
),
</t>
<t tx="swot.20221023122724.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('LongPressDraggableExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; LongPressDraggableExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221023123049.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221023123049.3">appBar: AppBar(
  title: Text('LongPressDraggable'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023123049.4">body: Center(
  child: LayoutBuilder(
    builder: (context, constrains) {
      return Stack(
        children: [
          @others
        ]
      );
    },
  ),
),
</t>
<t tx="swot.20221023124217.1"></t>
<t tx="swot.20221023150449.1"></t>
<t tx="swot.20221023152237.1"></t>
<t tx="swot.20221023152801.2">@language dart
@tabwidth -2
class ReorderableListViewExample extends StatefulWidget {
  const ReorderableListViewExample({super.key});

  @override
  State&lt;ReorderableListViewExample&gt; createState() =&gt; _ReorderableListViewExampleState();
}

class _ReorderableListViewExampleState extends State&lt;ReorderableListViewExample&gt;{
  @others
}

</t>
<t tx="swot.20221023152801.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221023152801.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221023152801.5">@override
Widget build(BuildContext context) {
  return
  @others
}
</t>
<t tx="swot.20221023152933.1">final List&lt;int&gt; items = List&lt;int&gt;.generate(30, (int index) =&gt; index);
</t>
<t tx="swot.20221023153058.1">ReorderableListView(
  children: List.generate(
    items.length,
    (index) =&gt; ListTile(
      key: Key('$index'),
      // tileColor: items[index].isOdd ? Colors.white12 : Colors.white30,
      tileColor: items[index].isOdd ? Colors.grey : Colors.white30,
      title: Text('Item ${items[index]}'),
      trailing: const Icon(Icons.drag_handle_sharp),
    ),
  ),
  onReorder: (int oldIndex, int newIndex) {
    setState(() {
      if (oldIndex &lt; newIndex) {
        newIndex -= 1;
      }
      final int item = items.removeAt(oldIndex);
      items.insert(newIndex, item);
    });
  },
),
</t>
<t tx="swot.20221023154334.2">Scaffold(
  @others
);

</t>
<t tx="swot.20221023154334.3">appBar: AppBar(
  title: Text('ReorderableListView'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023154334.4">body:
@others
</t>
<t tx="swot.20221023154547.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('ReorderableListView'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; ReorderableListViewExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221023155312.1"></t>
<t tx="swot.20221023163309.1"></t>
<t tx="swot.20221023163418.2">@language dart
@tabwidth -2
class CupertinoContextMenuExample extends StatelessWidget {
  const CupertinoContextMenuExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221023163418.3">@override
Widget build(BuildContext context) {
  return Center(
    child: SizedBox(
      width: 100,
      height: 100,
      child:
      @others
    ),
  );
}
</t>
<t tx="swot.20221023163626.1">CupertinoContextMenu(
  child: Image.network(
    'https://img0.baidu.com/it/u=574351580,3649561547&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=640&amp;h=320',
  ),
  actions: &lt;Widget&gt;[
    CupertinoContextMenuAction(
      child: const Text('Action one'),
      onPressed: (){
        Navigator.pop(context);
      },
    ),
    CupertinoContextMenuAction(
      child: const Text('Action two'),
      onPressed: (){
        Navigator.pop(context);
      },
    ),
  ],
),
</t>
<t tx="swot.20221023164513.1">CupertinoContextMenuExample(),
Divider(),
</t>
<t tx="swot.20221023175848.1"></t>
<t tx="swot.20221023181752.1"></t>
<t tx="swot.20221023193833.2">@language dart
@tabwidth -2
class TableExample extends StatelessWidget {
  const TableExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221023193833.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221023193950.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221023193950.3">appBar: AppBar(
  title: const Text('Table'),
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221023193950.4">body:
@others
</t>
<t tx="swot.20221023194122.1">Center(
  child: Padding(
    padding: const EdgeInsets.all(15.0),
    child:
    @others
  ),
),
</t>
<t tx="swot.20221023194310.1">Table(
  border: TableBorder.all(color: Colors.white30),
  defaultVerticalAlignment: TableCellVerticalAlignment.middle,
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221023194533.1">const TableRow(
  decoration: BoxDecoration(
    color: Colors.redAccent,
  ),
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221023194941.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 1'),
  ),
),
</t>
<t tx="swot.20221023194949.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 2'),
  ),
),
</t>
<t tx="swot.20221023194950.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Title 3'),
  ),
),
</t>
<t tx="swot.20221023195102.1">...List.generate(
  30,
  (index) =&gt; const TableRow(
    children: [
      @others
    ],
  ),
),
</t>
<t tx="swot.20221023195414.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 1'),
  ),
),
</t>
<t tx="swot.20221023195426.1">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 2'),
  ),
),
</t>
<t tx="swot.20221023195426.2">TableCell(
  verticalAlignment: TableCellVerticalAlignment.middle,
  child: Padding(
    padding: EdgeInsets.all(8.0),
    child: Text('Cell 3'),
  ),
),
</t>
<t tx="swot.20221023195608.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Table'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const TableExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221023200224.1">SingleChildScrollView(
  child:
  @others
),
</t>
<t tx="swot.20221024070739.1"></t>
<t tx="swot.20221024091445.1">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221024092102.1"></t>
<t tx="swot.20221024095344.2">@language dart
@tabwidth -2
class DatePickerExample extends StatefulWidget {
  const DatePickerExample({super.key});

  @override
  State&lt;DatePickerExample&gt; createState() =&gt; _DatePickerExampleState();
}

class _DatePickerExampleState extends State&lt;DatePickerExample&gt;{
  @others
}

</t>
<t tx="swot.20221024095344.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221024095344.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221024095344.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children:[
        ElevatedButton(
          child: const Text('Choose Date'),
          onPressed: () async {
            final DateTime? dateTime = await showDatePicker(
              context: context,
              initialDate: selectedDate,
              firstDate: DateTime(2000),
              lastDate: DateTime(3000),
            );
            if (dateTime != null) {
              setState(() {
                selectedDate = dateTime;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text("${selectedDate.year}-${selectedDate.month}-${selectedDate.day}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024095406.1">DateTime selectedDate = DateTime.now();
</t>
<t tx="swot.20221024100552.1">DatePickerExample(),
Divider(),
</t>
<t tx="swot.20221024103418.1"></t>
<t tx="swot.20221024103523.2">@language dart
@tabwidth -2
class TimePickerExample extends StatefulWidget {
  const TimePickerExample({super.key});

  @override
  State&lt;TimePickerExample&gt; createState() =&gt; _TimePickerExampleState();
}

class _TimePickerExampleState extends State&lt;TimePickerExample&gt;{
  @others
}

</t>
<t tx="swot.20221024103523.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221024103523.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221024103554.1">TimePickerExample(),
Divider(),
</t>
<t tx="swot.20221024103850.1">TimeOfDay selectedTime = TimeOfDay.now();
</t>
<t tx="swot.20221024103957.1">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children:[
        ElevatedButton(
          child: const Text('Choose Time'),
          onPressed: () async {
            final TimeOfDay? timeOfDay = await showTimePicker(
              context: context,
              initialTime: selectedTime,
              initialEntryMode: TimePickerEntryMode.dial,
            );
            if (timeOfDay != null) {
              setState(() {
                selectedTime = timeOfDay;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text("${selectedTime.hour}:${selectedTime.minute}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024105608.1"></t>
<t tx="swot.20221024110030.2">@language dart
@tabwidth -2
class DateRangePickerExample extends StatefulWidget {
  const DateRangePickerExample({super.key});

  @override
  State&lt;DateRangePickerExample&gt; createState() =&gt; _DateRangePickerExampleState();
}

class _DateRangePickerExampleState extends State&lt;DateRangePickerExample&gt;{
  @others
}

</t>
<t tx="swot.20221024110030.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221024110030.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221024110030.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children:[
        ElevatedButton(
          child: const Text('Choose Dates'),
          onPressed: () async {
            final DateTimeRange? dateTimeRange = await showDateRangePicker(
              context: context,
              firstDate: DateTime(2000),
              lastDate: DateTime(3000),
            );
            if (dateTimeRange != null) {
              setState(() {
                selectedDates = dateTimeRange;
              });
            }
          },
        ),
        SizedBox(width: 10),
        Text("${selectedDates.duration.inDays}"),
      ],
    ),
  );
}
</t>
<t tx="swot.20221024110048.1">DateTimeRange selectedDates = DateTimeRange(
  start: DateTime.now(),
  end: DateTime.now(),
);
</t>
<t tx="swot.20221024110745.1">DateRangePickerExample(),
Divider(),
</t>
<t tx="swot.20221024112547.1"></t>
<t tx="swot.20221024112602.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032322d31302d32357103752e">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DismissibleExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DismissibleExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221024112614.2">@language dart
@tabwidth -2
class DismissibleExample extends StatefulWidget {
  const DismissibleExample({super.key});

  @override
  State&lt;DismissibleExample&gt; createState() =&gt; _DismissibleExampleState();
}

class _DismissibleExampleState extends State&lt;DismissibleExample&gt;{
  @others
}

</t>
<t tx="swot.20221024112614.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221024112614.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221024112614.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221024112703.1">List&lt;int&gt; items = List&lt;int&gt;.generate(50, (int index) =&gt; index);
</t>
<t tx="swot.20221024113603.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221024113603.3">appBar: AppBar(
  title: Text('DismissibleExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221024113603.4">body:
@others
</t>
<t tx="swot.20221024113627.1">ListView.builder(
  itemCount: items.length,
  padding: const EdgeInsets.symmetric(vertical: 16),
  itemBuilder: (BuildContext contex, int index) {
    return Dismissible(
      background: Container(
        color: Colors.red,
        child: const Icon(Icons.delete),
      ),
      key: ValueKey&lt;int&gt;(items[index]),
      onDismissed: (DismissDirection direction) {
        setState(() {
          items.removeAt(index);
        });
      },
      child: ListTile(
        title: Text('Item ${items[index]}'),
      ),
    );
  },
),
</t>
<t tx="swot.20221025074714.1"></t>
<t tx="swot.20221025074739.2">@language dart
@tabwidth -2
class DraggableScrollableExample extends StatelessWidget {
  const DraggableScrollableExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221025074739.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221025075357.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DraggableScrollableExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DraggableScrollableExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221025081258.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221025081258.3">appBar: AppBar(
  title: Text('DraggableScrollableSheet'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221025081258.4">body:
@others
</t>
<t tx="swot.20221025081316.1">DraggableScrollableSheet(
  builder: (BuildContext context, ScrollController scrollController) {
    return Container(
      color: Colors.orangeAccent,
      child: ListView.builder(
        controller: scrollController,
        itemCount: 25,
        itemBuilder: (BuildContext context, int index) {
          return ListTile(
            title: Text('Item $index'),
          );
        },
      ),
    );
  },
),
</t>
<t tx="swot.20221025081914.1"></t>
<t tx="swot.20221025081939.2">@language dart
@tabwidth -2
class DragTargetExample extends StatefulWidget {
  const DragTargetExample({super.key});

  @override
  State&lt;DragTargetExample&gt; createState() =&gt; _DragTargetExampleState();
}

class _DragTargetExampleState extends State&lt;DragTargetExample&gt;{
  @others
}

</t>
<t tx="swot.20221025081939.3">Color caughtColor = Colors.red;
</t>
<t tx="swot.20221025081939.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221025081939.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221025081939.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221025083125.1">SizedBox(
  width: double.infinity,
  child:
    @others
)
</t>
<t tx="swot.20221025083519.1">Column(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221025083732.1">Draggable(
  data: Colors.orangeAccent,
  child: Container(
    width: 100.0,
    height: 100.0,
    color: Colors.orangeAccent,
    child: const Center(
      child: Text('Box'),
    ),
  ),
  onDraggableCanceled: (velocity, offset) {},
  feedback: Container(
    width: 150.0,
    height: 150.0,
    color: Colors.orangeAccent.withOpacity(0.5),
    child: const Center(
      child: Text(
        'Box...',
        style: TextStyle(
          color: Colors.white,
          decoration: TextDecoration.none,
          fontSize: 18.0,
        ),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221025084843.1">DragTarget(
  onAccept: (Color color) {
    caughtColor = color;  // color is Draggable data
  },
  builder: (BuildContext context,
            List&lt;dynamic&gt; accepted,
            List&lt;dynamic&gt; rejected,) {
    return Container(
      width: 200.0,
      height: 200.0,
      color: accepted.isEmpty ? caughtColor : Colors.grey.shade200,
      child: const Center(
        child: Text("Drag here"),
      ),
    );
  }
),
</t>
<t tx="swot.20221025091113.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DragTargetExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; DragTargetExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221025091431.2">Scaffold(
  @others
)

</t>
<t tx="swot.20221025091431.3">appBar: AppBar(
  title: Text('DragTargetExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221025091431.4">body:
@others
</t>
<t tx="swot.20221025094932.1"></t>
<t tx="swot.20221025095334.2">@language dart
@tabwidth -2
class DrawerExample extends StatelessWidget {
  const DrawerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221025095334.3">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221025095436.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221025095436.3">appBar: AppBar(
  title: Text('NewPage'),
),
</t>
<t tx="swot.20221025095436.4">body: Center(
  child: Builder(
    builder: (context) =&gt; ElevatedButton(
      onPressed: () {
        // Scaffold.of(context).openDrawer();
        Scaffold.of(context).openEndDrawer();
      },
      child: const Text('Open EndDrawer'),
    ),
  ),
),

</t>
<t tx="swot.20221025095602.1">endDrawer: Drawer(
  child: ListView(
    children: [
      const DrawerHeader(
        decoration: BoxDecoration(
          color: Colors.blue,
        ),
        child: Text('Drawer Header'),
      ),
      ListTile(
        title: const Text('Item 1'),
        onTap: () {}
      ),
      ListTile(
        title: const Text('Item 2'),
        onTap: () {}
      ),
    ],
  ),
),
</t>
<t tx="swot.20221025095859.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('DrawerExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const DrawerExample(),
      ),
    );
  },
),

Divider(),
</t>
<t tx="swot.20221025114659.1"></t>
<t tx="swot.20221025114730.2">@language dart
@tabwidth -2
class PopupMenuButtonExample extends StatefulWidget {
  const PopupMenuButtonExample({super.key});

  @override
  State&lt;PopupMenuButtonExample&gt; createState() =&gt; _PopupMenuButtonExampleState();
}

class _PopupMenuButtonExampleState extends State&lt;PopupMenuButtonExample&gt;{
  @others
}

</t>
<t tx="swot.20221025114730.3">String title = 'First item';
String item1 = 'First item';
String item2 = 'Second item';
</t>
<t tx="swot.20221025114730.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221025114730.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221025114730.6">@override
Widget build(BuildContext context) {
  return ListTile(
    title: Text(title),
    trailing: PopupMenuButton(
      itemBuilder: (context) =&gt; [
        PopupMenuItem(
          value: item1,
          child: Text(item1),
        ),
        PopupMenuItem(
          value: item2,
          child: Text(item2),
        ),
      ],
      onSelected: (String newValue) {
        setState(() {
          title = newValue;
        });
      }
    ),
  );
}
</t>
<t tx="swot.20221025191831.1">PopupMenuButtonExample(),
Divider(),
</t>
<t tx="swot.20221026064223.1"></t>
<t tx="swot.20221026072859.1"></t>
<t tx="swot.20221026073602.2">@language dart
@tabwidth -2
class ExpandedExample extends StatelessWidget {
  const ExpandedExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221026073602.3">@override
Widget build(BuildContext context) {
  return SizedBox(
    // width: double.infinity,
    height: 100.0,
    child: Column(
      children: [
        @others
      ],
    ),
  );
}
</t>
<t tx="swot.20221026193458.1">Expanded(
  flex: 2,
  child: Container(
    color: Colors.blue,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 1')),
  ),
),
</t>
<t tx="swot.20221026193703.1">Expanded(
  flex: 1,
  child: Container(
    color: Colors.orange,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 2')),
  ),
),
</t>
<t tx="swot.20221026193706.1">Expanded(
  flex: 3,
  child: Container(
    color: Colors.red,
    width: double.infinity,
    height: 200,
    child: const Center(child: Text('Expanded 3')),
  ),
),
</t>
<t tx="swot.20221026194030.1">ExpandedExample(),
Divider(),
</t>
<t tx="swot.20221027111311.1"></t>
<t tx="swot.20221027111351.1"></t>
<t tx="swot.20221027111458.2">@language dart
@tabwidth -2
class FlexibleExample extends StatelessWidget {
  const FlexibleExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221027111458.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027111807.1">Column(
  children: [
    @others
  ],
)
</t>
<t tx="swot.20221027111848.1">Flexible(
  flex: 5,
  child: Container(
    height: 50,
    color: Colors.yellow,
  ),
),
Flexible(
  flex: 4,
  child: Container(
    height: 100,
    color: Colors.orange,
  ),
),
Flexible(
  flex: 3,
  child: Container(
    height: 200,
    color: Colors.red,
  ),
),
</t>
<t tx="swot.20221027112213.1"></t>
<t tx="swot.20221027112321.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('FlexibleExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FlexibleExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221027112522.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221027112522.3">appBar: AppBar(
  title: Text('FlexibleExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027112522.4">body:
@others
</t>
<t tx="swot.20221027114010.6">@language dart
@tabwidth -2
floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
floatingActionButton: FloatingActionButton(
    onPressed: () {},
    backgroundColor: Colors.deepPurple.shade400,
    child: Icon(Icons.add),
),
</t>
<t tx="swot.20221027114210.1"></t>
<t tx="swot.20221027115609.1"></t>
<t tx="swot.20221027115627.2">@language dart
@tabwidth -2
class FormExample extends StatelessWidget {
  FormExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221027115627.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027115750.2">Scaffold(
  @others
)

</t>
<t tx="swot.20221027115750.3">appBar: AppBar(
  title: Text('FormExample'),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027115750.4">body:
@others
</t>
<t tx="swot.20221027115911.1">Padding(
  padding: const EdgeInsets.all(8.0),
  child:
  @others
),
</t>
<t tx="swot.20221027115952.1">Form(
  key: _formKey,
  child: Column(
    children: [
      TextFormField(
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Enter something';
          }
          return null;
        },
      ),
      ElevatedButton(
        onPressed: () {
          if (_formKey.currentState!.validate()) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Great!'),
              ),
            );
          }
        },
        child: const Text('Validate'),
      ),
    ],
  )
),
</t>
<t tx="swot.20221027120023.1">final _formKey = GlobalKey&lt;FormState&gt;();
</t>
<t tx="swot.20221027121244.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('FormExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FormExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221027175533.2">@language dart
@tabwidth -2
class TextFormFieldExample extends StatefulWidget {
  const TextFormFieldExample({super.key});

  @override
  State&lt;TextFormFieldExample&gt; createState() =&gt; _TextFormFieldExampleState();
}

class _TextFormFieldExampleState extends State&lt;TextFormFieldExample&gt;{
  @others
}

</t>
<t tx="swot.20221027175533.3">List&lt;String&gt; titles = [
  '',
  '',
  '',
];
</t>
<t tx="swot.20221027175533.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221027175533.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221027175533.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027180846.1">SingleChildScrollView(
  child:
  @others
),
</t>
<t tx="swot.20221027180945.1">Form(
  autovalidateMode: AutovalidateMode.always,
  onChanged: () {
    setState(() {
      Form.of(primaryFocus!.context!)!.save();
    });
  },
  child:
  @others
),
</t>
<t tx="swot.20221027182206.1">Column(
  mainAxisSize: MainAxisSize.min,
  children: List.generate(
    3,
    (int index) {
      return Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              onSaved: (String? value) {
                if (value != null) {
                  titles[index] = value;
                }
              },
            ),
            const SizedBox(height: 10),
            Card(
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Text(titles[index]),
              ),
            ),
          ],
        ),
      );
    },
  ),
),
</t>
<t tx="swot.20221027182452.1"></t>
<t tx="swot.20221027182544.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('TextFormFieldExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; const TextFormFieldExample(),
      ),
    );
  },
),
Divider(),
</t>
<t tx="swot.20221027183133.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221027183133.3">appBar: AppBar(
  title: Text('TextFormField'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027183133.4">body:
@others
</t>
<t tx="swot.20221027192806.1"></t>
<t tx="swot.20221027192851.2">@language dart
@tabwidth -2
class AnimatedIconExample extends StatefulWidget {
  const AnimatedIconExample({super.key});

  @override
  State&lt;AnimatedIconExample&gt; createState() =&gt; _AnimatedIconExampleState();
}

class _AnimatedIconExampleState extends State&lt;AnimatedIconExample&gt; with TickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221027192851.3">bool _isPlay = false;
late AnimationController _controllerIcon;
</t>
<t tx="swot.20221027192851.4">@override
void initState() {
  _controllerIcon = AnimationController(
    duration: Duration(seconds: 1),
    vsync: this  // use TickerProviderStateMixin
  );
  super.initState();
}
</t>
<t tx="swot.20221027192851.5">@override
void dispose() {
   _controllerIcon.dispose();
  super.dispose();
}
</t>
<t tx="swot.20221027192851.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027194101.1">GestureDetector(
  onTap: () {
    if (_isPlay == false) {
      _controllerIcon.forward();  // 下个图标
      _isPlay = true;
    } else {
      _controllerIcon.reverse();  // 前个图标
      _isPlay = false;
    }
  },
  child:
    @others
)
</t>
<t tx="swot.20221027194101.2">@doc
@language asciidoc
:nofooter:
1. define AnimationController
2. AnimationController: need class `with TickerProviderStateMixin`
3. AnimationController: need dispose

@c
@language dart
@tabwidth -2
AnimatedIcon(
  // play is the first icon
  // pause is the second icon
  icon: AnimatedIcons.play_pause,
  progress: _controllerIcon,
  size: 40,
),
</t>
<t tx="swot.20221027194417.2">// ElevatedButton(
  // style: ElevatedButton.styleFrom(
    // // backgroundColor: Colors.orangeAccent,
  // ),
  // child: const Text('AnimatedIcon'),
  // onPressed: () {
    // Navigator.push(
      // context,
      // MaterialPageRoute(
        // builder: (context) =&gt; AnimatedIconExample(),
      // ),
    // );
  // },
// ),

AnimatedIconExample(),
</t>
<t tx="swot.20221027195901.1"></t>
<t tx="swot.20221027203431.2">@language dart
@tabwidth -2
class FadeInImageExample extends StatelessWidget {
  const FadeInImageExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221027203431.3">@override
Widget build(BuildContext context) {
  return Center(
    child: FadeInImage.assetNetwork(
      width: 100,
      height: 100,
      placeholder: 'assets/loading.gif',
      image: 'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    ),
  );
}
</t>
<t tx="swot.20221027203755.1">FadeInImageExample(),
</t>
<t tx="swot.20221027212136.1"></t>
<t tx="swot.20221027212222.2">@language dart
@tabwidth -2
class FractionallySizedBoxExample extends StatelessWidget {
  const FractionallySizedBoxExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221027212222.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221027212407.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221027212407.3">appBar: AppBar(
  title: Text('FractionallySizedBox'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221027212407.4">body:
@others
</t>
<t tx="swot.20221027212916.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221027212959.1">FractionallySizedBox(
  widthFactor: 0.5,
  heightFactor: 0.5,
  child: Container(
    color: Colors.amberAccent,
  ),
),
</t>
<t tx="swot.20221027213439.1">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221027213559.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('FractionallySizedBox'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; FractionallySizedBoxExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221027214525.1"></t>
<t tx="swot.20221028064229.2">@language dart
@tabwidth -2
class FutureBuilderExample extends StatefulWidget {
  const FutureBuilderExample({super.key});

  @override
  State&lt;FutureBuilderExample&gt; createState() =&gt; _FutureBuilderExampleState();
}

class _FutureBuilderExampleState extends State&lt;FutureBuilderExample&gt;{
  @others
}

</t>
<t tx="swot.20221028064229.3">Future&lt;String&gt; getData() async {
  await Future.delayed(
    const Duration(seconds: 1),
  );
  // throw 'Error';
  return 'Super!';
}
</t>
<t tx="swot.20221028064229.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221028064229.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221028064229.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028064815.1">FutureBuilder(
  future: getData(),
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const CircularProgressIndicator();
    }
    if (snapshot.hasError) {
      return Text(snapshot.error.toString());
    } else {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(snapshot.data.toString()),
          ElevatedButton(
            onPressed: () { setState(() {}); },
            child: const Text('Refresh'),
          ),
        ],
      );
    }
  }
)
</t>
<t tx="swot.20221028065632.1">FutureBuilderExample(),
</t>
<t tx="swot.20221028070441.1"></t>
<t tx="swot.20221028083608.1"></t>
<t tx="swot.20221028084729.2">@language dart
@tabwidth -2
class GestureDetectorExample extends StatefulWidget {
  const GestureDetectorExample({super.key});

  @override
  State&lt;GestureDetectorExample&gt; createState() =&gt; _GestureDetectorExampleState();
}

class _GestureDetectorExampleState extends State&lt;GestureDetectorExample&gt;{
  @others
}

</t>
<t tx="swot.20221028084729.3">int _counter = 0;
</t>
<t tx="swot.20221028084729.6">@override
Widget build(BuildContext context) {
  return Center(
    child: GestureDetector(
      onTap: () {
        setState(() { _counter += 1; });
      },
      child: Container(
        height: 50,
        color: Colors.orangeAccent,
        child: Row(
          children: [
            const Text("GestureDetector"),
            Text(
              _counter.toString(),
              style: const TextStyle(fontSize: 40),
            ),
          ]
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221028085926.1">GestureDetectorExample(),
</t>
<t tx="swot.20221028091221.1"></t>
<t tx="swot.20221028093414.2">@language dart
@tabwidth -2
class GridViewExample extends StatelessWidget {
  const GridViewExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221028093414.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028093753.1">GridView.builder(
  itemCount: 10,
  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
    crossAxisCount: 2,
  ),
  itemBuilder: (_, index) =&gt;
  @others
)

@doc
You can use this also, not use itemBuilder
GridView(
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),
  children: &lt;Widget&gt;[],
)
</t>
<t tx="swot.20221028095636.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('GridView'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; GridViewExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221028122703.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221028122703.3">appBar: AppBar(
  title: Text('GridView'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221028122703.4">body:
@others
</t>
<t tx="swot.20221028122858.1"></t>
<t tx="swot.20221028130417.2">@language dart
@tabwidth -2
class GridTileExample extends StatelessWidget {
  const GridTileExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221028130417.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221028130528.1">Center(
  child:
  @others
),
</t>
<t tx="swot.20221028131344.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('GridTileExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; GridTileExample(),
      ),
    );
  },
),

</t>
<t tx="swot.20221028131715.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221028131715.3">appBar: AppBar(
  title: Text('GridTile'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221028131715.4">body:
@others
</t>
<t tx="swot.20221029070417.1">GridTile(
  header: const GridTileBar(
    backgroundColor: Colors.black45,
    leading: Icon(Icons.person),
    title: Text('Flutter App'),
    trailing: Icon(Icons.menu),
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    fit: BoxFit.cover,
  ),
  footer: const GridTileBar(
    backgroundColor: Colors.black45,
    leading: Icon(Icons.favorite),
  ),
),
</t>
<t tx="swot.20221029070636.1">GridTile(
  header: Container(
    height: 40,
    color: Colors.black38,
    child: const Center(
      child: Text(
        'Header',
        style: TextStyle(color: Colors.white),
      ),
    ),
  ),
  child: Image.network(
    'https://img2.baidu.com/it/u=1559210821,716203173&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=200&amp;h=200',
    fit: BoxFit.cover,
  ),
  footer: Container(
    height: 40,
    color: Colors.black38,
    child: const Center(
      child: Text(
        'Footer',
        style: TextStyle(color: Colors.white),
      ),
    ),
  ),
),
</t>
<t tx="swot.20221029070735.1">SizedBox(
  height: 400,
  width: 300,
  child:
  @others
),
</t>
<t tx="swot.20221029081714.14">@language dart
@tabwidth -2
class InteractiveViewerExample extends StatefulWidget {
  const InteractiveViewerExample({super.key});

  @override
  State&lt;InteractiveViewerExample&gt; createState() =&gt; _InteractiveViewerExampleState();
}

class _InteractiveViewerExampleState extends State&lt;InteractiveViewerExample&gt;{
  @others
}

</t>
<t tx="swot.20221029081714.15">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029081714.16">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029081714.17">@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Tool'),
    ),
    backgroundColor: Colors.orangeAccent,
    body: InteractiveViewer(
      boundaryMargin: const EdgeInsets.all(
        double.infinity,
      ),
      child: Scaffold(
        appBar: AppBar(
          title: const Text('SwotApp'),
        ),
        body: Text('ALT + mouse zoom'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221029081714.8">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('InteractiveViewerExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; InteractiveViewerExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221029090319.1"></t>
<t tx="swot.20221029090332.1"></t>
<t tx="swot.20221029090411.1">ListTile(
  title: const Text('Hero click'),
  trailing: const Hero(
    tag: 'tag-1',
    child: Icon(Icons.person),
  ),
  onTap: () =&gt; Navigator.of(context).push(
    MaterialPageRoute(
      builder: (context) =&gt; const HeroExample(),
    ),
  ),
),
</t>
<t tx="swot.20221029092751.2">@language dart
@tabwidth -2
class HeroExample extends StatelessWidget {
  const HeroExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221029092751.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029092810.1">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029092914.1">Hero(
  tag: 'tag-1',
  child: Container(
    color: Colors.orangeAccent,
    width: 100.0,
    height: 100.0,
  ),
),
</t>
<t tx="swot.20221029094712.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029094712.3">appBar: AppBar(
  title: Text('Hero'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029094712.4">body:
@others
</t>
<t tx="swot.20221029115239.1"></t>
<t tx="swot.20221029115307.2">@language dart
@tabwidth -2
class IgnorePointerExample extends StatefulWidget {
  const IgnorePointerExample({super.key});

  @override
  State&lt;IgnorePointerExample&gt; createState() =&gt; _IgnorePointerExampleState();
}

class _IgnorePointerExampleState extends State&lt;IgnorePointerExample&gt;{
  @others
}

</t>
<t tx="swot.20221029115307.3">bool ignore = false;
</t>
<t tx="swot.20221029115307.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029115307.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029115307.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029115522.1">Row(
  children: [
  @others
  ],
)
</t>
<t tx="swot.20221029115652.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: ignore ? Colors.red : Colors.green,
  ),
  onPressed: () {
    setState(() { ignore = !ignore; });
  },
  child: Text(
    ignore ? 'Blocked IgnorePointer' : 'Can press IgnorePointer',
  ),
),
</t>
<t tx="swot.20221029120401.1">IgnorePointer(
  ignoring: ignore,
  child: ElevatedButton(
    onPressed: () {},
    child: const Text('IgnorePointer'),
  ),
),
</t>
<t tx="swot.20221029121446.1">IgnorePointerExample(),
</t>
<t tx="swot.20221029122138.1"></t>
<t tx="swot.20221029122755.2">@language dart
@tabwidth -2
class IndexedStackExample extends StatefulWidget {
  const IndexedStackExample({super.key});

  @override
  State&lt;IndexedStackExample&gt; createState() =&gt; _IndexedStackExampleState();
}

class _IndexedStackExampleState extends State&lt;IndexedStackExample&gt;{
  @others
}

</t>
<t tx="swot.20221029122755.3">int index = 0;
</t>
<t tx="swot.20221029122755.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029122755.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029122755.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029123730.2">Padding(
  padding: const EdgeInsets.all(8.0),
  child:
  @others
)
</t>
<t tx="swot.20221029123925.2">Column(
  children: [
  @others
  ],
),
</t>
<t tx="swot.20221029124213.2">Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
  @others
  ],
),
</t>
<t tx="swot.20221029124242.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    setState(() { index = 0; });
  },
  child: const Text('0'),
),

</t>
<t tx="swot.20221029124327.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    setState(() { index = 1; });
  },
  child: const Text('1'),
),

</t>
<t tx="swot.20221029124328.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    setState(() { index = 2; });
  },
  child: const Text('2'),
),

</t>
<t tx="swot.20221029124503.1">IndexedStack(
  index: index,
  children: [
    Center(
      child: Image.network('https://img1.baidu.com/it/u=2346614730,4149113350&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=300&amp;h=231'),
    ),
    Center(
      child: Image.network('https://img0.baidu.com/it/u=3654949633,659950172&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=612'),
    ),
    Center(
      child: Image.network('https://img0.baidu.com/it/u=2809418066,998395186&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=622'),
    ),
  ],
),
</t>
<t tx="swot.20221029125017.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('IndexedStackExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; IndexedStackExample(),
      ),
    );
  },
),
</t>
<t tx="swot.20221029125202.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029125202.3">appBar: AppBar(
  title: Text('IndexedStack'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029125202.4">body:
@others
</t>
<t tx="swot.20221029125546.1"></t>
<t tx="swot.20221029130827.2">@language dart
@tabwidth -2
class ListViewExample extends StatelessWidget {
  const ListViewExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221029130827.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029132335.1">ListView.separated(
  separatorBuilder: (BuildContext context, int index) =&gt; const Divider(
    color: Colors.white,
  ),
  itemCount: 5,
  itemBuilder: (BuildContext context, int index) {
    return
    @others
    ;
  },
)
</t>
<t tx="swot.20221029132948.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(context, MaterialPageRoute(
      builder: (context) =&gt; ListViewExample()));
  },
  child: const Text('ListView'),
),

</t>
<t tx="swot.20221029133516.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029133516.3">appBar: AppBar(
  title: Text('ListView'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029133516.4">body:
@others
</t>
<t tx="swot.20221029133717.1">ListTile(
  tileColor: Colors.orangeAccent,
  leading: const Icon(Icons.person),
  title: const Text('Flutter App'),
  trailing: const Icon(Icons.menu),
  onTap: () {},
)
</t>
<t tx="swot.20221029134124.1"></t>
<t tx="swot.20221029134556.1"></t>
<t tx="swot.20221029140231.2">@language dart
@tabwidth -2
class NavigationBarExample extends StatefulWidget {
  const NavigationBarExample({super.key});

  @override
  State&lt;NavigationBarExample&gt; createState() =&gt; _NavigationBarExampleState();
}

class _NavigationBarExampleState extends State&lt;NavigationBarExample&gt;{
  @others
}

</t>
<t tx="swot.20221029140231.3">int currentIndex = 0;

static const List body = [
  Icon(Icons.home, size: 50),
  Icon(Icons.search, size: 50),
  Icon(Icons.person, size: 50),
];
</t>
<t tx="swot.20221029140231.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029140231.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029140231.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029141046.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029141046.3">appBar: AppBar(
  title: Text('NavigationBar'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029141046.4">body: Center(
  child: body.elementAt(currentIndex),
),

</t>
<t tx="swot.20221029141046.5">bottomNavigationBar: NavigationBar(
  destinations: const [
    NavigationDestination(
      label: 'Home',
      icon: Icon(Icons.home),
    ),
    NavigationDestination(
      label: 'Menu',
      icon: Icon(Icons.menu),
    ),
    NavigationDestination(
      label: 'Profile',
      icon: Icon(Icons.person),
    ),
  ],
  selectedIndex: currentIndex,
  onDestinationSelected: (int index) {
    setState(() { currentIndex = index; });
  }
),
</t>
<t tx="swot.20221029141845.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
Navigator.push(
  context,
  MaterialPageRoute(
    builder: (context) =&gt; NavigationBarExample(),
  ),
);
  },
  child: const Text('NavigationBarExample'),
),

</t>
<t tx="swot.20221029142524.1"></t>
<t tx="swot.20221029142534.2">@language dart
@tabwidth -2
class StackExample extends StatelessWidget {
  const StackExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221029142534.3">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029142627.1">Stack(
  children: [
    Center(
      child: Image.network(
        'https://img0.baidu.com/it/u=3512755295,746862310&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=236&amp;h=500',
        width: 500,
      ),
    ),
    Center(
      child: Image.network(
        'https://img1.baidu.com/it/u=695618151,2431461217&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=350&amp;h=250',
        width: 200,
      ),
    ),
  ],
)
</t>
<t tx="swot.20221029142715.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029142715.3">appBar: AppBar(
  title: Text('Stack'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029142715.4">body:
@others
,
</t>
<t tx="swot.20221029142815.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029143324.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StackExample(),
      ),
    );
  },
  child: const Text('StackExample'),
),

</t>
<t tx="swot.20221029144518.1"></t>
<t tx="swot.20221029144530.2">@language dart
@tabwidth -2
class StepperExample extends StatefulWidget {
  const StepperExample({super.key});

  @override
  State&lt;StepperExample&gt; createState() =&gt; _StepperExampleState();
}

class _StepperExampleState extends State&lt;StepperExample&gt;{
  @others
}

</t>
<t tx="swot.20221029144530.3">int _currentStep = 0;
</t>
<t tx="swot.20221029144530.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029144530.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029144530.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029144924.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029144924.3">appBar: AppBar(
  title: Text('Stepper'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029144924.4">body:
@others
,
</t>
<t tx="swot.20221029144954.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029145033.1">Stepper(
  @others
  // type: StepperType.horizontal,
  currentStep: _currentStep,

  onStepTapped: (int newIndex) {
    setState(() { _currentStep = newIndex; });
  },
  onStepContinue: () {
    if (_currentStep != 2) {
      setState(() {
        _currentStep += 1;
      });
    }
  },
  onStepCancel: () {
    if (_currentStep != 0) {
      setState(() {
        _currentStep -= 1;
      });
    }
  },
),
</t>
<t tx="swot.20221029190037.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StepperExample(),
      ),
    );
  },
  child: const Text('StepperExample'),
),

</t>
<t tx="swot.20221029191553.1">steps: [
  Step(
    isActive: _currentStep == 0,
    title: const Text('Step 1'),
    content: const Text(
      'Information for step 1',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
  Step(
    isActive: _currentStep == 1,
    title: const Text('Step 2'),
    content: const Text(
      'Information for step 2',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
  Step(
    isActive: _currentStep == 2,
    title: const Text('Step 3'),
    content: const Text(
      'Information for step 3',
      style: TextStyle(
        color: Colors.redAccent,
      ),
    ),
  ),
],
</t>
<t tx="swot.20221029211447.1"></t>
<t tx="swot.20221029211533.2">@language dart
@tabwidth -2
class StreamBuilderExample extends StatefulWidget {
  const StreamBuilderExample({super.key});

  @override
  State&lt;StreamBuilderExample&gt; createState() =&gt; _StreamBuilderExampleState();
}

class _StreamBuilderExampleState extends State&lt;StreamBuilderExample&gt;{
  @others
}

</t>
<t tx="swot.20221029211533.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029211743.1">@language dart
@tabwidth -2
Stream&lt;int&gt; generateStream = (() async* {
  await Future&lt;void&gt;.delayed(const Duration(seconds: 2));
  yield 1;
  await Future&lt;void&gt;.delayed(const Duration(seconds: 1));
  yield 2;
  // throw 'An error occured';  // test After show 1, Error displayed
  await Future&lt;void&gt;.delayed(const Duration(seconds: 1));
  yield 3;
})();
</t>
<t tx="swot.20221029212803.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029212812.1">StreamBuilder(
  stream: generateStream,
  initialData: 0,
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
      return const CircularProgressIndicator.adaptive();
    }
    if (snapshot.hasError) {
      return const Text('Error');
    } else {
      return Text(
        snapshot.data.toString(),
        style: const TextStyle(fontSize: 40),
      );
    }
  },
),
</t>
<t tx="swot.20221029213808.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; StreamBuilderExample(),
      ),
    );
  },
  child: const Text('StreamBuilderExample'),
),
</t>
<t tx="swot.20221029213944.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029213944.3">appBar: AppBar(
  title: Text('StreamBuilder'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029213944.4">body:
@others
,
</t>
<t tx="swot.20221029215342.1"></t>
<t tx="swot.20221029215403.2">@language dart
@tabwidth -2
class SwitchExample extends StatefulWidget {
  const SwitchExample({super.key});

  @override
  State&lt;SwitchExample&gt; createState() =&gt; _SwitchExampleState();
}

class _SwitchExampleState extends State&lt;SwitchExample&gt;{
  @others
}

</t>
<t tx="swot.20221029215403.3">bool isSwitched = false;
</t>
<t tx="swot.20221029215403.4">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221029215403.5">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221029215403.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029215500.2">Center(
  child:
  @others
)
</t>
<t tx="swot.20221029215505.1">Switch(
  value: isSwitched,
  onChanged: (value) {
    setState(() {
      isSwitched = value;
    });
  },
)
</t>
<t tx="swot.20221029215656.1">SwitchExample(),
</t>
<t tx="swot.20221029215808.1"></t>
<t tx="swot.20221029220227.2">@language dart
@tabwidth -2
class TabPageSelectorExample extends StatefulWidget {
  const TabPageSelectorExample({super.key});

  @override
  State&lt;TabPageSelectorExample&gt; createState() =&gt; _TabPageSelectorExampleState();
}

class _TabPageSelectorExampleState extends State&lt;TabPageSelectorExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221029220227.3">late final TabController controller;
int _index = 0;
</t>
<t tx="swot.20221029220227.4">@override
void initState() {
  super.initState();
  controller = TabController(
    length: tabPageSelectorWidgets.length,
    initialIndex: _index,
    vsync: this,
  );
}
</t>
<t tx="swot.20221029220227.5">@override
void dispose() {
  controller.dispose();
  super.dispose();
}
</t>
<t tx="swot.20221029220227.6">@override
Widget build(BuildContext context) {
  return
  @others
  ;
}
</t>
<t tx="swot.20221029220342.1">List&lt;Widget&gt; tabPageSelectorWidgets = const [
  Icon(Icons.home, size: 80),
  Icon(Icons.settings, size: 80),
  Icon(Icons.person, size: 80),
];
</t>
<t tx="swot.20221029221243.2">Scaffold(
  @others
)
</t>
<t tx="swot.20221029221243.3">appBar: AppBar(
  title: Text('TabPageSelector'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221029221243.4">body:
@others
,
</t>
<t tx="swot.20221029221243.6">floatingActionButton: ButtonBar(
  children: [
    FloatingActionButton.small(
      onPressed: () {
        (_index != tabPageSelectorWidgets.length - 1) ? _index++ : _index = 0;
        controller.animateTo(_index);
      },
      hoverElevation: 0,
      elevation: 0,
      child: const Icon(Icons.navigate_next),
    ),
  ],
),
</t>
<t tx="swot.20221029221337.1">Stack(
  alignment: Alignment.center,
  children: [
    TabBarView(
      controller: controller,  // TabController
      children: tabPageSelectorWidgets,
    ),
    Positioned(
      bottom: 40,
      child: TabPageSelector(
        controller: controller,  // TabController
        color: Colors.black38,
      ),
    ),
  ],
)
</t>
<t tx="swot.20221029222412.2">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; TabPageSelectorExample(),
      ),
    );
  },
  child: const Text('TabPageSelector'),
),

</t>
</tnodes>
</leo_file>
