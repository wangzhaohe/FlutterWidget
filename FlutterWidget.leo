<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20221017093031.1"><vh>widgets</vh>
<v t="swot.20221017093031.2"><vh>#file lib/main.dart</vh>
<v t="swot.20221017093031.3"><vh>import</vh></v>
<v t="swot.20221017093031.4"><vh>main</vh></v>
<v t="swot.20221017093031.5"><vh>MyApp -- MaterialApp</vh></v>
<v t="swot.20221017093031.6"><vh>Home  -- Scaffold</vh>
<v t="swot.20221017093031.252"><vh>AppBar</vh></v>
</v>
<v t="swot.20221017093031.8"><vh>Demo</vh>
<v t="swot.20221017093031.9"><vh>variable</vh>
<v t="swot.20221017093031.10"><vh>var for AnimatedXXX</vh></v>
<v t="swot.20221017093031.168"><vh>var for AnimatedIcon</vh></v>
<v t="swot.20221017093031.161"><vh>var for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.172"><vh>var for AnimatedList</vh></v>
</v>
<v t="swot.20221017093031.14"><vh>function</vh>
<v t="swot.20221017093031.173"><vh>_addItem()             -- AnimatedList</vh></v>
<v t="swot.20221017093031.174"><vh>_removeItem(int index) -- AnimatedList</vh></v>
</v>
<v t="swot.20221017093031.17"><vh>initState()</vh>
<v t="swot.20221017093031.162"><vh>AnimationController for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.169"><vh>AnimationController for AnimatedIcon</vh></v>
</v>
<v t="swot.20221017093031.20"><vh>dispose()</vh></v>
<v t="swot.20221017093031.21"><vh>build()</vh>
<v t="swot.20221017093031.22"><vh>SingleChildScrollView</vh>
<v t="swot.20221017093031.23"><vh>Column</vh>
<v t="swot.20221017093031.24"><vh>Row</vh>
<v t="swot.20221017093031.25"><vh>ElevatedButton  -- show AboutDialog</vh>
<v t="swot.20221017093031.26"><vh>showDialog</vh>
<v t="swot.20221017093031.152"><vh>AboutDialog</vh></v>
</v>
</v>
<v t="swot.20221017093031.28"><vh>SizedBox -- show AboutListTile</vh>
<v t="swot.20221017093031.153"><vh>AboutListTile</vh></v>
</v>
</v>
<v t="swot.20221017093031.30"><vh>Divider</vh></v>
<v t="swot.20221017093031.31"><vh>Row</vh>
<v t="swot.20221017093031.32"><vh>Stack           -- show AbsorbPointer包含按钮不可点击</vh>
<v t="swot.20221017093031.33"><vh>SizedBox</vh></v>
<v t="swot.20221017093031.34"><vh>SizedBox</vh>
<v t="swot.20221017093031.154"><vh>AbsorbPointer -- include button can not be clicked</vh>
<v t="swot.20221017093031.155"><vh>ElevatedButton 不可点击</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.37"><vh>ElevatedButton  -- show AlertDialog</vh>
<v t="swot.20221017093031.38"><vh>showDialog</vh>
<v t="swot.20221017093031.156"><vh>AlertDialog</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.40"><vh>Divider</vh></v>
<v t="swot.20221017093031.41"><vh>Row</vh>
<v t="swot.20221017093031.42"><vh>Container       -- show Align</vh>
<v t="swot.20221017093031.157"><vh>Align</vh></v>
</v>
<v t="swot.20221017093031.44"><vh>GestureDetector -- show AnimatedAlign</vh>
<v t="swot.20221017093031.159"><vh>AnimatedAlign</vh></v>
</v>
</v>
<v t="swot.20221017093031.46"><vh>Divider</vh></v>
<v t="swot.20221017093031.47"><vh>Row</vh>
<v t="swot.20221017093031.163"><vh>AnimatedBuilder</vh></v>
<v t="swot.20221017093031.49"><vh>GestureDetector -- show AnimatedContainer</vh>
<v t="swot.20221017093031.164"><vh>AnimatedContainer</vh></v>
</v>
</v>
<v t="swot.20221017093031.51"><vh>Divider</vh></v>
<v t="swot.20221017093031.52"><vh>Row                -- show AnimatedCrossFade</vh>
<v t="swot.20221017093031.53"><vh>TextButton</vh></v>
<v t="swot.20221017093031.165"><vh>AnimatedCrossFade</vh></v>
</v>
<v t="swot.20221017093031.55"><vh>Divider</vh></v>
<v t="swot.20221017093031.56"><vh>Row                -- show AnimatedDefaultTextStyle</vh>
<v t="swot.20221017093031.57"><vh>TextButton</vh></v>
<v t="swot.20221017093031.58"><vh>SizedBox</vh>
<v t="swot.20221017093031.166"><vh>AnimatedDefaultTextStyle</vh></v>
</v>
</v>
<v t="swot.20221017093031.60"><vh>Divider</vh></v>
<v t="swot.20221017093031.61"><vh>Row</vh>
<v t="swot.20221017093031.62"><vh>GestureDetector       -- show AnimatedIcon</vh>
<v t="swot.20221017093031.170"><vh>AnimatedIcon</vh></v>
</v>
<v t="swot.20221017093031.179"><vh>AnimatedModalBarrier  -- show AnimatedModalBarrier</vh></v>
</v>
<v t="swot.20221017093031.65"><vh>Divider</vh></v>
<v t="swot.20221017093031.175"><vh>show AnimatedList</vh>
<v t="swot.20221017093031.176"><vh>AnimatedList</vh>
<v t="swot.20221017093031.177"><vh>SizeTransition</vh></v>
</v>
</v>
<v t="swot.20221017093031.69"><vh>Divider</vh></v>
<v t="swot.20221017093031.194"><vh>show AnimatedOpacity</vh></v>
<v t="swot.20221017093031.71"><vh>Divider</vh></v>
<v t="swot.20221017093031.196"><vh>show AnimatedPadding</vh></v>
<v t="swot.20221017093031.73"><vh>Divider</vh></v>
<v t="swot.20221017093031.207"><vh>show AnimatedPhysicalModel</vh></v>
<v t="swot.20221017093031.75"><vh>Divider</vh></v>
<v t="swot.20221017093031.216"><vh>show AnimatedPositionedExample</vh></v>
<v t="swot.20221017093031.77"><vh>Divider</vh></v>
<v t="swot.20221017093031.226"><vh>show AnimatedRotationExample</vh></v>
<v t="swot.20221017093031.79"><vh>Divider</vh></v>
<v t="swot.20221017093031.235"><vh>show AnimatedSizeExample</vh></v>
<v t="swot.20221017093031.81"><vh>Divider</vh></v>
<v t="swot.20221017093031.251"><vh>show AnimatedSwitcherExample</vh></v>
<v t="swot.20221017093031.83"><vh>Divider</vh></v>
<v t="swot.20221017093031.253"><vh>AspectRatio</vh></v>
<v t="swot.20221017093031.85"><vh>Divider</vh></v>
<v t="swot.20221017093031.255"><vh>show AutoCompleteExample</vh></v>
<v t="swot.20221017093031.87"><vh>Divider</vh></v>
<v t="swot.20221017093031.88"><vh>SizedBox</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.180"><vh>AnimatedModalBarrierExample</vh>
<v t="swot.20221017093031.181"><vh>varible</vh></v>
<v t="swot.20221017093031.182"><vh>initState()</vh></v>
<v t="swot.20221017093031.183"><vh>dispose()</vh></v>
<v t="swot.20221017093031.184"><vh>build()</vh>
<v t="swot.20221017093031.185"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.186"><vh>_animatedModalBarrier</vh></v>
</v>
</v>
<v t="swot.20221017093031.188"><vh>AnimatedOpacityExample</vh>
<v t="swot.20221017093031.189"><vh>varible</vh></v>
<v t="swot.20221017093031.190"><vh>initState()</vh></v>
<v t="swot.20221017093031.191"><vh>build()</vh>
<v t="swot.20221017093031.192"><vh>AnimatedOpacity</vh></v>
<v t="swot.20221017093031.193"><vh>ElevatedButton</vh></v>
</v>
</v>
<v t="swot.20221017093031.197"><vh>AnimatedPaddingExample</vh>
<v t="swot.20221017093031.198"><vh>varible</vh></v>
<v t="swot.20221017093031.199"><vh>initState()</vh></v>
<v t="swot.20221017093031.200"><vh>build()</vh>
<v t="swot.20221017093031.201"><vh>Column</vh>
<v t="swot.20221017093031.202"><vh>Row</vh>
<v t="swot.20221017093031.203"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.204"><vh>Text</vh></v>
</v>
<v t="swot.20221017093031.205"><vh>AnimatedPadding</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.208"><vh>AnimatedPhysicalModelExample</vh>
<v t="swot.20221017093031.209"><vh>varible</vh></v>
<v t="swot.20221017093031.210"><vh>initState()</vh></v>
<v t="swot.20221017093031.211"><vh>dispose()</vh></v>
<v t="swot.20221017093031.212"><vh>build()</vh>
<v t="swot.20221017093031.213"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.214"><vh>AnimatedPhysicalModel</vh></v>
</v>
</v>
<v t="swot.20221017093031.217"><vh>AnimatedPositionedExample</vh>
<v t="swot.20221017093031.218"><vh>varible</vh></v>
<v t="swot.20221017093031.219"><vh>initState()</vh></v>
<v t="swot.20221017093031.220"><vh>dispose()</vh></v>
<v t="swot.20221017093031.221"><vh>build()</vh>
<v t="swot.20221017093031.222"><vh>SizedBox</vh>
<v t="swot.20221017093031.223"><vh>Stack</vh>
<v t="swot.20221017093031.224"><vh>AnimatedPositioned</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.227"><vh>AnimatedRotationExample</vh>
<v t="swot.20221017093031.228"><vh>varible</vh></v>
<v t="swot.20221017093031.229"><vh>initState()</vh></v>
<v t="swot.20221017093031.230"><vh>dispose()</vh></v>
<v t="swot.20221017093031.231"><vh>build()</vh>
<v t="swot.20221017093031.232"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.233"><vh>Padding</vh></v>
</v>
</v>
<v t="swot.20221017093031.236"><vh>AnimatedSizeExample</vh>
<v t="swot.20221017093031.237"><vh>varible</vh></v>
<v t="swot.20221017093031.238"><vh>initState()</vh></v>
<v t="swot.20221017093031.239"><vh>dispose()</vh></v>
<v t="swot.20221017093031.240"><vh>build()</vh>
<v t="swot.20221017093031.241"><vh>Text</vh></v>
<v t="swot.20221017093031.242"><vh>GestureDetector AnimatedSize FlutterLogo</vh></v>
</v>
</v>
<v t="swot.20221017093031.244"><vh>AnimatedSwitcherExample</vh>
<v t="swot.20221017093031.245"><vh>varible</vh></v>
<v t="swot.20221017093031.246"><vh>initState()</vh></v>
<v t="swot.20221017093031.247"><vh>dispose()</vh></v>
<v t="swot.20221017093031.248"><vh>build()</vh>
<v t="swot.20221017093031.249"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.250"><vh>AnimatedSwitcher</vh></v>
</v>
</v>
<v t="swot.20221017093031.256"><vh>AutoCompleteExample 不要在屏幕中部以下(会被软键盘挡住)</vh>
<v t="swot.20221017093031.257"><vh>varible</vh></v>
<v t="swot.20221017093031.258"><vh>build()</vh></v>
</v>
</v>
<v t="swot.20221017093031.150"><vh>#clean README.md</vh></v>
<v t="swot.20221017093031.151"><vh>A</vh>
<v t="swot.20221017093031.152"></v>
<v t="swot.20221017093031.153"></v>
<v t="swot.20221017093031.154"></v>
<v t="swot.20221017093031.156"></v>
<v t="swot.20221017093031.157"></v>
<v t="swot.20221017093031.158"><vh>Animated...</vh>
<v t="swot.20221017093031.159"></v>
<v t="swot.20221017093031.160"><vh>AnimatedBuilder</vh>
<v t="swot.20221017093031.161"></v>
<v t="swot.20221017093031.162"></v>
<v t="swot.20221017093031.163"></v>
</v>
<v t="swot.20221017093031.164"></v>
<v t="swot.20221017093031.165"></v>
<v t="swot.20221017093031.166"></v>
<v t="swot.20221017093031.167"><vh>AnimatedIcon</vh>
<v t="swot.20221017093031.168"></v>
<v t="swot.20221017093031.169"></v>
<v t="swot.20221017093031.170"></v>
</v>
<v t="swot.20221017093031.171"><vh>AnimatedList</vh>
<v t="swot.20221017093031.172"></v>
<v t="swot.20221017093031.173"></v>
<v t="swot.20221017093031.174"></v>
<v t="swot.20221017093031.175"></v>
</v>
<v t="swot.20221017093031.178"><vh>AnimatedModalBarrier</vh>
<v t="swot.20221017093031.179"></v>
<v t="swot.20221017093031.180"></v>
</v>
<v t="swot.20221017093031.187"><vh>AnimatedOpacity</vh>
<v t="swot.20221017093031.188"></v>
<v t="swot.20221017093031.194"></v>
</v>
<v t="swot.20221017093031.195"><vh>AnimatedPadding</vh>
<v t="swot.20221017093031.196"></v>
<v t="swot.20221017093031.197"></v>
</v>
<v t="swot.20221017093031.206"><vh>AnimatedPhysicalModel</vh>
<v t="swot.20221017093031.207"></v>
<v t="swot.20221017093031.208"></v>
</v>
<v t="swot.20221017093031.215"><vh>AnimatedPositioned</vh>
<v t="swot.20221017093031.216"></v>
<v t="swot.20221017093031.217"></v>
</v>
<v t="swot.20221017093031.225"><vh>AnimatedRotation</vh>
<v t="swot.20221017093031.226"></v>
<v t="swot.20221017093031.227"></v>
</v>
<v t="swot.20221017093031.234"><vh>AnimatedSize</vh>
<v t="swot.20221017093031.235"></v>
<v t="swot.20221017093031.236"></v>
</v>
<v t="swot.20221017093031.243"><vh>AnimatedSwitcher</vh>
<v t="swot.20221017093031.244"></v>
<v t="swot.20221017093031.251"></v>
</v>
</v>
<v t="swot.20221017093031.252"></v>
<v t="swot.20221017093031.253"></v>
<v t="swot.20221017093031.254"><vh>AutoComplete</vh>
<v t="swot.20221017093031.255"></v>
<v t="swot.20221017093031.256"></v>
</v>
</v>
<v t="swot.20221017093031.259"><vh>B</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="swot.20221017093031.1">@language dart
@tabwidth -2
</t>
<t tx="swot.20221017093031.10">// AnimatedAlign
// AnimatedContainer
// AnimatedCrossFade
// AnimatedDefaultTextStyle
bool selected = false;

// AnimatedDefaultTextStyle
double _fontSize = 20;
Color _color = Colors.blue;
</t>
<t tx="swot.20221017093031.14"></t>
<t tx="swot.20221017093031.150">@language md
## Flutter built in Widgets

This project is for main using Widgets.

### A...

    AboutDialog
    AboutListTile
    AbsorbPointer -- include button can not be clicked
    AlertDialog
    Align
    AnimatedAlign
    AnimatedBuilder
    AnimatedContainer
    AnimatedCrossFade
    AnimatedDefaultTextStyle
    AnimatedIcon
    AnimatedList
    AnimatedModalBarrier
    AnimatedOpacity
    AnimatedPadding
    AnimatedPhysicalModel
    AnimatedPositioned
    AnimatedRotation
    AnimatedSize
    AnimatedSwitcher
    AppBar
    AspectRatio
    AutoComplete
</t>
<t tx="swot.20221017093031.151">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.152">@doc
@language asciidoc
:nofooter:
image::../image/AboutDialog.png[AboutDialog,240]

@c
@language dart
@tabwidth -2
const AboutDialog(
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter App',
  applicationVersion: 'version 1.0.0',
  children: [
    Text('This is a text created by Flutter Mapp'),
  ],
),

</t>
<t tx="swot.20221017093031.153">@doc
@language asciidoc
:nofooter:
image::../image/AboutListTile.png[AboutListTile,240]

@c
@language dart
@tabwidth -2
const AboutListTile(
  icon: Icon(Icons.info),
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter',
  applicationVersion: 'version 1.0.0',
  aboutBoxChildren: [
    Text('This is a text created by Flutter Mapp'),
  ],
),
</t>
<t tx="swot.20221017093031.154">@doc
@language asciidoc
:nofooter:
image::../image/AbsorbPointer.png[AbsorbPointer,240]

@c
@language dart
@tabwidth -2
AbsorbPointer(
  child:
    @others
),
</t>
<t tx="swot.20221017093031.155">@language dart
@tabwidth -2
ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue.shade200,
  ),
  onPressed: (){},
  child: Text("不能点"),
),
</t>
<t tx="swot.20221017093031.156">AlertDialog(
  actions: [
    TextButton(
      onPressed: (){
        Navigator.of(context).pop();
      },
      child: const Text('Close'),
    ),
  ],
  title: const Text('Flutter Map'),
  contentPadding: const EdgeInsets.all(20.0),
  content: const Text('This is the alert Dialog'),
),
</t>
<t tx="swot.20221017093031.157">@doc
@language asciidoc
:nofooter:
image::../image/Align.png[Align,240]

@c
@language dart
@tabwidth -2
const Align(
  alignment: Alignment.topRight,
  // alignment: Alignment.bottonLeft,
  child: FlutterLogo(
    size: 20,
  ),
),
</t>
<t tx="swot.20221017093031.158">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.159">AnimatedAlign(
  alignment: selected ? Alignment.topRight : Alignment.bottomLeft,
  duration: const Duration(seconds: 1),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.160"></t>
<t tx="swot.20221017093031.161">late AnimationController _controllerBuilder;
</t>
<t tx="swot.20221017093031.162">_controllerBuilder = AnimationController(
  duration: const Duration(seconds: 10),  // 转一圈的时间
  vsync: this,                            // use TickerProviderStateMixin
)..repeat();                              // 10s 后重复

</t>
<t tx="swot.20221017093031.163">@doc
@language asciidoc
:nofooter:
1. define _controllerBuilder
2. _controllerBuilder: need class `with TickerProviderStateMixin`
3. _controllerBuilder: need dispose

@c
@language dart
@tabwidth -2
AnimatedBuilder(
  animation: _controllerBuilder,
  child: const FlutterLogo(size: 30,),
  builder: (BuildContext context, Widget? child){
    return Transform.rotate(
      angle: _controllerBuilder.value * 2.0 * math.pi,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.164">AnimatedContainer(
  width: selected ? 150.0 : 25.0,
  height: selected ? 25.0 : 40.0,
  color: selected ? Colors.blueGrey : Colors.grey,
  alignment: selected ? Alignment.center: AlignmentDirectional.topCenter,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.165">AnimatedCrossFade(
  firstChild: Image.network(
    'https://img2.baidu.com/it/u=2642639611,1941240358&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  secondChild: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  crossFadeState: selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
  duration: const Duration(seconds: 1),
),
</t>
<t tx="swot.20221017093031.166">AnimatedDefaultTextStyle(
  duration: const Duration(milliseconds: 300),
  style: TextStyle(
    fontSize: _fontSize,
    color: _color,
    fontWeight: FontWeight.bold,
  ),
  child: const Text('Flutter'),
),
</t>
<t tx="swot.20221017093031.167"></t>
<t tx="swot.20221017093031.168">bool _isPlay = false;
late AnimationController _controllerIcon;
</t>
<t tx="swot.20221017093031.169">_controllerIcon = AnimationController(
  duration: Duration(seconds: 1),
  vsync: this  // use TickerProviderStateMixin
);
</t>
<t tx="swot.20221017093031.17">@override
void initState() {
  @others
  super.initState();
}
</t>
<t tx="swot.20221017093031.170">@doc
@language asciidoc
:nofooter:
1. define AnimationController
2. AnimationController: need class `with TickerProviderStateMixin`
3. AnimationController: need dispose

@c
@language dart
@tabwidth -2
AnimatedIcon(
  // play is the first icon
  // pause is the second icon
  icon: AnimatedIcons.play_pause,
  progress: _controllerIcon,
  size: 40,
),
</t>
<t tx="swot.20221017093031.171"></t>
<t tx="swot.20221017093031.172">final _items = [];
final GlobalKey&lt;AnimatedListState&gt; _key = GlobalKey();
</t>
<t tx="swot.20221017093031.173">void _addItem() {
  _items.insert(0, "Item ${_items.length + 1}");
  _key.currentState!.insertItem(
    0,
    duration: const Duration(seconds: 1),
  );
}
</t>
<t tx="swot.20221017093031.174">void _removeItem(int index) {
  _key.currentState!.removeItem(
    index,
    (_, animation) {
      return SizeTransition(
        sizeFactor: animation,
        child: const Card(
          margin: EdgeInsets.all(10),
          color: Colors.red,
          child: ListTile(
            title: Text(
              "Deleted",
              style: TextStyle(fontSize: 14),
            ),
            visualDensity: const VisualDensity(vertical: -3),  // adjust listTile height
            dense: true,
          ),
        ),
      );
    },
    duration: const Duration(milliseconds: 600),
  );
  _items.removeAt(index);
}
</t>
<t tx="swot.20221017093031.175">IconButton(
  onPressed: _addItem,
  icon: const Icon(Icons.add),
),

SizedBox(
  height: 150,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.176">AnimatedList(
  key: _key,
  initialItemCount: 0,
  padding: const EdgeInsets.all(10),
  itemBuilder: (context, index, animation) {
    @others
  },
),
</t>
<t tx="swot.20221017093031.177">return SizeTransition(
  key: UniqueKey(),
  sizeFactor: animation,
  child: Card(
    margin: const EdgeInsets.all(3),
    color: Colors.orangeAccent,
    child: ListTile(
      title: Text(
        _items[index],
        style: const TextStyle(fontSize: 14),
      ),
      trailing: IconButton(
        icon: const Icon(Icons.delete),
        onPressed: (){
          _removeItem(index);
        },
      ),
      visualDensity: const VisualDensity(vertical: -3),  // adjust listTile height
      dense: true,  // 高度会更加紧密，就是高度更小的意思
    ),
  ),
);
</t>
<t tx="swot.20221017093031.178"></t>
<t tx="swot.20221017093031.179">const AnimatedModalBarrierExample(),
</t>
<t tx="swot.20221017093031.180">@language dart
@tabwidth -2
class AnimatedModalBarrierExample extends StatefulWidget {
  const AnimatedModalBarrierExample({super.key});

  @override
  State&lt;AnimatedModalBarrierExample&gt; createState() =&gt; _AnimatedModalBarrierExampleState();
}

class _AnimatedModalBarrierExampleState extends State&lt;AnimatedModalBarrierExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221017093031.181">bool _isPressed = false;
late Widget _animatedModalBarrier;
late AnimationController _animationController;
late Animation&lt;Color?&gt; _colorAnimation;

</t>
<t tx="swot.20221017093031.182">@override
void initState() {
  ColorTween colorTween = ColorTween(
    begin: Colors.orangeAccent.withOpacity(0.5),
    end: Colors.blueGrey.withOpacity(0.5),
  );
  _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
  );
  _colorAnimation = colorTween.animate(_animationController);
  _animatedModalBarrier = AnimatedModalBarrier(
    color: _colorAnimation,
    dismissible: true,
  );
  super.initState();
}
</t>
<t tx="swot.20221017093031.183">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.184">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 50.0,
    width: 150.0,
    child: Stack(
      alignment: AlignmentDirectional.center,
      children: [
        @others
      ],
    ),
  );
}
</t>
<t tx="swot.20221017093031.185">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  onPressed: (){
    setState(() {
      _isPressed = true;
    });
    _animationController.reset();
    _animationController.forward();
    Future.delayed(
      const Duration(seconds: 3), (){
        setState(() {
          _isPressed = false;
        });
      }
    );
  },
  child: const Text('Press'),
),
</t>
<t tx="swot.20221017093031.186">if (_isPressed) _animatedModalBarrier,
</t>
<t tx="swot.20221017093031.187"></t>
<t tx="swot.20221017093031.188">@language dart
@tabwidth -2
class AnimatedOpacityExample extends StatefulWidget {
  const AnimatedOpacityExample({super.key});

  @override
  State&lt;AnimatedOpacityExample&gt; createState() =&gt; _AnimatedOpacityExampleState();
}

class _AnimatedOpacityExampleState extends State&lt;AnimatedOpacityExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.189">double opacityLevel = 1.0;
</t>
<t tx="swot.20221017093031.190">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.191">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.192">AnimatedOpacity(
  opacity: opacityLevel,
  duration: const Duration(seconds: 2),
  child: const FlutterLogo(size: 30),
),

</t>
<t tx="swot.20221017093031.193">ElevatedButton(
  child: const Text('Fade Logo'),
  onPressed: (){
    setState(
      () =&gt; opacityLevel = opacityLevel == 0 ? 1.0 : 0.0,
    );
  },
),
</t>
<t tx="swot.20221017093031.194">AnimatedOpacityExample(),
</t>
<t tx="swot.20221017093031.195"></t>
<t tx="swot.20221017093031.196">AnimatedPaddingExample(),
</t>
<t tx="swot.20221017093031.197">@language dart
@tabwidth -2
class AnimatedPaddingExample extends StatefulWidget {
  const AnimatedPaddingExample({super.key});

  @override
  State&lt;AnimatedPaddingExample&gt; createState() =&gt; _AnimatedPaddingExampleState();
}

class _AnimatedPaddingExampleState extends State&lt;AnimatedPaddingExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.198">double padValue = 0.0;
</t>
<t tx="swot.20221017093031.199">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.2">@language dart
@tabwidth -2
@others

</t>
<t tx="swot.20221017093031.20">@override
void dispose() {
  _controllerBuilder.dispose();  // AnimatedBuilder
  _controllerIcon.dispose();     // AnimatedList
  super.dispose();
}
</t>
<t tx="swot.20221017093031.200">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.201">Column(
  children: [
    @others
  ],
);
</t>
<t tx="swot.20221017093031.202">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.203">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Change padding'),
  onPressed: () {
    setState((){
      padValue = padValue == 0.0 ? 100.0 : 0.0;
    });
  },
),

</t>
<t tx="swot.20221017093031.204">Text('Padding = $padValue'),
</t>
<t tx="swot.20221017093031.205">AnimatedPadding(
  // padValue will be changed
  padding: EdgeInsets.all(padValue),
  duration: const Duration(seconds: 2),
  curve: Curves.easeInOut,
  child: Container(
    width: MediaQuery.of(context).size.width,
    height: 30.0,
    color: Colors.orangeAccent,
  ),
),
</t>
<t tx="swot.20221017093031.206"></t>
<t tx="swot.20221017093031.207">AnimatedPhysicalModelExample(),
</t>
<t tx="swot.20221017093031.208">@language dart
@tabwidth -2
class AnimatedPhysicalModelExample extends StatefulWidget {
  const AnimatedPhysicalModelExample({super.key});

  @override
  State&lt;AnimatedPhysicalModelExample&gt; createState() =&gt; _AnimatedPhysicalModelExampleState();
}

class _AnimatedPhysicalModelExampleState extends State&lt;AnimatedPhysicalModelExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.209">bool isFlat = true;
</t>
<t tx="swot.20221017093031.21">@override
Widget build(BuildContext context) {
  return
    @others
  ;
}
</t>
<t tx="swot.20221017093031.210">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.211">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.212">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.213">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Click'),
  onPressed: () {
    setState(() {
      isFlat = ! isFlat;
    });
  },
),

</t>
<t tx="swot.20221017093031.214">AnimatedPhysicalModel(
  duration: const Duration(milliseconds: 500),
  curve: Curves.fastOutSlowIn,
  elevation: isFlat ? 0 : 6.0,
  shape: BoxShape.rectangle,
  shadowColor: Colors.black,
  color: Colors.white,
  child: const SizedBox(
    height: 40.0,
    width: 40.0,
    child: Icon(Icons.android_outlined),
  ),
),

</t>
<t tx="swot.20221017093031.215"></t>
<t tx="swot.20221017093031.216">AnimatedPositionedExample(),
</t>
<t tx="swot.20221017093031.217">@language dart
@tabwidth -2
class AnimatedPositionedExample extends StatefulWidget {
  const AnimatedPositionedExample({super.key});

  @override
  State&lt;AnimatedPositionedExample&gt; createState() =&gt; _AnimatedPositionedExampleState();
}

class _AnimatedPositionedExampleState extends State&lt;AnimatedPositionedExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.218">bool selected = false;
</t>
<t tx="swot.20221017093031.219">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.22">SingleChildScrollView(
  child:
    @others
)
</t>
<t tx="swot.20221017093031.220">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.221">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.222">SizedBox(
  width: 200,
  height: 100,
  child:
    @others
);
</t>
<t tx="swot.20221017093031.223">Stack(
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221017093031.224">AnimatedPositioned(
  width: selected ? 200.0 : 150.0,
  height: selected ? 60.0 : 20.0,
  top: selected ? 35.0: 5.0,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: GestureDetector(
    onTap: () {
      setState(() {
        selected = !selected;
      });
    },
    child: Container(
      decoration: BoxDecoration(
        color: Colors.orangeAccent,
        borderRadius: BorderRadius.circular(25),
      ),
      child: const Text('click change position'),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.225"></t>
<t tx="swot.20221017093031.226">AnimatedRotationExample(),
</t>
<t tx="swot.20221017093031.227">@language dart
@tabwidth -2
class AnimatedRotationExample extends StatefulWidget {
  const AnimatedRotationExample({super.key});

  @override
  State&lt;AnimatedRotationExample&gt; createState() =&gt; _AnimatedRotationExampleState();
}

class _AnimatedRotationExampleState extends State&lt;AnimatedRotationExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.228">double turns = 0.0;
</t>
<t tx="swot.20221017093031.229">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.23">Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221017093031.230">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.231">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.232">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Rotate Logo'),
  onPressed: () {
    setState(() {
      turns += 1 / 4;
    });
  },
),

</t>
<t tx="swot.20221017093031.233">Padding(
  padding: const EdgeInsets.all(5),
  child: AnimatedRotation(
    turns: turns,
    duration: const Duration(seconds: 1),
    child: const FlutterLogo(size: 40),
  ),
),
</t>
<t tx="swot.20221017093031.234"></t>
<t tx="swot.20221017093031.235">AnimatedSizeExample(),
</t>
<t tx="swot.20221017093031.236">@language dart
@tabwidth -2
class AnimatedSizeExample extends StatefulWidget {
  const AnimatedSizeExample({super.key});

  @override
  State&lt;AnimatedSizeExample&gt; createState() =&gt; _AnimatedSizeExampleState();
}

class _AnimatedSizeExampleState extends State&lt;AnimatedSizeExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.237">double _size = 30;
</t>
<t tx="swot.20221017093031.238">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.239">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.24">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.240">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.241">Text("Click logo change size"),
</t>
<t tx="swot.20221017093031.242">GestureDetector(
  onTap: (){
    setState(() {
      _size = _size == 30 ? 60 : 30;
    });
  },
  child: Container(
    color: Colors.white,
    child: AnimatedSize(
      curve: Curves.easeIn,
      duration: const Duration(seconds: 1),
      child: FlutterLogo(size: _size),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.243"></t>
<t tx="swot.20221017093031.244">@language dart
@tabwidth -2
class AnimatedSwitcherExample extends StatefulWidget {
  const AnimatedSwitcherExample({super.key});

  @override
  State&lt;AnimatedSwitcherExample&gt; createState() =&gt; _AnimatedSwitcherExampleState();
}

class _AnimatedSwitcherExampleState extends State&lt;AnimatedSwitcherExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.245">int _count = 0;
</t>
<t tx="swot.20221017093031.246">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.247">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.248">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.249">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Add'),
  onPressed: () {
    setState(() {
      _count += 1;
    });
  },
),

</t>
<t tx="swot.20221017093031.25">ElevatedButton(
  child: const Text('Show About Dialog'),
  onPressed: (){
    @others
  }
),
</t>
<t tx="swot.20221017093031.250">AnimatedSwitcher(
  duration: const Duration(milliseconds: 500),
  child: Text(
    '$_count',
    style: const TextStyle(fontSize: 30),
    key: ValueKey(_count),  // 重要，不加这行无法实现动画
  ),
  // 若不想要默认的动画效果，可能这样指定
  transitionBuilder: (Widget child, Animation&lt;double&gt; animation) {
    return ScaleTransition(
      scale: animation,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.251">AnimatedSwitcherExample(),
</t>
<t tx="swot.20221017093031.252">appBar: AppBar(
  title: const Text('demo'),
  centerTitle: true,

  leading: IconButton(
    icon: const Icon(Icons.menu),
    onPressed: (){},
  ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: (){},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0,  // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221017093031.253">Container(
  color: Colors.orangeAccent,
  alignment: Alignment.center,
  width: double.infinity,
  height: 100,
  child: AspectRatio(
    aspectRatio: 16 / 9,
    child: Container(
      color: Colors.blueGrey,
      alignment: Alignment.center,
      child: const Text("AspecRatio 16 / 9"),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.254"></t>
<t tx="swot.20221017093031.255">AutoCompleteExample(),
</t>
<t tx="swot.20221017093031.256">@language dart
@tabwidth -2
class AutoCompleteExample extends StatelessWidget {
  const AutoCompleteExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221017093031.257">static const List&lt;String&gt; listItems = &lt;String&gt;[
  'apple',
  'banana',
  'melon',
];
</t>
<t tx="swot.20221017093031.258">@override
Widget build(BuildContext context) {
  return Autocomplete&lt;String&gt;(
    optionsBuilder: (TextEditingValue textEditingValue) {
      if (textEditingValue.text == '') {
        return const Iterable&lt;String&gt;.empty();
      }
      return listItems.where((String item) {
        return item.contains(textEditingValue.text.toLowerCase());
      });
    },
    onSelected: (String item) {
      print('The $item was selected');
    },
  );
}
</t>
<t tx="swot.20221017093031.259"></t>
<t tx="swot.20221017093031.26">showDialog(
  context: context,
  builder: (context) =&gt;
    @others
);
</t>
<t tx="swot.20221017093031.28">@doc
@language asciidoc
:nofooter:
https://www.flutterbeads.com/renderbox-was-not-laid-out/?[3 Ways to Fix RenderBox was not Laid Out in Flutter [2022]]

使用 SizedBox 可以解决上面报错的问题

@c
@language dart
@tabwidth -2
SizedBox(
  width: 200.0,
  height: 40.0,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.3">import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'dart:async';
</t>
<t tx="swot.20221017093031.30">Divider(),</t>
<t tx="swot.20221017093031.31">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.32">Stack(
  alignment: AlignmentDirectional.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.33">SizedBox(
  width: 100.0,
  height: 30.0,
  child: ElevatedButton(
    onPressed: (){},
    child: null,
  ),
),
</t>
<t tx="swot.20221017093031.34">SizedBox(
  width: 40.0,
  height: 60.0,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.37">ElevatedButton(
  child: const Text('Show Alert Dialog'),
  onPressed: (){
    @others
  },
),
</t>
<t tx="swot.20221017093031.38">showDialog(
  context: context,
  builder: (context) =&gt;
    @others
);
</t>
<t tx="swot.20221017093031.4">void main(){
  runApp(MyApp());
}
</t>
<t tx="swot.20221017093031.40">Divider(),</t>
<t tx="swot.20221017093031.41">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.42">Container(
  margin: const EdgeInsets.symmetric(vertical: 4.0),
  height: 40.0,
  width: 100.0,
  color: Colors.blueGrey,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.44">GestureDetector(
  onTap: (){
    setState((){
      selected = !selected;
    });
  },
  child: Center(
    child: Container(
      width: 150.0,
      height: 40.0,
      color: Colors.grey,
      child:
        @others
    ),
  ),
),
</t>
<t tx="swot.20221017093031.46">Divider(),</t>
<t tx="swot.20221017093031.47">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.49">GestureDetector(
  onTap: (){
    setState((){
      selected = !selected;
    });
  },
  child: Center(
    child:
      @others
  ),
),
</t>
<t tx="swot.20221017093031.5">class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'demo',
      home: Home(),
      theme: ThemeData(
        // fontFamily: 'SourceSansPro',
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}
</t>
<t tx="swot.20221017093031.51">Divider(),</t>
<t tx="swot.20221017093031.52">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.53">Container(
  height: 30.0,
  child:TextButton(
    onPressed:(){
      setState((){
        selected = !selected;
      });
    },
    child: const Text(
      'Switch image',
      style: TextStyle(
        color: Colors.black,
      ),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.55">Divider(),</t>
<t tx="swot.20221017093031.56">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.57">TextButton(
  onPressed: (){
    setState((){
      _fontSize = selected ? 40 : 20;
      _color = selected ? Colors.blue : Colors.red;
      selected = !selected;
    });
  },
  child: const Text('Switch Font'),
),
</t>
<t tx="swot.20221017093031.58">SizedBox(
  height: 40,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.6">class Home extends StatelessWidget {
  const Home({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      @others
      body: Demo(),
    );
  }
}
</t>
<t tx="swot.20221017093031.60">Divider(),</t>
<t tx="swot.20221017093031.61">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.62">GestureDetector(
  onTap: () {
    if (_isPlay == false) {
      _controllerIcon.forward();  // 下个图标
      _isPlay = true;
    } else {
      _controllerIcon.reverse();  // 前个图标
      _isPlay = false;
    }
  },
  child:
    @others
),
</t>
<t tx="swot.20221017093031.65">Divider(),</t>
<t tx="swot.20221017093031.69">Divider(),</t>
<t tx="swot.20221017093031.71">Divider(),</t>
<t tx="swot.20221017093031.73">Divider(),</t>
<t tx="swot.20221017093031.75">Divider(),</t>
<t tx="swot.20221017093031.77">Divider(),</t>
<t tx="swot.20221017093031.79">Divider(),</t>
<t tx="swot.20221017093031.8">@language dart
@tabwidth -2
class Demo extends StatefulWidget {
  const Demo({super.key});

  @override
  State&lt;Demo&gt; createState() =&gt; _DemoState();
}

class _DemoState extends State&lt;Demo&gt; with TickerProviderStateMixin {
  // AnimationController use TickerProviderStateMixin
  @others
}

</t>
<t tx="swot.20221017093031.81">Divider(),</t>
<t tx="swot.20221017093031.83">Divider(),</t>
<t tx="swot.20221017093031.85">Divider(),</t>
<t tx="swot.20221017093031.87">Divider(),</t>
<t tx="swot.20221017093031.88">SizedBox(
  height: 200.0,
),</t>
<t tx="swot.20221017093031.9"></t>
</tnodes>
</leo_file>
