<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20221017093031.1"><vh>widgets</vh>
<v t="swot.20221017093031.2"><vh>@file lib/main.dart</vh></v>
<v t="swot.20221017093031.150"><vh>@clean README.md</vh></v>
<v t="swot.20221017093031.151"><vh>A</vh>
<v t="swot.20221017093031.152"><vh>AboutDialog</vh></v>
<v t="swot.20221017093031.153"><vh>AboutListTile</vh></v>
<v t="swot.20221017093031.154"><vh>AbsorbPointer -- include button can not be clicked</vh>
<v t="swot.20221017093031.155"><vh>ElevatedButton 不可点击</vh></v>
</v>
<v t="swot.20221017093031.156"><vh>AlertDialog</vh></v>
<v t="swot.20221017093031.157"><vh>Align</vh></v>
<v t="swot.20221017093031.158"><vh>Animated...</vh>
<v t="swot.20221017093031.159"><vh>AnimatedAlign</vh></v>
<v t="swot.20221017093031.160"><vh>AnimatedBuilder</vh>
<v t="swot.20221017093031.161"><vh>var for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.162"><vh>AnimationController for AnimatedBuilder</vh></v>
<v t="swot.20221017093031.163"><vh>AnimatedBuilder</vh></v>
</v>
<v t="swot.20221017093031.164"><vh>AnimatedContainer</vh></v>
<v t="swot.20221017093031.165"><vh>AnimatedCrossFade</vh></v>
<v t="swot.20221017093031.166"><vh>AnimatedDefaultTextStyle</vh></v>
<v t="swot.20221017093031.167"><vh>AnimatedIcon</vh>
<v t="swot.20221017093031.168"><vh>var for AnimatedIcon</vh></v>
<v t="swot.20221017093031.169"><vh>AnimationController for AnimatedIcon</vh></v>
<v t="swot.20221017093031.170"><vh>AnimatedIcon</vh></v>
</v>
<v t="swot.20221017093031.171"><vh>AnimatedList</vh>
<v t="swot.20221017093031.172"><vh>var for AnimatedList</vh></v>
<v t="swot.20221017093031.173"><vh>_addItem()             -- AnimatedList</vh></v>
<v t="swot.20221017093031.174"><vh>_removeItem(int index) -- AnimatedList</vh></v>
<v t="swot.20221017093031.175"><vh>show AnimatedList</vh>
<v t="swot.20221017093031.176"><vh>AnimatedList</vh>
<v t="swot.20221017093031.177"><vh>SizeTransition</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.178"><vh>AnimatedModalBarrier</vh>
<v t="swot.20221017093031.179"><vh>AnimatedModalBarrier  -- show AnimatedModalBarrier</vh></v>
<v t="swot.20221017093031.180"><vh>AnimatedModalBarrierExample</vh>
<v t="swot.20221017093031.181"><vh>varible</vh></v>
<v t="swot.20221017093031.182"><vh>initState()</vh></v>
<v t="swot.20221017093031.183"><vh>dispose()</vh></v>
<v t="swot.20221017093031.184"><vh>build()</vh>
<v t="swot.20221017093031.185"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.186"><vh>_animatedModalBarrier</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.187"><vh>AnimatedOpacity</vh>
<v t="swot.20221017093031.188"><vh>AnimatedOpacityExample</vh>
<v t="swot.20221017093031.189"><vh>varible</vh></v>
<v t="swot.20221017093031.190"><vh>initState()</vh></v>
<v t="swot.20221017093031.191"><vh>build()</vh>
<v t="swot.20221017093031.192"><vh>AnimatedOpacity</vh></v>
<v t="swot.20221017093031.193"><vh>ElevatedButton</vh></v>
</v>
</v>
<v t="swot.20221017093031.194"><vh>show AnimatedOpacity</vh></v>
</v>
<v t="swot.20221017093031.195"><vh>AnimatedPadding</vh>
<v t="swot.20221017093031.196"><vh>show AnimatedPadding</vh></v>
<v t="swot.20221017093031.197"><vh>AnimatedPaddingExample</vh>
<v t="swot.20221017093031.198"><vh>varible</vh></v>
<v t="swot.20221017093031.199"><vh>initState()</vh></v>
<v t="swot.20221017093031.200"><vh>build()</vh>
<v t="swot.20221017093031.201"><vh>Column</vh>
<v t="swot.20221017093031.202"><vh>Row</vh>
<v t="swot.20221017093031.203"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.204"><vh>Text</vh></v>
</v>
<v t="swot.20221017093031.205"><vh>AnimatedPadding</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.206"><vh>AnimatedPhysicalModel</vh>
<v t="swot.20221017093031.207"><vh>show AnimatedPhysicalModel</vh></v>
<v t="swot.20221017093031.208"><vh>AnimatedPhysicalModelExample</vh>
<v t="swot.20221017093031.209"><vh>varible</vh></v>
<v t="swot.20221017093031.210"><vh>initState()</vh></v>
<v t="swot.20221017093031.211"><vh>dispose()</vh></v>
<v t="swot.20221017093031.212"><vh>build()</vh>
<v t="swot.20221017093031.213"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.214"><vh>AnimatedPhysicalModel</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.215"><vh>AnimatedPositioned</vh>
<v t="swot.20221017093031.216"><vh>show AnimatedPositionedExample</vh></v>
<v t="swot.20221017093031.217"><vh>AnimatedPositionedExample</vh>
<v t="swot.20221017093031.218"><vh>varible</vh></v>
<v t="swot.20221017093031.219"><vh>initState()</vh></v>
<v t="swot.20221017093031.220"><vh>dispose()</vh></v>
<v t="swot.20221017093031.221"><vh>build()</vh>
<v t="swot.20221017093031.222"><vh>SizedBox</vh>
<v t="swot.20221017093031.223"><vh>Stack</vh>
<v t="swot.20221017093031.224"><vh>AnimatedPositioned</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221017093031.225"><vh>AnimatedRotation</vh>
<v t="swot.20221017093031.226"><vh>show AnimatedRotationExample</vh></v>
<v t="swot.20221017093031.227"><vh>AnimatedRotationExample</vh>
<v t="swot.20221017093031.228"><vh>varible</vh></v>
<v t="swot.20221017093031.229"><vh>initState()</vh></v>
<v t="swot.20221017093031.230"><vh>dispose()</vh></v>
<v t="swot.20221017093031.231"><vh>build()</vh>
<v t="swot.20221017093031.232"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.233"><vh>Padding</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.234"><vh>AnimatedSize</vh>
<v t="swot.20221017093031.235"><vh>show AnimatedSizeExample</vh></v>
<v t="swot.20221017093031.236"><vh>AnimatedSizeExample</vh>
<v t="swot.20221017093031.237"><vh>varible</vh></v>
<v t="swot.20221017093031.238"><vh>initState()</vh></v>
<v t="swot.20221017093031.239"><vh>dispose()</vh></v>
<v t="swot.20221017093031.240"><vh>build()</vh>
<v t="swot.20221017093031.241"><vh>Text</vh></v>
<v t="swot.20221017093031.242"><vh>GestureDetector AnimatedSize FlutterLogo</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.243"><vh>AnimatedSwitcher</vh>
<v t="swot.20221017093031.244"><vh>AnimatedSwitcherExample</vh>
<v t="swot.20221017093031.245"><vh>varible</vh></v>
<v t="swot.20221017093031.246"><vh>initState()</vh></v>
<v t="swot.20221017093031.247"><vh>dispose()</vh></v>
<v t="swot.20221017093031.248"><vh>build()</vh>
<v t="swot.20221017093031.249"><vh>ElevatedButton</vh></v>
<v t="swot.20221017093031.250"><vh>AnimatedSwitcher</vh></v>
</v>
</v>
<v t="swot.20221017093031.251"><vh>show AnimatedSwitcherExample</vh></v>
</v>
</v>
<v t="swot.20221017093031.252"><vh>AppBar</vh></v>
<v t="swot.20221017093031.253"><vh>AspectRatio</vh></v>
<v t="swot.20221017093031.254"><vh>AutoComplete</vh>
<v t="swot.20221017093031.255"><vh>show AutoCompleteExample</vh></v>
<v t="swot.20221017093031.256"><vh>AutoCompleteExample 不要在屏幕中部以下(会被软键盘挡住)</vh>
<v t="swot.20221017093031.257"><vh>varible</vh></v>
<v t="swot.20221017093031.258"><vh>build()</vh></v>
</v>
</v>
</v>
<v t="swot.20221017093031.259"><vh>B</vh>
<v t="swot.20221021173546.1"><vh>BackdropFilterExample</vh>
<v t="swot.20221019111317.2"><vh>BackdropFilterExample</vh>
<v t="swot.20221019111317.3"><vh>build()</vh></v>
</v>
<v t="swot.20221021173506.1"><vh>show BackdropFilterExample</vh></v>
</v>
<v t="swot.20221021174618.1"><vh>BannerExample</vh>
<v t="swot.20221021175217.2"><vh>BannerExample</vh>
<v t="swot.20221021175217.3"><vh>build()</vh>
<v t="swot.20221021175330.1"><vh>Center</vh>
<v t="swot.20221021175401.1"><vh>Container</vh>
<v t="swot.20221021180745.1"><vh>ClipRect</vh>
<v t="swot.20221021180828.1"><vh>Banner</vh>
<v t="swot.20221021175506.1"><vh>Container</vh>
<v t="swot.20221021175604.1"><vh>Padding</vh>
<v t="swot.20221021175702.1"><vh>Column</vh>
<v t="swot.20221021175915.1"><vh>Image</vh></v>
<v t="swot.20221021180035.1"><vh>SizedBox</vh></v>
<v t="swot.20221021180106.1"><vh>Row</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221021181118.1"><vh>show BannerExample</vh></v>
</v>
<v t="swot.20221021181511.1"><vh>BaselineExample</vh>
<v t="swot.20221021181642.2"><vh>BaselineExample</vh>
<v t="swot.20221021181642.3"><vh>build()</vh></v>
</v>
<v t="swot.20221021181700.1"><vh>show BaselineExample</vh></v>
</v>
<v t="swot.20221021182532.1"><vh>BlockSemanticsExample -- 适用于读屏功能的处理</vh>
<v t="swot.20221022083314.1"><vh>&lt;&lt; showSemanticsDebugger &gt;&gt;</vh></v>
<v t="swot.20221022080218.2"><vh>BlockSemanticsExample</vh>
<v t="swot.20221022083723.1"><vh>varible</vh></v>
<v t="swot.20221022080218.3"><vh>initState()</vh></v>
<v t="swot.20221022080218.4"><vh>dispose()</vh></v>
<v t="swot.20221022080218.5"><vh>build()</vh>
<v t="swot.20221022080422.1"><vh>SizedBox</vh>
<v t="swot.20221022083203.1"><vh>SizedBox</vh>
<v t="swot.20221022083954.1"><vh>Column</vh>
<v t="swot.20221022084045.1"><vh>OutlinedButton</vh></v>
<v t="swot.20221022084513.1"><vh>if (isShow)</vh>
<v t="swot.20221022091825.1"><vh>BlockSemantics</vh>
<v t="swot.20221022090937.1"><vh>Card</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="swot.20221022085519.1"><vh>show BlockSemanticsExample</vh></v>
</v>
<v t="swot.20221022093209.1"><vh>BottomNavigationBarExample</vh>
<v t="swot.20221022094100.2"><vh>BottomNavigationBarExample</vh>
<v t="swot.20221022094133.1"><vh>varible</vh></v>
<v t="swot.20221022094100.3"><vh>initState()</vh></v>
<v t="swot.20221022094100.4"><vh>dispose()</vh></v>
<v t="swot.20221022094100.5"><vh>build()</vh>
<v t="swot.20221022095720.2"><vh>Scaffold</vh>
<v t="swot.20221022101748.1"><vh>appBar</vh></v>
<v t="swot.20221022095720.4"><vh>body</vh></v>
<v t="swot.20221022095720.5"><vh>bottomNavigationBar</vh></v>
</v>
</v>
</v>
<v t="swot.20221022101129.1"><vh>show BottomNavigationBarExample</vh></v>
</v>
<v t="swot.20221022104755.1"><vh>BottomSheetExample</vh>
<v t="swot.20221022104843.2"><vh>BottomSheetExample</vh>
<v t="swot.20221022104843.3"><vh>initState()</vh></v>
<v t="swot.20221022104843.4"><vh>dispose()</vh></v>
<v t="swot.20221022104843.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022094818.1"><vh>show BottomSheetExample</vh></v>
</v>
<v t="swot.20221022104749.1"><vh>BuilderExample</vh>
<v t="swot.20221022110627.2"><vh>BuilderExample</vh>
<v t="swot.20221022110627.3"><vh>build()</vh></v>
<v t="swot.20221022110900.1"><vh>myBuilderWidget()</vh></v>
</v>
</v>
</v>
<v t="swot.20221022115422.1"><vh>C</vh>
<v t="swot.20221022121827.1"><vh>CardExample</vh>
<v t="swot.20221022121755.2"><vh>CardExample</vh>
<v t="swot.20221022121755.3"><vh>build()</vh>
<v t="swot.20221022122022.1"><vh>Card</vh></v>
</v>
</v>
<v t="swot.20221022121559.5"><vh>show CardExample</vh></v>
</v>
<v t="swot.20221022122630.1"><vh>CenterExample</vh>
<v t="swot.20221022122655.2"><vh>CenterExample</vh>
<v t="swot.20221022122655.3"><vh>build()</vh>
<v t="swot.20221022122945.1"><vh>Center</vh></v>
</v>
</v>
<v t="swot.20221022123052.1"><vh>show CenterExample</vh></v>
</v>
<v t="swot.20221022124036.1"><vh>CheckboxExample</vh>
<v t="swot.20221022141252.2"><vh>CheckboxExample</vh>
<v t="swot.20221022141315.1"><vh>varible</vh></v>
<v t="swot.20221022141252.3"><vh>initState()</vh></v>
<v t="swot.20221022141252.4"><vh>dispose()</vh></v>
<v t="swot.20221022141252.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022141621.1"><vh>show CheckboxExample</vh></v>
</v>
<v t="swot.20221022141927.1"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022141946.2"><vh>CheckboxListTileExample</vh>
<v t="swot.20221022142005.1"><vh>varible</vh></v>
<v t="swot.20221022141946.3"><vh>initState()</vh></v>
<v t="swot.20221022141946.4"><vh>dispose()</vh></v>
<v t="swot.20221022141946.5"><vh>build()</vh>
<v t="swot.20221022142124.1"><vh>CheckboxListTile</vh></v>
</v>
</v>
<v t="swot.20221022142602.1"><vh>show CheckboxListTileExample</vh></v>
</v>
<v t="swot.20221022142903.1"><vh>ChipExample</vh>
<v t="swot.20221022142919.2"><vh>ChipExample</vh>
<v t="swot.20221022142919.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022143204.1"><vh>show ChipExample</vh></v>
</v>
<v t="swot.20221022144321.1"><vh>ChoiceChipExample</vh>
<v t="swot.20221022144339.2"><vh>ChoiceChipExample</vh>
<v t="swot.20221022144356.1"><vh>varible</vh></v>
<v t="swot.20221022144339.3"><vh>initState()</vh></v>
<v t="swot.20221022144339.4"><vh>dispose()</vh></v>
<v t="swot.20221022144339.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022144701.1"><vh>show ChoiceChipExample</vh></v>
</v>
<v t="swot.20221022144956.1"><vh>CircleAvatarExample</vh>
<v t="swot.20221022145018.2"><vh>CircleAvatarExample</vh>
<v t="swot.20221022145018.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022145230.1"><vh>show CircleAvatarExample</vh></v>
</v>
<v t="swot.20221022153206.1"><vh>CircularProgressIndicatorExample</vh>
<v t="swot.20221022153237.2"><vh>CircularProgressIndicatorExample</vh>
<v t="swot.20221022153237.3"><vh>initState()</vh></v>
<v t="swot.20221022153237.4"><vh>dispose()</vh></v>
<v t="swot.20221022153237.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022153425.1"><vh>show CircularProgressIndicatorExample</vh></v>
</v>
<v t="swot.20221022153732.1"><vh>ClipOvalExample</vh>
<v t="swot.20221022153848.2"><vh>ClipOvalExample</vh>
<v t="swot.20221022153848.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022154849.1"><vh>CustomClip</vh></v>
<v t="swot.20221022154220.1"><vh>show ClipOvalExample</vh></v>
</v>
<v t="swot.20221022161923.1"><vh>ClipPathExample</vh>
<v t="swot.20221022161946.2"><vh>ClipPathExample</vh>
<v t="swot.20221022161946.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022162343.1"><vh>MyClipper1</vh></v>
<v t="swot.20221022162124.1"><vh>show ClipPathExample</vh></v>
</v>
<v t="swot.20221022163908.1"><vh>ClipRectExample</vh>
<v t="swot.20221022163926.2"><vh>ClipRectExample</vh>
<v t="swot.20221022163926.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022164337.1"><vh>MyClipper2</vh></v>
<v t="swot.20221022164554.1"><vh>show ClipRectExample</vh></v>
</v>
<v t="swot.20221022165235.1"><vh>ClipRRectExample</vh>
<v t="swot.20221022165324.2"><vh>ClipRRectExample</vh>
<v t="swot.20221022165324.3"><vh>initState()</vh></v>
<v t="swot.20221022165324.4"><vh>dispose()</vh></v>
<v t="swot.20221022165324.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022165721.1"><vh>show ClipRRectExample</vh></v>
</v>
<v t="swot.20221022170537.1"><vh>CloseButtonExample</vh>
<v t="swot.20221022170557.2"><vh>CloseButtonExample</vh>
<v t="swot.20221022170557.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022170737.1"><vh>show CloseButtonExample</vh></v>
</v>
<v t="swot.20221022171451.1"><vh>ColoredBoxExample</vh>
<v t="swot.20221022171523.2"><vh>ColoredBoxExample</vh>
<v t="swot.20221022171523.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022171708.1"><vh>show ColoredBoxExample</vh></v>
</v>
<v t="swot.20221022172614.1"><vh>ColorFilteredExample</vh>
<v t="swot.20221022172641.2"><vh>ColorFilteredExample</vh>
<v t="swot.20221022172641.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022173017.1"><vh>show ColorFilteredExample</vh></v>
</v>
<v t="swot.20221022201311.1"><vh>ConstrainedBoxExample</vh>
<v t="swot.20221022201619.2"><vh>ConstrainedBoxExample</vh>
<v t="swot.20221022201619.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022202111.1"><vh>show ConstrainedBoxExample</vh></v>
</v>
<v t="swot.20221022202806.1"><vh>ContainerExample</vh>
<v t="swot.20221022202825.2"><vh>ContainerExample</vh>
<v t="swot.20221022202825.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022203303.1"><vh>show ContainerExample</vh></v>
</v>
<v t="swot.20221022203542.1"><vh>ColumnExample</vh>
<v t="swot.20221022203601.2"><vh>ColumnExample</vh>
<v t="swot.20221022203601.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022203824.1"><vh>show ColumnExample</vh></v>
</v>
<v t="swot.20221022210316.1"><vh>CupertinoActionSheetExample</vh>
<v t="swot.20221022210338.2"><vh>CupertinoActionSheetExample</vh>
<v t="swot.20221022210338.3"><vh>initState()</vh></v>
<v t="swot.20221022210338.4"><vh>dispose()</vh></v>
<v t="swot.20221022210338.5"><vh>build()</vh></v>
</v>
<v t="swot.20221022210532.1"><vh>show CupertinoActionSheetExample</vh></v>
</v>
<v t="swot.20221022213225.1"><vh>CupertinoAppExample</vh>
<v t="swot.20221022213243.2"><vh>CupertinoAppExample</vh>
<v t="swot.20221022213243.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022213726.2"><vh>MyCupertinoApp</vh>
<v t="swot.20221022213726.3"><vh>build()</vh></v>
</v>
<v t="swot.20221022214055.1"><vh>show CupertinoAppExample</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="swot.20221017093031.1">Every Flutter Widgets - Part One - 50 Widgets
https://www.youtube.com/watch?v=P3LzkpHBcnI&amp;list=PL82uaKJraAILRBFE1XhCyfvu-Fclc6vv1&amp;index=1&amp;ab_channel=FlutterMapp


TOP 70 Flutter Widgets EVER (Only For Pro)
https://www.youtube.com/watch?v=G1LGOH424lo

</t>
<t tx="swot.20221017093031.150">@language md
## Flutter built in Widgets

This project is for main using Widgets.

Using Literate Programming [leo-editor](https://github.com/leo-editor/leo-editor) tool to manage code structure.

### A...

    AboutDialog
    AboutListTile
    AbsorbPointer -- include button can not be clicked
    AlertDialog
    Align
    AnimatedAlign
    AnimatedBuilder
    AnimatedContainer
    AnimatedCrossFade
    AnimatedDefaultTextStyle
    AnimatedIcon
    AnimatedList
    AnimatedModalBarrier
    AnimatedOpacity
    AnimatedPadding
    AnimatedPhysicalModel
    AnimatedPositioned
    AnimatedRotation
    AnimatedSize
    AnimatedSwitcher
    AppBar
    AspectRatio
    AutoComplete

### B...

    BackdropFilterExample
    BannerExample
    BaselineExample
    BlockSemanticsExample -- 适用于读屏功能的处理
    BottomNavigationBarExample
    BottomSheetExample
    BuilderExample

### C...

    CardExample
    CenterExample
    CheckboxExample
    CheckboxListTileExample
    ChipExample
    ChoiceChipExample
    CircleAvatarExample
    CircularProgressIndicatorExample
    ClipOvalExample
    ClipPathExample
    ClipRectExample
    ClipRRectExample
    CloseButtonExample
    ColoredBoxExample
    ColorFilteredExample
    ConstrainedBoxExample
    ContainerExample
    ColumnExample
    CupertinoActionSheetExample
    CupertinoAppExample

</t>
<t tx="swot.20221017093031.151">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.152">@doc
@language asciidoc
:nofooter:
image::../image/AboutDialog.png[AboutDialog,240]

@c
@language dart
@tabwidth -2
const AboutDialog(
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter App',
  applicationVersion: 'version 1.0.0',
  children: [
    Text('This is a text created by Flutter Mapp'),
  ],
),

</t>
<t tx="swot.20221017093031.153">@doc
@language asciidoc
:nofooter:
image::../image/AboutListTile.png[AboutListTile,240]

@c
@language dart
@tabwidth -2
const AboutListTile(
  icon: Icon(Icons.info),
  applicationIcon: FlutterLogo(),
  applicationLegalese: 'Legalese',
  applicationName: 'Flutter',
  applicationVersion: 'version 1.0.0',
  aboutBoxChildren: [
    Text('This is a text created by Flutter Mapp'),
  ],
),
</t>
<t tx="swot.20221017093031.154">@doc
@language asciidoc
:nofooter:
image::../image/AbsorbPointer.png[AbsorbPointer,240]

@c
@language dart
@tabwidth -2
AbsorbPointer(
  child:
    @others
),
</t>
<t tx="swot.20221017093031.155">@language dart
@tabwidth -2
ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue.shade200,
  ),
  onPressed: (){},
  child: Text("不能点"),
),
</t>
<t tx="swot.20221017093031.156">AlertDialog(
  actions: [
    TextButton(
      onPressed: (){
        Navigator.of(context).pop();
      },
      child: const Text('Close'),
    ),
  ],
  title: const Text('Flutter Map'),
  contentPadding: const EdgeInsets.all(20.0),
  content: const Text('This is the alert Dialog'),
),
</t>
<t tx="swot.20221017093031.157">@doc
@language asciidoc
:nofooter:
image::../image/Align.png[Align,240]

@c
@language dart
@tabwidth -2
const Align(
  alignment: Alignment.topRight,
  // alignment: Alignment.bottonLeft,
  child: FlutterLogo(
    size: 20,
  ),
),
</t>
<t tx="swot.20221017093031.158">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221017093031.159">AnimatedAlign(
  alignment: selected ? Alignment.topRight : Alignment.bottomLeft,
  duration: const Duration(seconds: 1),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.160"></t>
<t tx="swot.20221017093031.161">late AnimationController _controllerBuilder;
</t>
<t tx="swot.20221017093031.162">_controllerBuilder = AnimationController(
  duration: const Duration(seconds: 10),  // 转一圈的时间
  vsync: this,                            // use TickerProviderStateMixin
)..repeat();                              // 10s 后重复

</t>
<t tx="swot.20221017093031.163">@doc
@language asciidoc
:nofooter:
1. define _controllerBuilder
2. _controllerBuilder: need class `with TickerProviderStateMixin`
3. _controllerBuilder: need dispose

@c
@language dart
@tabwidth -2
AnimatedBuilder(
  animation: _controllerBuilder,
  child: const FlutterLogo(size: 30,),
  builder: (BuildContext context, Widget? child){
    return Transform.rotate(
      angle: _controllerBuilder.value * 2.0 * math.pi,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.164">AnimatedContainer(
  width: selected ? 150.0 : 25.0,
  height: selected ? 25.0 : 40.0,
  color: selected ? Colors.blueGrey : Colors.grey,
  alignment: selected ? Alignment.center: AlignmentDirectional.topCenter,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: const FlutterLogo(size: 20.0),
),
</t>
<t tx="swot.20221017093031.165">AnimatedCrossFade(
  firstChild: Image.network(
    'https://img2.baidu.com/it/u=2642639611,1941240358&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  secondChild: Image.network(
    'https://img2.baidu.com/it/u=935142738,1114949296&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=200&amp;h=200',
    width: 100.0,
    height: 100.0,
  ),
  crossFadeState: selected ? CrossFadeState.showFirst : CrossFadeState.showSecond,
  duration: const Duration(seconds: 1),
),
</t>
<t tx="swot.20221017093031.166">AnimatedDefaultTextStyle(
  duration: const Duration(milliseconds: 300),
  style: TextStyle(
    fontSize: _fontSize,
    color: _color,
    fontWeight: FontWeight.bold,
  ),
  child: const Text('Flutter'),
),
</t>
<t tx="swot.20221017093031.167"></t>
<t tx="swot.20221017093031.168">bool _isPlay = false;
late AnimationController _controllerIcon;
</t>
<t tx="swot.20221017093031.169">_controllerIcon = AnimationController(
  duration: Duration(seconds: 1),
  vsync: this  // use TickerProviderStateMixin
);
</t>
<t tx="swot.20221017093031.170">@doc
@language asciidoc
:nofooter:
1. define AnimationController
2. AnimationController: need class `with TickerProviderStateMixin`
3. AnimationController: need dispose

@c
@language dart
@tabwidth -2
AnimatedIcon(
  // play is the first icon
  // pause is the second icon
  icon: AnimatedIcons.play_pause,
  progress: _controllerIcon,
  size: 40,
),
</t>
<t tx="swot.20221017093031.171"></t>
<t tx="swot.20221017093031.172">final _items = [];
final GlobalKey&lt;AnimatedListState&gt; _key = GlobalKey();
</t>
<t tx="swot.20221017093031.173">void _addItem() {
  _items.insert(0, "Item ${_items.length + 1}");
  _key.currentState!.insertItem(
    0,
    duration: const Duration(seconds: 1),
  );
}
</t>
<t tx="swot.20221017093031.174">void _removeItem(int index) {
  _key.currentState!.removeItem(
    index,
    (_, animation) {
      return SizeTransition(
        sizeFactor: animation,
        child: const Card(
          margin: EdgeInsets.all(10),
          color: Colors.red,
          child: ListTile(
            title: Text(
              "Deleted",
              style: TextStyle(fontSize: 14),
            ),
            visualDensity: VisualDensity(vertical: -3),  // adjust listTile height
            dense: true,
          ),
        ),
      );
    },
    duration: const Duration(milliseconds: 600),
  );
  _items.removeAt(index);
}
</t>
<t tx="swot.20221017093031.175">IconButton(
  onPressed: _addItem,
  icon: const Icon(Icons.add),
),

SizedBox(
  height: 150,
  child:
    @others
),
</t>
<t tx="swot.20221017093031.176">AnimatedList(
  key: _key,
  initialItemCount: 0,
  padding: const EdgeInsets.all(10),
  itemBuilder: (context, index, animation) {
    @others
  },
),
</t>
<t tx="swot.20221017093031.177">return SizeTransition(
  key: UniqueKey(),
  sizeFactor: animation,
  child: Card(
    margin: const EdgeInsets.all(3),
    color: Colors.orangeAccent,
    child: ListTile(
      title: Text(
        _items[index],
        style: const TextStyle(fontSize: 14),
      ),
      trailing: IconButton(
        icon: const Icon(Icons.delete),
        onPressed: (){
          _removeItem(index);
        },
      ),
      visualDensity: const VisualDensity(vertical: -3),  // adjust listTile height
      dense: true,  // 高度会更加紧密，就是高度更小的意思
    ),
  ),
);
</t>
<t tx="swot.20221017093031.178"></t>
<t tx="swot.20221017093031.179">const AnimatedModalBarrierExample(),
</t>
<t tx="swot.20221017093031.180">@language dart
@tabwidth -2
class AnimatedModalBarrierExample extends StatefulWidget {
  const AnimatedModalBarrierExample({super.key});

  @override
  State&lt;AnimatedModalBarrierExample&gt; createState() =&gt; _AnimatedModalBarrierExampleState();
}

class _AnimatedModalBarrierExampleState extends State&lt;AnimatedModalBarrierExample&gt;
    with SingleTickerProviderStateMixin {
  @others
}

</t>
<t tx="swot.20221017093031.181">bool _isPressed = false;
late Widget _animatedModalBarrier;
late AnimationController _animationController;
late Animation&lt;Color?&gt; _colorAnimation;

</t>
<t tx="swot.20221017093031.182">@override
void initState() {
  ColorTween colorTween = ColorTween(
    begin: Colors.orangeAccent.withOpacity(0.5),
    end: Colors.blueGrey.withOpacity(0.5),
  );
  _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
  );
  _colorAnimation = colorTween.animate(_animationController);
  _animatedModalBarrier = AnimatedModalBarrier(
    color: _colorAnimation,
    dismissible: true,
  );
  super.initState();
}
</t>
<t tx="swot.20221017093031.183">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.184">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 50.0,
    width: 150.0,
    child: Stack(
      alignment: AlignmentDirectional.center,
      children: [
        @others
      ],
    ),
  );
}
</t>
<t tx="swot.20221017093031.185">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  onPressed: (){
    setState(() {
      _isPressed = true;
    });
    _animationController.reset();
    _animationController.forward();
    Future.delayed(
      const Duration(seconds: 3), (){
        setState(() {
          _isPressed = false;
        });
      }
    );
  },
  child: const Text('Press'),
),
</t>
<t tx="swot.20221017093031.186">if (_isPressed) _animatedModalBarrier,
</t>
<t tx="swot.20221017093031.187"></t>
<t tx="swot.20221017093031.188">@language dart
@tabwidth -2
class AnimatedOpacityExample extends StatefulWidget {
  const AnimatedOpacityExample({super.key});

  @override
  State&lt;AnimatedOpacityExample&gt; createState() =&gt; _AnimatedOpacityExampleState();
}

class _AnimatedOpacityExampleState extends State&lt;AnimatedOpacityExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.189">double opacityLevel = 1.0;
</t>
<t tx="swot.20221017093031.190">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.191">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.192">AnimatedOpacity(
  opacity: opacityLevel,
  duration: const Duration(seconds: 2),
  child: const FlutterLogo(size: 30),
),

</t>
<t tx="swot.20221017093031.193">ElevatedButton(
  child: const Text('Fade Logo'),
  onPressed: (){
    setState(
      () =&gt; opacityLevel = opacityLevel == 0 ? 1.0 : 0.0,
    );
  },
),
</t>
<t tx="swot.20221017093031.194">AnimatedOpacityExample(),
</t>
<t tx="swot.20221017093031.195"></t>
<t tx="swot.20221017093031.196">AnimatedPaddingExample(),
</t>
<t tx="swot.20221017093031.197">@language dart
@tabwidth -2
class AnimatedPaddingExample extends StatefulWidget {
  const AnimatedPaddingExample({super.key});

  @override
  State&lt;AnimatedPaddingExample&gt; createState() =&gt; _AnimatedPaddingExampleState();
}

class _AnimatedPaddingExampleState extends State&lt;AnimatedPaddingExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.198">double padValue = 0.0;
</t>
<t tx="swot.20221017093031.199">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.200">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.201">Column(
  children: [
    @others
  ],
);
</t>
<t tx="swot.20221017093031.202">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221017093031.203">ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Change padding'),
  onPressed: () {
    setState((){
      padValue = padValue == 0.0 ? 100.0 : 0.0;
    });
  },
),

</t>
<t tx="swot.20221017093031.204">Text('Padding = $padValue'),
</t>
<t tx="swot.20221017093031.205">AnimatedPadding(
  // padValue will be changed
  padding: EdgeInsets.all(padValue),
  duration: const Duration(seconds: 2),
  curve: Curves.easeInOut,
  child: Container(
    width: MediaQuery.of(context).size.width,
    height: 30.0,
    color: Colors.orangeAccent,
  ),
),
</t>
<t tx="swot.20221017093031.206"></t>
<t tx="swot.20221017093031.207">AnimatedPhysicalModelExample(),
</t>
<t tx="swot.20221017093031.208">@language dart
@tabwidth -2
class AnimatedPhysicalModelExample extends StatefulWidget {
  const AnimatedPhysicalModelExample({super.key});

  @override
  State&lt;AnimatedPhysicalModelExample&gt; createState() =&gt; _AnimatedPhysicalModelExampleState();
}

class _AnimatedPhysicalModelExampleState extends State&lt;AnimatedPhysicalModelExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.209">bool isFlat = true;
</t>
<t tx="swot.20221017093031.210">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.211">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.212">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.213">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Click'),
  onPressed: () {
    setState(() {
      isFlat = ! isFlat;
    });
  },
),

</t>
<t tx="swot.20221017093031.214">AnimatedPhysicalModel(
  duration: const Duration(milliseconds: 500),
  curve: Curves.fastOutSlowIn,
  elevation: isFlat ? 0 : 6.0,
  shape: BoxShape.rectangle,
  shadowColor: Colors.black,
  color: Colors.white,
  child: const SizedBox(
    height: 40.0,
    width: 40.0,
    child: Icon(Icons.android_outlined),
  ),
),

</t>
<t tx="swot.20221017093031.215"></t>
<t tx="swot.20221017093031.216">AnimatedPositionedExample(),
</t>
<t tx="swot.20221017093031.217">@language dart
@tabwidth -2
class AnimatedPositionedExample extends StatefulWidget {
  const AnimatedPositionedExample({super.key});

  @override
  State&lt;AnimatedPositionedExample&gt; createState() =&gt; _AnimatedPositionedExampleState();
}

class _AnimatedPositionedExampleState extends State&lt;AnimatedPositionedExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.218">bool selected = false;
</t>
<t tx="swot.20221017093031.219">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.220">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.221">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221017093031.222">SizedBox(
  width: 200,
  height: 100,
  child:
    @others
);
</t>
<t tx="swot.20221017093031.223">Stack(
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221017093031.224">AnimatedPositioned(
  width: selected ? 200.0 : 150.0,
  height: selected ? 60.0 : 20.0,
  top: selected ? 35.0: 5.0,
  duration: const Duration(seconds: 2),
  curve: Curves.fastOutSlowIn,
  child: GestureDetector(
    onTap: () {
      setState(() {
        selected = !selected;
      });
    },
    child: Container(
      decoration: BoxDecoration(
        color: Colors.orangeAccent,
        borderRadius: BorderRadius.circular(25),
      ),
      child: const Text('click change position'),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.225"></t>
<t tx="swot.20221017093031.226">AnimatedRotationExample(),
</t>
<t tx="swot.20221017093031.227">@language dart
@tabwidth -2
class AnimatedRotationExample extends StatefulWidget {
  const AnimatedRotationExample({super.key});

  @override
  State&lt;AnimatedRotationExample&gt; createState() =&gt; _AnimatedRotationExampleState();
}

class _AnimatedRotationExampleState extends State&lt;AnimatedRotationExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.228">double turns = 0.0;
</t>
<t tx="swot.20221017093031.229">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.230">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.231">@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.232">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Rotate Logo'),
  onPressed: () {
    setState(() {
      turns += 1 / 4;
    });
  },
),

</t>
<t tx="swot.20221017093031.233">Padding(
  padding: const EdgeInsets.all(5),
  child: AnimatedRotation(
    turns: turns,
    duration: const Duration(seconds: 1),
    child: const FlutterLogo(size: 40),
  ),
),
</t>
<t tx="swot.20221017093031.234"></t>
<t tx="swot.20221017093031.235">AnimatedSizeExample(),
</t>
<t tx="swot.20221017093031.236">@language dart
@tabwidth -2
class AnimatedSizeExample extends StatefulWidget {
  const AnimatedSizeExample({super.key});

  @override
  State&lt;AnimatedSizeExample&gt; createState() =&gt; _AnimatedSizeExampleState();
}

class _AnimatedSizeExampleState extends State&lt;AnimatedSizeExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.237">double _size = 30;
</t>
<t tx="swot.20221017093031.238">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.239">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.240">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.241">Text("Click logo change size"),
</t>
<t tx="swot.20221017093031.242">GestureDetector(
  onTap: (){
    setState(() {
      _size = _size == 30 ? 60 : 30;
    });
  },
  child: Container(
    color: Colors.white,
    child: AnimatedSize(
      curve: Curves.easeIn,
      duration: const Duration(seconds: 1),
      child: FlutterLogo(size: _size),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.243"></t>
<t tx="swot.20221017093031.244">@language dart
@tabwidth -2
class AnimatedSwitcherExample extends StatefulWidget {
  const AnimatedSwitcherExample({super.key});

  @override
  State&lt;AnimatedSwitcherExample&gt; createState() =&gt; _AnimatedSwitcherExampleState();
}

class _AnimatedSwitcherExampleState extends State&lt;AnimatedSwitcherExample&gt;{
  @others
}

</t>
<t tx="swot.20221017093031.245">int _count = 0;
</t>
<t tx="swot.20221017093031.246">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221017093031.247">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221017093031.248">@language dart
@tabwidth -2
@override
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      @others
    ],
  );
}
</t>
<t tx="swot.20221017093031.249">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('Add'),
  onPressed: () {
    setState(() {
      _count += 1;
    });
  },
),

</t>
<t tx="swot.20221017093031.250">AnimatedSwitcher(
  duration: const Duration(milliseconds: 500),
  child: Text(
    '$_count',
    style: const TextStyle(fontSize: 30),
    key: ValueKey(_count),  // 重要，不加这行无法实现动画
  ),
  // 若不想要默认的动画效果，可能这样指定
  transitionBuilder: (Widget child, Animation&lt;double&gt; animation) {
    return ScaleTransition(
      scale: animation,
      child: child,
    );
  },
),
</t>
<t tx="swot.20221017093031.251">AnimatedSwitcherExample(),
</t>
<t tx="swot.20221017093031.252">appBar: AppBar(
  title: const Text('Demo A'),
  centerTitle: true,

  // leading: IconButton(
    // icon: const Icon(Icons.menu),
    // onPressed: (){},
  // ),

  actions: [
    IconButton(
      icon: const Icon(Icons.notifications),
      onPressed: (){},
    ),
  ],
  // AppBar 的下边变成了圆角
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.only(
      bottomLeft: Radius.circular(25),
      bottomRight: Radius.circular(25),
    ),
  ),

  backgroundColor: Colors.orangeAccent,
  elevation: 0.0,  // 去掉 appBar 与 body 之间的阴影
),
</t>
<t tx="swot.20221017093031.253">Container(
  color: Colors.orangeAccent,
  alignment: Alignment.center,
  width: double.infinity,
  height: 100,
  child: AspectRatio(
    aspectRatio: 16 / 9,
    child: Container(
      color: Colors.blueGrey,
      alignment: Alignment.center,
      child: const Text("AspecRatio 16 / 9"),
    ),
  ),
),
</t>
<t tx="swot.20221017093031.254"></t>
<t tx="swot.20221017093031.255">AutoCompleteExample(),
</t>
<t tx="swot.20221017093031.256">@language dart
@tabwidth -2
class AutoCompleteExample extends StatelessWidget {
  const AutoCompleteExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221017093031.257">static const List&lt;String&gt; listItems = &lt;String&gt;[
  'apple',
  'banana',
  'melon',
];
</t>
<t tx="swot.20221017093031.258">@override
Widget build(BuildContext context) {
  return Autocomplete&lt;String&gt;(
    optionsBuilder: (TextEditingValue textEditingValue) {
      if (textEditingValue.text == '') {
        return const Iterable&lt;String&gt;.empty();
      }
      return listItems.where((String item) {
        return item.contains(textEditingValue.text.toLowerCase());
      });
    },
    onSelected: (String item) {
      print('The $item was selected');
    },
  );
}
</t>
<t tx="swot.20221017093031.259">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221019111317.2">@language dart
@tabwidth -2
class BackdropFilterExample extends StatelessWidget {
  const BackdropFilterExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221019111317.3">@override
Widget build(BuildContext context) {
  return Stack(
    children: &lt;Widget&gt;[
      Text(
        '0' * 300,
        style: const TextStyle(
          color: Colors.green,
        ),
      ),
      Center(
        child: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(
              sigmaX: 4.0,
              sigmaY: 4.0,
            ),
            child: Container(
              alignment: Alignment.center,
              width: 100,
              height: 100,
              child: const Text('Blur'),
            ),
          ),
        ),
      ),
    ],
  );
}
</t>
<t tx="swot.20221021173506.1">BackdropFilterExample(),
</t>
<t tx="swot.20221021173546.1"></t>
<t tx="swot.20221021174618.1"></t>
<t tx="swot.20221021175217.2">@language dart
@tabwidth -2
class BannerExample extends StatelessWidget {
  const BannerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221021175217.3">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221021175330.1">Center(
  child:
    @others
);
</t>
<t tx="swot.20221021175401.1">Container(
  margin: const EdgeInsets.all(10.0),
  child:
    @others
),
</t>
<t tx="swot.20221021175506.1">Container(
  color: Colors.blueGrey,
  child:
    @others
),
</t>
<t tx="swot.20221021175604.1">Padding(
  padding: const EdgeInsets.fromLTRB(10, 20, 10, 20),
  child:
    @others
),
</t>
<t tx="swot.20221021175702.1">Column(
  mainAxisSize: MainAxisSize.min,
  children: [
    @others
  ],
),
</t>
<t tx="swot.20221021175915.1">Image.network(
  'https://img1.baidu.com/it/u=1855083458,281793390&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=989&amp;h=500',
),
</t>
<t tx="swot.20221021180035.1">const SizedBox(height: 10),
</t>
<t tx="swot.20221021180106.1">Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  children: [
    const Text(
      'Flutter Course',
      style: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    ),
    ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.orangeAccent,
      ),
      child: const Text('Get now'),
      onPressed: () {},
    ),
  ],
),
</t>
<t tx="swot.20221021180745.1">ClipRect(
  child:
    @others
),
</t>
<t tx="swot.20221021180828.1">Banner(
  message: "25% off",
  location: BannerLocation.topEnd,
  color: Colors.red,
  child:
    @others
),
</t>
<t tx="swot.20221021181118.1">BannerExample(),
</t>
<t tx="swot.20221021181511.1"></t>
<t tx="swot.20221021181642.2">@language dart
@tabwidth -2
class BaselineExample extends StatelessWidget {
  const BaselineExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221021181642.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Container(
      width: 100,
      height: 100,
      color: Colors.orange,
      child: const Baseline(
        baseline: 0,
        // baseline: 30,
        baselineType: TextBaseline.alphabetic,
        child: FlutterLogo(size: 30,),
      ),
    ),
  );
}
</t>
<t tx="swot.20221021181700.1">BaselineExample(),
</t>
<t tx="swot.20221021182532.1"></t>
<t tx="swot.20221022080218.2">@language dart
@tabwidth -2
class BlockSemanticsExample extends StatefulWidget {
  const BlockSemanticsExample({super.key});

  @override
  State&lt;BlockSemanticsExample&gt; createState() =&gt; _BlockSemanticsExampleState();
}

class _BlockSemanticsExampleState extends State&lt;BlockSemanticsExample&gt;{
  @others
}

</t>
<t tx="swot.20221022080218.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022080218.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022080218.5">@override
Widget build(BuildContext context) {
  return
    @others
}
</t>
<t tx="swot.20221022080422.1">SizedBox(
  width: double.infinity,
  child:
    @others
);
</t>
<t tx="swot.20221022083203.1">SizedBox(
  width: 500,
  height: 135,
  child:
  @others
),
</t>
<t tx="swot.20221022083314.1">// showSemanticsDebugger: true,
</t>
<t tx="swot.20221022083723.1">bool isShow = false;
</t>
<t tx="swot.20221022083954.1">Column(
  children: [
    @others
  ]
),
</t>
<t tx="swot.20221022084045.1">OutlinedButton(
  onPressed: () {
    setState(() {
      isShow = true;
    });
  },
  child: const Text('Click'),
),
</t>
<t tx="swot.20221022084513.1">if (isShow)
@others
</t>
<t tx="swot.20221022085519.1">BlockSemanticsExample(),
</t>
<t tx="swot.20221022090937.1">Card(
  color: Colors.orangeAccent,
  child: SizedBox(
    width: 200,
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text('This is a card'),
        TextButton(
          child: const Text('Close'),
          onPressed: () =&gt; setState(() {
            isShow = false;
          }),
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022091825.1">BlockSemantics(
  blocking: isShow,  // hidden OutlinedButton?
  child:
  @others
),
</t>
<t tx="swot.20221022093209.1"></t>
<t tx="swot.20221022094100.2">@language dart
@tabwidth -2
class BottomNavigationBarExample extends StatefulWidget {
  const BottomNavigationBarExample({super.key});

  @override
  State&lt;BottomNavigationBarExample&gt; createState() =&gt; _BottomNavigationBarExampleState();
}

class _BottomNavigationBarExampleState extends State&lt;BottomNavigationBarExample&gt;{
  @others
}

</t>
<t tx="swot.20221022094100.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022094100.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022094100.5">@override
Widget build(BuildContext context) {
  @others
}
</t>
<t tx="swot.20221022094133.1">int _currentIndex = 0;

List&lt;Widget&gt; body = const [
  Icon(Icons.home),
  Icon(Icons.menu),
  Icon(Icons.person),
];

</t>
<t tx="swot.20221022094818.1">BottomSheetExample(),
</t>
<t tx="swot.20221022095720.2">return Scaffold(
  @others
);

</t>
<t tx="swot.20221022095720.4">body: Center(
  child: body[_currentIndex],
),
</t>
<t tx="swot.20221022095720.5">bottomNavigationBar: BottomNavigationBar(  // new 底部
  fixedColor: Colors.white,
  backgroundColor: Colors.blue,
  items: const [
    BottomNavigationBarItem(
      label: 'Home',
      icon: Icon(Icons.home),
    ),
    BottomNavigationBarItem(
      label: 'Menu',
      icon: Icon(Icons.menu),
    ),
    BottomNavigationBarItem(
      label: 'Profile',
      icon: Icon(Icons.person),
    ),
  ],
  currentIndex: _currentIndex,
  type: BottomNavigationBarType.fixed,
  // type: BottomNavigationBarType.shifting, // 很有意思的样式
  onTap: (int index) {
    setState(() {
      _currentIndex = index;
    });
  }
),
</t>
<t tx="swot.20221022101129.1">ElevatedButton(
  style: ElevatedButton.styleFrom(
    // backgroundColor: Colors.orangeAccent,
  ),
  child: const Text('show BottomNavigationBarExample'),
  onPressed: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) =&gt; BottomNavigationBarExample(),
      ),
    );
  },
),


</t>
<t tx="swot.20221022101748.1">appBar: AppBar(
  title: Text('NewPage'),
  // leading: Icon(Icons.menu),
  actions: [
    Icon(Icons.settings),
  ],
  elevation: 0.0,
  centerTitle: true,
),
</t>
<t tx="swot.20221022104749.1"></t>
<t tx="swot.20221022104755.1"></t>
<t tx="swot.20221022104843.2">@language dart
@tabwidth -2
class BottomSheetExample extends StatefulWidget {
  const BottomSheetExample({super.key});

  @override
  State&lt;BottomSheetExample&gt; createState() =&gt; _BottomSheetExampleState();
}

class _BottomSheetExampleState extends State&lt;BottomSheetExample&gt;{
  @others
}

</t>
<t tx="swot.20221022104843.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022104843.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022104843.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ElevatedButton(
      child: const Text('Modal Bottom Sheet'),
      onPressed: () {
        showModalBottomSheet(
          context: context,
          builder: (BuildContext context) {
            return SizedBox(
              height: 200,
              child: Center(
                child: ElevatedButton(
                  child: const Text('Close'),
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
              ),
            );
          },
        );
      },
    ),
  );
}
</t>
<t tx="swot.20221022110627.2">@language dart
@tabwidth -2
class BuilderExample extends StatelessWidget {
  const BuilderExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022110627.3">@override
Widget build(BuildContext context) {
  return myBuilderWidget();
}
</t>
<t tx="swot.20221022110900.1">// 不加 Builder,则无法找到上面 build's context, 
myBuilderWidget() =&gt; Builder(
  builder: (context) {
    return Text(
      'Text with Theme',
      // context 需要使用上面的 Builder 来获取
      style: Theme.of(context).textTheme.displayLarge,
    );
  }
);
</t>
<t tx="swot.20221022115422.1">for node in p.children():
  print(node.h);
</t>
<t tx="swot.20221022121559.5">CardExample(),
</t>
<t tx="swot.20221022121755.2">@language dart
@tabwidth -2
class CardExample extends StatelessWidget {
  const CardExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022121755.3">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022121827.1"></t>
<t tx="swot.20221022122022.1">Card(
  elevation: 20,
  color: Colors.orangeAccent,
  child: Padding(
    padding: const EdgeInsets.all(10.0),
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const SizedBox(height: 8),
        const Text('This is a Flutter card'),
        TextButton(
          child: const Text('Press'),
          onPressed: () {},
        ),
      ],
    ),
  ),
),
</t>
<t tx="swot.20221022122630.1"></t>
<t tx="swot.20221022122655.2">@language dart
@tabwidth -2
class CenterExample extends StatelessWidget {
  const CenterExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022122655.3">@override
Widget build(BuildContext context) {
  return Column(
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      Container(
        color: Colors.orangeAccent,
        child:
        @others
      ),
    ]
  );
}
</t>
<t tx="swot.20221022122945.1">const Center(
  heightFactor: 5,  // Text 组件高度倍数（Container有高度则无效）
  child: Text('Flutter learning'),
),
</t>
<t tx="swot.20221022123052.1">CenterExample(),
</t>
<t tx="swot.20221022124036.1"></t>
<t tx="swot.20221022141252.2">@language dart
@tabwidth -2
class CheckboxExample extends StatefulWidget {
  const CheckboxExample({super.key});

  @override
  State&lt;CheckboxExample&gt; createState() =&gt; _CheckboxExampleState();
}

class _CheckboxExampleState extends State&lt;CheckboxExample&gt;{
  @others
}

</t>
<t tx="swot.20221022141252.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022141252.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022141252.5">@override
Widget build(BuildContext context) {
  return Center(
    child: Checkbox(
      value: isChecked,
      activeColor: Colors.orangeAccent,
      tristate: true,  // allow null value
      onChanged: (newBool) {
        setState(() {
          isChecked = newBool;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221022141315.1">bool? isChecked = false;
</t>
<t tx="swot.20221022141621.1">CheckboxExample(),
</t>
<t tx="swot.20221022141927.1"></t>
<t tx="swot.20221022141946.2">@language dart
@tabwidth -2
class CheckboxListTileExample extends StatefulWidget {
  const CheckboxListTileExample({super.key});

  @override
  State&lt;CheckboxListTileExample&gt; createState() =&gt; _CheckboxListTileExampleState();
}

class _CheckboxListTileExampleState extends State&lt;CheckboxListTileExample&gt;{
  @others
}

</t>
<t tx="swot.20221022141946.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022141946.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022141946.5">@override
Widget build(BuildContext context) {
  return Center(
    child:
    @others
  );
}
</t>
<t tx="swot.20221022142005.1">bool? _isChecked = false;
</t>
<t tx="swot.20221022142124.1">CheckboxListTile(
  title: const Text('Checkbox List Tile'),
  value: _isChecked,
  onChanged: (bool? newValue) {
    setState(() {
      _isChecked = newValue;
    });
  },
  activeColor: Colors.orangeAccent,
  checkColor: Colors.white,
  tileColor: Colors.black12,
  subtitle: const Text('This is a subtitle'),
  controlAffinity: ListTileControlAffinity.leading,
  tristate: true,
),
</t>
<t tx="swot.20221022142602.1">CheckboxListTileExample(),
</t>
<t tx="swot.20221022142903.1"></t>
<t tx="swot.20221022142919.2">@language dart
@tabwidth -2
class ChipExample extends StatelessWidget {
  const ChipExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022142919.3">@override
Widget build(BuildContext context) {
  return Center(
    child: Chip(
      label: const Text("This is a Flutter chip"),
      onDeleted: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022143204.1">ChipExample(),
</t>
<t tx="swot.20221022144321.1"></t>
<t tx="swot.20221022144339.2">@language dart
@tabwidth -2
class ChoiceChipExample extends StatefulWidget {
  const ChoiceChipExample({super.key});

  @override
  State&lt;ChoiceChipExample&gt; createState() =&gt; _ChoiceChipExampleState();
}

class _ChoiceChipExampleState extends State&lt;ChoiceChipExample&gt;{
  @others
}

</t>
<t tx="swot.20221022144339.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022144339.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022144339.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ChoiceChip(
      label: const Text("Choice Chip"),
      selected: isSelected,
      selectedColor: Colors.orangeAccent,
      onSelected: (bool newState) {
        setState(() {
          isSelected = newState;
        });
      },
    ),
  );
}
</t>
<t tx="swot.20221022144356.1">bool isSelected = false;
</t>
<t tx="swot.20221022144701.1">ChoiceChipExample(),
</t>
<t tx="swot.20221022144956.1"></t>
<t tx="swot.20221022145018.2">@language dart
@tabwidth -2
class CircleAvatarExample extends StatelessWidget {
  const CircleAvatarExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022145018.3">@override
Widget build(BuildContext context) {
  return const Center(
    child: CircleAvatar(
      backgroundColor: Colors.orangeAccent,
      radius: 30,
      // backgroundImage: AssetImage(''),
      backgroundImage: NetworkImage("https://img1.baidu.com/it/u=4237790906,511339359&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=400&amp;h=400"),
      child: Text(
        'Hello',
        style: TextStyle(color: Colors.red),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022145230.1">CircleAvatarExample(),
</t>
<t tx="swot.20221022153206.1"></t>
<t tx="swot.20221022153237.2">@language dart
@tabwidth -2
class CircularProgressIndicatorExample extends StatefulWidget {
  const CircularProgressIndicatorExample({super.key});

  @override
  State&lt;CircularProgressIndicatorExample&gt; createState() =&gt; _CircularProgressIndicatorExampleState();
}

class _CircularProgressIndicatorExampleState extends State&lt;CircularProgressIndicatorExample&gt;{
  @others
}

</t>
<t tx="swot.20221022153237.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022153237.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022153237.5">@override
Widget build(BuildContext context) {
  return Center(
    child: CircularProgressIndicator(
      color: Colors.orangeAccent,
      backgroundColor: Colors.blueGrey,
      value: 0.40,
    ),
  );
}
</t>
<t tx="swot.20221022153425.1">CircularProgressIndicatorExample(),
</t>
<t tx="swot.20221022153732.1"></t>
<t tx="swot.20221022153848.2">@language dart
@tabwidth -2
class ClipOvalExample extends StatelessWidget {
  const ClipOvalExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022153848.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipOval(
      clipper: CustomClip(),  // change shape
      child: Container(
        width: 60,
        height: 60,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022154220.1">ClipOvalExample(),
</t>
<t tx="swot.20221022154849.1">class CustomClip extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return Rect.fromLTWH(0, 0, size.width - 10, size.height);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022161923.1"></t>
<t tx="swot.20221022161946.2">@language dart
@tabwidth -2
class ClipPathExample extends StatelessWidget {
  const ClipPathExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022161946.3">@override
Widget build(BuildContext context) {
  return ClipPath(
    clipper: MyClipper1(),
    child: Container(
      width: double.infinity,
      height: 100,
      color: const Color(0xFF142B46),
    ),
  );
}
</t>
<t tx="swot.20221022162124.1">ClipPathExample(),
</t>
<t tx="swot.20221022162343.1">class MyClipper1 extends CustomClipper&lt;Path&gt; {
  @override
  Path getClip(Size size) {
    return Path()
      ..lineTo(0, size.height)
      ..quadraticBezierTo(
        size.width / 4,
        size.height - 40,
        size.width / 2,
        size.height - 20,
      )
      ..quadraticBezierTo(
        3 / 4 * size.width,
        size.height,
        size.width,
        size.height - 30,
      )
      ..lineTo(size.width, 0);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Path&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022163908.1"></t>
<t tx="swot.20221022163926.2">@language dart
@tabwidth -2
class ClipRectExample extends StatelessWidget {
  const ClipRectExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022163926.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipRect(
      clipper: MyClipper2(),
      child: Container(
        width: 100,
        height: 100,
        color: Colors.orangeAccent,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022164337.1">class MyClipper2 extends CustomClipper&lt;Rect&gt; {
  @override
  Rect getClip(Size size) {
    return const Rect.fromLTWH(0, 0, 80, 80);
  }
  @override
  bool shouldReclip(covariant CustomClipper&lt;Rect&gt; oldClipper) {
    return false;
  }
}
</t>
<t tx="swot.20221022164554.1">ClipRectExample(),
</t>
<t tx="swot.20221022165235.1"></t>
<t tx="swot.20221022165324.2">@language dart
@tabwidth -2
class ClipRRectExample extends StatefulWidget {
  const ClipRRectExample({super.key});

  @override
  State&lt;ClipRRectExample&gt; createState() =&gt; _ClipRRectExampleState();
}

class _ClipRRectExampleState extends State&lt;ClipRRectExample&gt;{
  @others
}

</t>
<t tx="swot.20221022165324.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022165324.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022165324.5">@override
Widget build(BuildContext context) {
  return Center(
    child: ClipRRect(
      borderRadius: BorderRadius.circular(30),
      child: Image.network(
        'https://img1.baidu.com/it/u=3866320064,995069430&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=500',
        width: 250
      ),
    ),
  );
}
</t>
<t tx="swot.20221022165721.1">ClipRRectExample(),
</t>
<t tx="swot.20221022170537.1"></t>
<t tx="swot.20221022170557.2">@language dart
@tabwidth -2
class CloseButtonExample extends StatelessWidget {
  const CloseButtonExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022170557.3">@override
Widget build(BuildContext context) {
  return Center(
    child: CloseButton(
      color: Colors.red,
      onPressed: () {
        debugPrint("Do something");
      },
    ),
  );
}
</t>
<t tx="swot.20221022170737.1">CloseButtonExample(),
</t>
<t tx="swot.20221022171451.1"></t>
<t tx="swot.20221022171523.2">@language dart
@tabwidth -2
class ColoredBoxExample extends StatelessWidget {
  const ColoredBoxExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022171523.3">@override
Widget build(BuildContext context) {
  return const Center(
    child: ColoredBox(
      color: Colors.orangeAccent,
      child: SizedBox(
        width: 100,
        height: 100,
        child: Center(
          child: Text('ColoredBox'),
        ),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022171708.1">ColoredBoxExample(),
</t>
<t tx="swot.20221022172614.1"></t>
<t tx="swot.20221022172641.2">@language dart
@tabwidth -2
class ColorFilteredExample extends StatelessWidget {
  const ColorFilteredExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022172641.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ColorFiltered(
      colorFilter: const ColorFilter.mode(
        Colors.pink,
        BlendMode.color,
      ),
      child: Image.network(
        'https://img1.baidu.com/it/u=457294142,2860827883&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=658&amp;h=439',
        height: 150,
      ),
    ),
  );
}
</t>
<t tx="swot.20221022173017.1">ColorFilteredExample(),
</t>
<t tx="swot.20221022201311.1"></t>
<t tx="swot.20221022201619.2">@language dart
@tabwidth -2
class ConstrainedBoxExample extends StatelessWidget {
  const ConstrainedBoxExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022201619.3">@override
Widget build(BuildContext context) {
  return Center(
    child: ConstrainedBox(
      constraints: const BoxConstraints(
        maxWidth: 200,
        maxHeight: 100,
      ),
      child: Container(
        color: Colors.orangeAccent,
        width: double.infinity,
        height: 50,
        child: const Text('ConstrainedBox'),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022202111.1">ConstrainedBoxExample(),
</t>
<t tx="swot.20221022202806.1"></t>
<t tx="swot.20221022202825.2">@language dart
@tabwidth -2
class ContainerExample extends StatelessWidget {
  const ContainerExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022202825.3">@override
Widget build(BuildContext context) {
  return Container(
    padding: const EdgeInsets.all(8.0),
    color: Colors.orangeAccent,
    alignment: Alignment.center,
    constraints: const BoxConstraints.expand(height: 100),
    transform: Matrix4.rotationZ(0.2),
    child: const Text('Flutter App'),
  );
}
</t>
<t tx="swot.20221022203303.1">ContainerExample(),
</t>
<t tx="swot.20221022203542.1"></t>
<t tx="swot.20221022203601.2">@language dart
@tabwidth -2
class ColumnExample extends StatelessWidget {
  const ColumnExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022203601.3">@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 120,
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      mainAxisAlignment: MainAxisAlignment.end,
      // mainAxisSize: MainAxisSize.min, // Column紧紧包围内容
      children: const [
        Text("data 1"),
        Text("data 2"),
        Text("data 3"),
        Text('data so long long'),
      ],
    ),
  );
}
</t>
<t tx="swot.20221022203824.1">ColumnExample(),
</t>
<t tx="swot.20221022210316.1"></t>
<t tx="swot.20221022210338.2">@language dart
@tabwidth -2
class CupertinoActionSheetExample extends StatefulWidget {
  const CupertinoActionSheetExample({super.key});

  @override
  State&lt;CupertinoActionSheetExample&gt; createState() =&gt; _CupertinoActionSheetExampleState();
}

class _CupertinoActionSheetExampleState extends State&lt;CupertinoActionSheetExample&gt;{
  @others
}

</t>
<t tx="swot.20221022210338.3">@override
void initState() {
  super.initState();
}
</t>
<t tx="swot.20221022210338.4">@override
void dispose() {
  super.dispose();
}
</t>
<t tx="swot.20221022210338.5">@override
Widget build(BuildContext context) {
  return CupertinoPageScaffold(  // Not important here
    child: Center(
      child: CupertinoButton(
        child: const Text('CupertinoActionSheet'),
        onPressed: () {
          showCupertinoModalPopup(
            context: context,
            builder: (BuildContext context) =&gt; CupertinoActionSheet(
              title: const Text('Flutter App'),
              message: const Text('Your Message'),
              actions: &lt;CupertinoActionSheetAction&gt;[
                CupertinoActionSheetAction(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Do something'),
                ),
                CupertinoActionSheetAction(
                  onPressed: (){
                    Navigator.pop(context);
                  },
                  child: const Text('Do something else'),
                )
              ],
            ),
          );
        },
      ),
    ),
  );
}
</t>
<t tx="swot.20221022210532.1">CupertinoActionSheetExample(),
</t>
<t tx="swot.20221022213225.1"></t>
<t tx="swot.20221022213243.2">@language dart
@tabwidth -2
class CupertinoAppExample extends StatelessWidget {
  const CupertinoAppExample({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022213243.3">@override
Widget build(BuildContext context) {
  return ElevatedButton(
    style: ElevatedButton.styleFrom(
      // backgroundColor: Colors.orangeAccent,
    ),
    child: const Text('CupertinoApp'),
    onPressed: () {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) =&gt; const MyCupertinoApp(),
        ),
      );
    },
  );
}
</t>
<t tx="swot.20221022213726.2">@language dart
@tabwidth -2
class MyCupertinoApp extends StatelessWidget {
  const MyCupertinoApp({ Key? key }) : super(key: key);
  @others
}
</t>
<t tx="swot.20221022213726.3">@override
Widget build(BuildContext context) {
  return const CupertinoApp(
    debugShowCheckedModeBanner: false,
    theme: CupertinoThemeData(
      brightness: Brightness.dark,
      scaffoldBackgroundColor: Color.fromARGB(255, 18, 32, 47),
      primaryColor: CupertinoColors.systemOrange,
    ),
    home: CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        middle: Text("Flutter App"),
      ),
      child: Center(
        child: Icon(CupertinoIcons.share),
      ),
    ),
  );
}
</t>
<t tx="swot.20221022214055.1">CupertinoAppExample(),
</t>
</tnodes>
</leo_file>
